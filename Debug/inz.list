
inz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08009e88  08009e88  00019e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4ac  0800a4ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4ac  0800a4ac  0001a4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4b4  0800a4b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b4  0800a4b4  0001a4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4b8  0800a4b8  0001a4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a4bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200001e0  0800a69c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800a69c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d7e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf0  00000000  00000000  00032f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00035b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00036a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028471  00000000  00000000  00037828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c54  00000000  00000000  0005fc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edb1e  00000000  00000000  000738ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016140b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea4  00000000  00000000  0016145c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e70 	.word	0x08009e70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009e70 	.word	0x08009e70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9bf 	b.w	8000f48 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f001 fa65 	bl	8002424 <null_ptr_check>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d120      	bne.n	8000fa8 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f8ee 	bl	8001148 <bme680_soft_reset>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d117      	bne.n	8000fa8 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	20d0      	movs	r0, #208	; 0xd0
 8000f80:	f000 f818 	bl	8000fb4 <bme680_get_regs>
 8000f84:	4603      	mov	r3, r0
 8000f86:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10b      	bne.n	8000fa8 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b61      	cmp	r3, #97	; 0x61
 8000f96:	d105      	bne.n	8000fa4 <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fbcf 	bl	800173c <get_calib_data>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e001      	b.n	8000fa8 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8000fa4:	23fd      	movs	r3, #253	; 0xfd
 8000fa6:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f001 fa2c 	bl	8002424 <null_ptr_check>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 8000fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d126      	bne.n	8001026 <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10e      	bne.n	8000ffe <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f94e 	bl	8002286 <set_mem_page>
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 8000fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7858      	ldrb	r0, [r3, #1]
 8001006:	89bb      	ldrh	r3, [r7, #12]
 8001008:	7bf9      	ldrb	r1, [r7, #15]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	47a0      	blx	r4
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 8001022:	23fe      	movs	r3, #254	; 0xfe
 8001024:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}

08001032 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 8001032:	b5b0      	push	{r4, r5, r7, lr}
 8001034:	b090      	sub	sp, #64	; 0x40
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4613      	mov	r3, r2
 8001040:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f005 ffda 	bl	8007008 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001054:	6838      	ldr	r0, [r7, #0]
 8001056:	f001 f9e5 	bl	8002424 <null_ptr_check>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (rslt == BME680_OK) {
 8001060:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001064:	2b00      	cmp	r3, #0
 8001066:	d169      	bne.n	800113c <bme680_set_regs+0x10a>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d061      	beq.n	8001132 <bme680_set_regs+0x100>
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b13      	cmp	r3, #19
 8001072:	d85e      	bhi.n	8001132 <bme680_set_regs+0x100>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 8001074:	2300      	movs	r3, #0
 8001076:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001078:	e034      	b.n	80010e4 <bme680_set_regs+0xb2>
				if (dev->intf == BME680_SPI_INTF) {
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	789b      	ldrb	r3, [r3, #2]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <bme680_set_regs+0x82>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8001082:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	6839      	ldr	r1, [r7, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f001 f8fa 	bl	8002286 <set_mem_page>
 8001092:	4603      	mov	r3, r0
 8001094:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8001098:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	3340      	adds	r3, #64	; 0x40
 80010ac:	443b      	add	r3, r7
 80010ae:	f803 2c2c 	strb.w	r2, [r3, #-44]
 80010b2:	e009      	b.n	80010c8 <bme680_set_regs+0x96>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80010b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	441a      	add	r2, r3
 80010ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	3340      	adds	r3, #64	; 0x40
 80010c2:	443b      	add	r3, r7
 80010c4:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 80010c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	441a      	add	r2, r3
 80010ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	3301      	adds	r3, #1
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	3340      	adds	r3, #64	; 0x40
 80010d8:	443b      	add	r3, r7
 80010da:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 80010de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80010e0:	3301      	adds	r3, #1
 80010e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d3c5      	bcc.n	800107a <bme680_set_regs+0x48>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 80010ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d121      	bne.n	800113a <bme680_set_regs+0x108>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	7858      	ldrb	r0, [r3, #1]
 80010fe:	7d39      	ldrb	r1, [r7, #20]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	b29b      	uxth	r3, r3
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	b29b      	uxth	r3, r3
 8001108:	3b01      	subs	r3, #1
 800110a:	b29d      	uxth	r5, r3
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	462b      	mov	r3, r5
 8001114:	47a0      	blx	r4
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if (dev->com_rslt != 0)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <bme680_set_regs+0x108>
					rslt = BME680_E_COM_FAIL;
 800112a:	23fe      	movs	r3, #254	; 0xfe
 800112c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (rslt == BME680_OK) {
 8001130:	e003      	b.n	800113a <bme680_set_regs+0x108>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8001132:	23fc      	movs	r3, #252	; 0xfc
 8001134:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001138:	e000      	b.n	800113c <bme680_set_regs+0x10a>
			if (rslt == BME680_OK) {
 800113a:	bf00      	nop
		}
	}

	return rslt;
 800113c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001140:	4618      	mov	r0, r3
 8001142:	3740      	adds	r7, #64	; 0x40
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}

08001148 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8001150:	23e0      	movs	r3, #224	; 0xe0
 8001152:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8001154:	23b6      	movs	r3, #182	; 0xb6
 8001156:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f001 f963 	bl	8002424 <null_ptr_check>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d127      	bne.n	80011ba <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	789b      	ldrb	r3, [r3, #2]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d104      	bne.n	800117c <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f001 f8ec 	bl	8002350 <get_mem_page>
 8001178:	4603      	mov	r3, r0
 800117a:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 800117c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d11a      	bne.n	80011ba <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001184:	f107 010d 	add.w	r1, r7, #13
 8001188:	f107 000e 	add.w	r0, r7, #14
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f7ff ff4f 	bl	8001032 <bme680_set_regs>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800119c:	200a      	movs	r0, #10
 800119e:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80011a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d108      	bne.n	80011ba <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	789b      	ldrb	r3, [r3, #2]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d104      	bne.n	80011ba <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f001 f8cd 	bl	8002350 <get_mem_page>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b088      	sub	sp, #32
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	6039      	str	r1, [r7, #0]
 80011d0:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	2300      	movs	r3, #0
 80011e0:	833b      	strh	r3, [r7, #24]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	2300      	movs	r3, #0
 80011e8:	823b      	strh	r3, [r7, #16]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011f0:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011f2:	6838      	ldr	r0, [r7, #0]
 80011f4:	f001 f916 	bl	8002424 <null_ptr_check>
 80011f8:	4603      	mov	r3, r0
 80011fa:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 80011fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001200:	2b00      	cmp	r3, #0
 8001202:	f040 81a2 	bne.w	800154a <bme680_set_sensor_settings+0x384>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <bme680_set_sensor_settings+0x54>
			rslt = set_gas_config(dev);
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f000 fbbf 	bl	8001994 <set_gas_config>
 8001216:	4603      	mov	r3, r0
 8001218:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		if (rslt == BME680_OK)
 8001222:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d104      	bne.n	8001234 <bme680_set_sensor_settings+0x6e>
			rslt = bme680_set_sensor_mode(dev);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f000 f993 	bl	8001556 <bme680_set_sensor_mode>
 8001230:	4603      	mov	r3, r0
 8001232:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	2b00      	cmp	r3, #0
 800123c:	d03d      	beq.n	80012ba <bme680_set_sensor_settings+0xf4>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2207      	movs	r2, #7
 8001248:	2100      	movs	r1, #0
 800124a:	f001 f8b0 	bl	80023ae <boundary_check>
 800124e:	4603      	mov	r3, r0
 8001250:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 8001252:	2375      	movs	r3, #117	; 0x75
 8001254:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001256:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d108      	bne.n	8001270 <bme680_set_sensor_settings+0xaa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800125e:	f107 011b 	add.w	r1, r7, #27
 8001262:	7f38      	ldrb	r0, [r7, #28]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2201      	movs	r2, #1
 8001268:	f7ff fea4 	bl	8000fb4 <bme680_get_regs>
 800126c:	4603      	mov	r3, r0
 800126e:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	2b00      	cmp	r3, #0
 8001278:	d010      	beq.n	800129c <bme680_set_sensor_settings+0xd6>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 800127a:	7efb      	ldrb	r3, [r7, #27]
 800127c:	b25b      	sxtb	r3, r3
 800127e:	f023 031c 	bic.w	r3, r3, #28
 8001282:	b25a      	sxtb	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	b25b      	sxtb	r3, r3
 800128e:	f003 031c 	and.w	r3, r3, #28
 8001292:	b25b      	sxtb	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b25b      	sxtb	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800129c:	7fbb      	ldrb	r3, [r7, #30]
 800129e:	3320      	adds	r3, #32
 80012a0:	443b      	add	r3, r7
 80012a2:	7f3a      	ldrb	r2, [r7, #28]
 80012a4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80012a8:	7fbb      	ldrb	r3, [r7, #30]
 80012aa:	7efa      	ldrb	r2, [r7, #27]
 80012ac:	3320      	adds	r3, #32
 80012ae:	443b      	add	r3, r7
 80012b0:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80012b4:	7fbb      	ldrb	r3, [r7, #30]
 80012b6:	3301      	adds	r3, #1
 80012b8:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d037      	beq.n	8001334 <bme680_set_sensor_settings+0x16e>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f103 003d 	add.w	r0, r3, #61	; 0x3d
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2208      	movs	r2, #8
 80012ce:	2100      	movs	r1, #0
 80012d0:	f001 f86d 	bl	80023ae <boundary_check>
 80012d4:	4603      	mov	r3, r0
 80012d6:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 80012d8:	2370      	movs	r3, #112	; 0x70
 80012da:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80012dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d108      	bne.n	80012f6 <bme680_set_sensor_settings+0x130>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80012e4:	f107 011b 	add.w	r1, r7, #27
 80012e8:	7f38      	ldrb	r0, [r7, #28]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f7ff fe61 	bl	8000fb4 <bme680_get_regs>
 80012f2:	4603      	mov	r3, r0
 80012f4:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80012f6:	7efb      	ldrb	r3, [r7, #27]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	f023 0308 	bic.w	r3, r3, #8
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001306:	b25b      	sxtb	r3, r3
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	b25b      	sxtb	r3, r3
 800130e:	4313      	orrs	r3, r2
 8001310:	b25b      	sxtb	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001316:	7fbb      	ldrb	r3, [r7, #30]
 8001318:	3320      	adds	r3, #32
 800131a:	443b      	add	r3, r7
 800131c:	7f3a      	ldrb	r2, [r7, #28]
 800131e:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001322:	7fbb      	ldrb	r3, [r7, #30]
 8001324:	7efa      	ldrb	r2, [r7, #27]
 8001326:	3320      	adds	r3, #32
 8001328:	443b      	add	r3, r7
 800132a:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800132e:	7fbb      	ldrb	r3, [r7, #30]
 8001330:	3301      	adds	r3, #1
 8001332:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d050      	beq.n	80013e0 <bme680_set_sensor_settings+0x21a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2205      	movs	r2, #5
 8001348:	2100      	movs	r1, #0
 800134a:	f001 f830 	bl	80023ae <boundary_check>
 800134e:	4603      	mov	r3, r0
 8001350:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8001352:	2374      	movs	r3, #116	; 0x74
 8001354:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001356:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d108      	bne.n	8001370 <bme680_set_sensor_settings+0x1aa>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800135e:	f107 011b 	add.w	r1, r7, #27
 8001362:	7f38      	ldrb	r0, [r7, #28]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	f7ff fe24 	bl	8000fb4 <bme680_get_regs>
 800136c:	4603      	mov	r3, r0
 800136e:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00d      	beq.n	8001396 <bme680_set_sensor_settings+0x1d0>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 800137a:	7efb      	ldrb	r3, [r7, #27]
 800137c:	b25b      	sxtb	r3, r3
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	b25a      	sxtb	r2, r3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800138a:	015b      	lsls	r3, r3, #5
 800138c:	b25b      	sxtb	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b25b      	sxtb	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d010      	beq.n	80013c2 <bme680_set_sensor_settings+0x1fc>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80013a0:	7efb      	ldrb	r3, [r7, #27]
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	f023 031c 	bic.w	r3, r3, #28
 80013a8:	b25a      	sxtb	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	f003 031c 	and.w	r3, r3, #28
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 80013c2:	7fbb      	ldrb	r3, [r7, #30]
 80013c4:	3320      	adds	r3, #32
 80013c6:	443b      	add	r3, r7
 80013c8:	7f3a      	ldrb	r2, [r7, #28]
 80013ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80013ce:	7fbb      	ldrb	r3, [r7, #30]
 80013d0:	7efa      	ldrb	r2, [r7, #27]
 80013d2:	3320      	adds	r3, #32
 80013d4:	443b      	add	r3, r7
 80013d6:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80013da:	7fbb      	ldrb	r3, [r7, #30]
 80013dc:	3301      	adds	r3, #1
 80013de:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d037      	beq.n	800145a <bme680_set_sensor_settings+0x294>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2205      	movs	r2, #5
 80013f4:	2100      	movs	r1, #0
 80013f6:	f000 ffda 	bl	80023ae <boundary_check>
 80013fa:	4603      	mov	r3, r0
 80013fc:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 80013fe:	2372      	movs	r3, #114	; 0x72
 8001400:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001402:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d108      	bne.n	800141c <bme680_set_sensor_settings+0x256>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800140a:	f107 011b 	add.w	r1, r7, #27
 800140e:	7f38      	ldrb	r0, [r7, #28]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2201      	movs	r2, #1
 8001414:	f7ff fdce 	bl	8000fb4 <bme680_get_regs>
 8001418:	4603      	mov	r3, r0
 800141a:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 800141c:	7efb      	ldrb	r3, [r7, #27]
 800141e:	b25b      	sxtb	r3, r3
 8001420:	f023 0307 	bic.w	r3, r3, #7
 8001424:	b25a      	sxtb	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800142c:	b25b      	sxtb	r3, r3
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b25b      	sxtb	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800143c:	7fbb      	ldrb	r3, [r7, #30]
 800143e:	3320      	adds	r3, #32
 8001440:	443b      	add	r3, r7
 8001442:	7f3a      	ldrb	r2, [r7, #28]
 8001444:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001448:	7fbb      	ldrb	r3, [r7, #30]
 800144a:	7efa      	ldrb	r2, [r7, #27]
 800144c:	3320      	adds	r3, #32
 800144e:	443b      	add	r3, r7
 8001450:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	3301      	adds	r3, #1
 8001458:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d060      	beq.n	8001526 <bme680_set_sensor_settings+0x360>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2201      	movs	r2, #1
 800146e:	2100      	movs	r1, #0
 8001470:	f000 ff9d 	bl	80023ae <boundary_check>
 8001474:	4603      	mov	r3, r0
 8001476:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8001478:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <bme680_set_sensor_settings+0x2ce>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	220a      	movs	r2, #10
 800148a:	2100      	movs	r1, #0
 800148c:	f000 ff8f 	bl	80023ae <boundary_check>
 8001490:	4603      	mov	r3, r0
 8001492:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 8001494:	2371      	movs	r3, #113	; 0x71
 8001496:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001498:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d108      	bne.n	80014b2 <bme680_set_sensor_settings+0x2ec>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80014a0:	f107 011b 	add.w	r1, r7, #27
 80014a4:	7f38      	ldrb	r0, [r7, #28]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f7ff fd83 	bl	8000fb4 <bme680_get_regs>
 80014ae:	4603      	mov	r3, r0
 80014b0:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d010      	beq.n	80014de <bme680_set_sensor_settings+0x318>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80014bc:	7efb      	ldrb	r3, [r7, #27]
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	f023 0310 	bic.w	r3, r3, #16
 80014c4:	b25a      	sxtb	r2, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	f003 0310 	and.w	r3, r3, #16
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00f      	beq.n	8001508 <bme680_set_sensor_settings+0x342>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80014e8:	7efb      	ldrb	r3, [r7, #27]
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	f023 030f 	bic.w	r3, r3, #15
 80014f0:	b25a      	sxtb	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b25b      	sxtb	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001508:	7fbb      	ldrb	r3, [r7, #30]
 800150a:	3320      	adds	r3, #32
 800150c:	443b      	add	r3, r7
 800150e:	7f3a      	ldrb	r2, [r7, #28]
 8001510:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001514:	7fbb      	ldrb	r3, [r7, #30]
 8001516:	7efa      	ldrb	r2, [r7, #27]
 8001518:	3320      	adds	r3, #32
 800151a:	443b      	add	r3, r7
 800151c:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001520:	7fbb      	ldrb	r3, [r7, #30]
 8001522:	3301      	adds	r3, #1
 8001524:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8001526:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <bme680_set_sensor_settings+0x37c>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 800152e:	7fba      	ldrb	r2, [r7, #30]
 8001530:	f107 010c 	add.w	r1, r7, #12
 8001534:	f107 0014 	add.w	r0, r7, #20
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	f7ff fd7a 	bl	8001032 <bme680_set_regs>
 800153e:	4603      	mov	r3, r0
 8001540:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	7f7a      	ldrb	r2, [r7, #29]
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}

	return rslt;
 800154a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8001562:	2374      	movs	r3, #116	; 0x74
 8001564:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 ff5c 	bl	8002424 <null_ptr_check>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d14c      	bne.n	8001612 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8001578:	f107 010d 	add.w	r1, r7, #13
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	2074      	movs	r0, #116	; 0x74
 8001582:	f7ff fd17 	bl	8000fb4 <bme680_get_regs>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d119      	bne.n	80015c6 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8001592:	7b7b      	ldrb	r3, [r7, #13]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 800159a:	7bbb      	ldrb	r3, [r7, #14]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d012      	beq.n	80015c6 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80015a0:	7b7b      	ldrb	r3, [r7, #13]
 80015a2:	f023 0303 	bic.w	r3, r3, #3
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80015aa:	f107 010d 	add.w	r1, r7, #13
 80015ae:	f107 000c 	add.w	r0, r7, #12
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f7ff fd3c 	bl	8001032 <bme680_set_regs>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c2:	200a      	movs	r0, #10
 80015c4:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1d5      	bne.n	8001578 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d01d      	beq.n	8001612 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80015d6:	7b7b      	ldrb	r3, [r7, #13]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	f023 0303 	bic.w	r3, r3, #3
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d109      	bne.n	8001612 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80015fe:	f107 010d 	add.w	r1, r7, #13
 8001602:	f107 000c 	add.w	r0, r7, #12
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f7ff fd12 	bl	8001032 <bme680_set_regs>
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001612:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 800162a:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <bme680_get_profile_dur+0xbc>)
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001634:	6018      	str	r0, [r3, #0]
 8001636:	3304      	adds	r3, #4
 8001638:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001640:	3318      	adds	r3, #24
 8001642:	443b      	add	r3, r7
 8001644:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001648:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001650:	3318      	adds	r3, #24
 8001652:	443b      	add	r3, r7
 8001654:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001658:	461a      	mov	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	4413      	add	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001666:	3318      	adds	r3, #24
 8001668:	443b      	add	r3, r7
 800166a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800166e:	461a      	mov	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f240 72ab 	movw	r2, #1963	; 0x7ab
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f203 7374 	addw	r3, r3, #1908	; 0x774
 8001688:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8001690:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001698:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <bme680_get_profile_dur+0xc0>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	099b      	lsrs	r3, r3, #6
 80016a4:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	3301      	adds	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80016c8:	4413      	add	r3, r2
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	801a      	strh	r2, [r3, #0]
	}
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	08009e88 	.word	0x08009e88
 80016e0:	10624dd3 	.word	0x10624dd3

080016e4 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80016ee:	6838      	ldr	r0, [r7, #0]
 80016f0:	f000 fe98 	bl	8002424 <null_ptr_check>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80016f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d117      	bne.n	8001730 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fd05 	bl	8002112 <read_field_data>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 800170c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10d      	bne.n	8001730 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	da04      	bge.n	8001728 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001726:	e003      	b.n	8001730 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		}
	}

	return rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08e      	sub	sp, #56	; 0x38
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2225      	movs	r2, #37	; 0x25
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f005 fc59 	bl	8007008 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 8001756:	2300      	movs	r3, #0
 8001758:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fe62 	bl	8002424 <null_ptr_check>
 8001760:	4603      	mov	r3, r0
 8001762:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (rslt == BME680_OK) {
 8001766:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 810c 	bne.w	8001988 <get_calib_data+0x24c>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8001770:	f107 010c 	add.w	r1, r7, #12
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2219      	movs	r2, #25
 8001778:	2089      	movs	r0, #137	; 0x89
 800177a:	f7ff fc1b 	bl	8000fb4 <bme680_get_regs>
 800177e:	4603      	mov	r3, r0
 8001780:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 8001784:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10b      	bne.n	80017a4 <get_calib_data+0x68>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	f103 0119 	add.w	r1, r3, #25
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2210      	movs	r2, #16
 8001798:	20e1      	movs	r0, #225	; 0xe1
 800179a:	f7ff fc0b 	bl	8000fb4 <bme680_get_regs>
 800179e:	4603      	mov	r3, r0
 80017a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 80017a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	7b7b      	ldrb	r3, [r7, #13]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	b25a      	sxtb	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 80017d6:	7cbb      	ldrb	r3, [r7, #18]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	7c7b      	ldrb	r3, [r7, #17]
 80017de:	b21b      	sxth	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 80017ea:	7d3b      	ldrb	r3, [r7, #20]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	7cfb      	ldrb	r3, [r7, #19]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80017fc:	7d7b      	ldrb	r3, [r7, #21]
 80017fe:	b25a      	sxtb	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8001806:	7e3b      	ldrb	r3, [r7, #24]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	b21a      	sxth	r2, r3
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	b21b      	sxth	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b21a      	sxth	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	845a      	strh	r2, [r3, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8001818:	7ebb      	ldrb	r3, [r7, #26]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	b21a      	sxth	r2, r3
 800181e:	7e7b      	ldrb	r3, [r7, #25]
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	b21a      	sxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	849a      	strh	r2, [r3, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 800182a:	7f3b      	ldrb	r3, [r7, #28]
 800182c:	b25a      	sxtb	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8001834:	7efb      	ldrb	r3, [r7, #27]
 8001836:	b25a      	sxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 800183e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21a      	sxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	851a      	strh	r2, [r3, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8001852:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	b21a      	sxth	r2, r3
 800185a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800185e:	b21b      	sxth	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b21a      	sxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8001868:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001876:	011b      	lsls	r3, r3, #4
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8001878:	b21a      	sxth	r2, r3
 800187a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800187e:	b21b      	sxth	r3, r3
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	b21b      	sxth	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 800188a:	b29a      	uxth	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001890:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001894:	011b      	lsls	r3, r3, #4
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8001896:	b21a      	sxth	r2, r3
 8001898:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80018ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018b0:	b25a      	sxtb	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80018b6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80018ba:	b25a      	sxtb	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 80018c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80018c4:	b25a      	sxtb	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 80018ca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80018d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 80018dc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018e0:	b25a      	sxtb	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80018e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 80018fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001900:	b25a      	sxtb	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8001906:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800190a:	2b00      	cmp	r3, #0
 800190c:	d135      	bne.n	800197a <get_calib_data+0x23e>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 800190e:	f107 010b 	add.w	r1, r7, #11
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	2002      	movs	r0, #2
 8001918:	f7ff fb4c 	bl	8000fb4 <bme680_get_regs>
 800191c:	4603      	mov	r3, r0
 800191e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8001922:	7afb      	ldrb	r3, [r7, #11]
 8001924:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001928:	2b00      	cmp	r3, #0
 800192a:	da00      	bge.n	800192e <get_calib_data+0x1f2>
 800192c:	330f      	adds	r3, #15
 800192e:	111b      	asrs	r3, r3, #4
 8001930:	b2da      	uxtb	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if (rslt == BME680_OK) {
 8001938:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800193c:	2b00      	cmp	r3, #0
 800193e:	d11c      	bne.n	800197a <get_calib_data+0x23e>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8001940:	f107 010b 	add.w	r1, r7, #11
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fb33 	bl	8000fb4 <bme680_get_regs>
 800194e:	4603      	mov	r3, r0
 8001950:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	b25a      	sxtb	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				if (rslt == BME680_OK)
 800195e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <get_calib_data+0x23e>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8001966:	f107 010b 	add.w	r1, r7, #11
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	2004      	movs	r0, #4
 8001970:	f7ff fb20 	bl	8000fb4 <bme680_get_regs>
 8001974:	4603      	mov	r3, r0
 8001976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	b25b      	sxtb	r3, r3
 800197e:	111b      	asrs	r3, r3, #4
 8001980:	b25a      	sxtb	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	return rslt;
 8001988:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800198c:	4618      	mov	r0, r3
 800198e:	3738      	adds	r7, #56	; 0x38
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 fd41 	bl	8002424 <null_ptr_check>
 80019a2:	4603      	mov	r3, r0
 80019a4:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d132      	bne.n	8001a14 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 80019ae:	2300      	movs	r3, #0
 80019b0:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 80019b2:	2300      	movs	r3, #0
 80019b4:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d119      	bne.n	80019f4 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80019c0:	235a      	movs	r3, #90	; 0x5a
 80019c2:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 faff 	bl	8001fd0 <calc_heater_res>
 80019d2:	4603      	mov	r3, r0
 80019d4:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80019d6:	2364      	movs	r3, #100	; 0x64
 80019d8:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 fb71 	bl	80020c8 <calc_heater_dur>
 80019e6:	4603      	mov	r3, r0
 80019e8:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019f2:	e001      	b.n	80019f8 <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 80019f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8001a00:	f107 0108 	add.w	r1, r7, #8
 8001a04:	f107 000c 	add.w	r0, r7, #12
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f7ff fb11 	bl	8001032 <bme680_set_regs>
 8001a10:	4603      	mov	r3, r0
 8001a12:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8001a20:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a24:	b091      	sub	sp, #68	; 0x44
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	61f8      	str	r0, [r7, #28]
 8001a2a:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	10da      	asrs	r2, r3, #3
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	8adb      	ldrh	r3, [r3, #22]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	17da      	asrs	r2, r3, #31
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a42:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	17da      	asrs	r2, r3, #31
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	617a      	str	r2, [r7, #20]
 8001a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a5a:	460a      	mov	r2, r1
 8001a5c:	fb02 f203 	mul.w	r2, r2, r3
 8001a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a62:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001a66:	4601      	mov	r1, r0
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a70:	6939      	ldr	r1, [r7, #16]
 8001a72:	fba2 4501 	umull	r4, r5, r2, r1
 8001a76:	442b      	add	r3, r5
 8001a78:	461d      	mov	r5, r3
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	0ae2      	lsrs	r2, r4, #11
 8001a84:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8001a88:	12eb      	asrs	r3, r5, #11
 8001a8a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8001a8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	0850      	lsrs	r0, r2, #1
 8001a9c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001aa0:	1059      	asrs	r1, r3, #1
 8001aa2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	0862      	lsrs	r2, r4, #1
 8001ab0:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8001ab4:	106b      	asrs	r3, r5, #1
 8001ab6:	fb02 f501 	mul.w	r5, r2, r1
 8001aba:	fb00 f403 	mul.w	r4, r0, r3
 8001abe:	442c      	add	r4, r5
 8001ac0:	fba0 ab02 	umull	sl, fp, r0, r2
 8001ac4:	eb04 030b 	add.w	r3, r4, fp
 8001ac8:	469b      	mov	fp, r3
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	ea4f 321a 	mov.w	r2, sl, lsr #12
 8001ad6:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 8001ada:	ea4f 332b 	mov.w	r3, fp, asr #12
 8001ade:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	17da      	asrs	r2, r3, #31
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	60fa      	str	r2, [r7, #12]
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001af6:	462a      	mov	r2, r5
 8001af8:	fb02 f203 	mul.w	r2, r2, r3
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	4621      	mov	r1, r4
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b08:	4621      	mov	r1, r4
 8001b0a:	fba2 8901 	umull	r8, r9, r2, r1
 8001b0e:	444b      	add	r3, r9
 8001b10:	4699      	mov	r9, r3
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	ea4f 3298 	mov.w	r2, r8, lsr #14
 8001b1e:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 8001b22:	ea4f 33a9 	mov.w	r3, r9, asr #14
 8001b26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8001b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2e:	4413      	add	r3, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	3380      	adds	r3, #128	; 0x80
 8001b42:	121b      	asrs	r3, r3, #8
 8001b44:	84fb      	strh	r3, [r7, #38]	; 0x26

	return calc_temp;
 8001b46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3744      	adds	r7, #68	; 0x44
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b54:	4770      	bx	lr

08001b56 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b087      	sub	sp, #28
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	105b      	asrs	r3, r3, #1
 8001b66:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001b6a:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	109b      	asrs	r3, r3, #2
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	1092      	asrs	r2, r2, #2
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	f992 2026 	ldrsb.w	r2, [r2, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	109b      	asrs	r3, r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b8e:	461a      	mov	r2, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	109a      	asrs	r2, r3, #2
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	109b      	asrs	r3, r3, #2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	1092      	asrs	r2, r2, #2
 8001bb6:	fb02 f303 	mul.w	r3, r2, r3
 8001bba:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001bc2:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001bc8:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001bda:	4413      	add	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	149b      	asrs	r3, r3, #18
 8001be2:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	8b92      	ldrh	r2, [r2, #28]
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	13db      	asrs	r3, r3, #15
 8001bf4:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001bfc:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	131b      	asrs	r3, r3, #12
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	f640 4335 	movw	r3, #3125	; 0xc35
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c18:	db06      	blt.n	8001c28 <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e005      	b.n	8001c34 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005a      	lsls	r2, r3, #1
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c44:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001c48:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001c4a:	fb01 f303 	mul.w	r3, r1, r3
 8001c4e:	131b      	asrs	r3, r3, #12
 8001c50:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	135b      	asrs	r3, r3, #13
 8001c62:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	121b      	asrs	r3, r3, #8
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	1212      	asrs	r2, r2, #8
 8001c6c:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
		(int32_t)(pressure_comp >> 8) *
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001c82:	145b      	asrs	r3, r3, #17
 8001c84:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	441a      	add	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
 8001c96:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001c98:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001c9a:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001ca2:	697b      	ldr	r3, [r7, #20]

}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b08b      	sub	sp, #44	; 0x2c
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3380      	adds	r3, #128	; 0x80
 8001cc8:	121b      	asrs	r3, r3, #8
 8001cca:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001ccc:	88fa      	ldrh	r2, [r7, #6]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	891b      	ldrh	r3, [r3, #8]
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	493d      	ldr	r1, [pc, #244]	; (8001ddc <calc_humidity+0x12c>)
 8001ce6:	fb81 0103 	smull	r0, r1, r1, r3
 8001cea:	1149      	asrs	r1, r1, #5
 8001cec:	17db      	asrs	r3, r3, #31
 8001cee:	1acb      	subs	r3, r1, r3
 8001cf0:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	895b      	ldrh	r3, [r3, #10]
 8001cfa:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001d02:	461a      	mov	r2, r3
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	4a34      	ldr	r2, [pc, #208]	; (8001ddc <calc_humidity+0x12c>)
 8001d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d10:	1152      	asrs	r2, r2, #5
 8001d12:	17db      	asrs	r3, r3, #31
 8001d14:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	492d      	ldr	r1, [pc, #180]	; (8001ddc <calc_humidity+0x12c>)
 8001d26:	fb81 c103 	smull	ip, r1, r1, r3
 8001d2a:	1149      	asrs	r1, r1, #5
 8001d2c:	17db      	asrs	r3, r3, #31
 8001d2e:	1acb      	subs	r3, r1, r3
 8001d30:	6a39      	ldr	r1, [r7, #32]
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001d38:	4928      	ldr	r1, [pc, #160]	; (8001ddc <calc_humidity+0x12c>)
 8001d3a:	fb81 c103 	smull	ip, r1, r1, r3
 8001d3e:	1149      	asrs	r1, r1, #5
 8001d40:	17db      	asrs	r3, r3, #31
 8001d42:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001d44:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001d46:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001d4a:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 8001d4e:	129b      	asrs	r3, r3, #10
 8001d50:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	7bdb      	ldrb	r3, [r3, #15]
 8001d60:	01db      	lsls	r3, r3, #7
 8001d62:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <calc_humidity+0x12c>)
 8001d74:	fb82 1203 	smull	r1, r2, r2, r3
 8001d78:	1152      	asrs	r2, r2, #5
 8001d7a:	17db      	asrs	r3, r3, #31
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4413      	add	r3, r2
 8001d82:	111b      	asrs	r3, r3, #4
 8001d84:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	139b      	asrs	r3, r3, #14
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	1392      	asrs	r2, r2, #14
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	129b      	asrs	r3, r3, #10
 8001d94:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	105b      	asrs	r3, r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4413      	add	r3, r2
 8001da8:	129b      	asrs	r3, r3, #10
 8001daa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	131b      	asrs	r3, r3, #12
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <calc_humidity+0x130>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	dd02      	ble.n	8001dc4 <calc_humidity+0x114>
		calc_hum = 100000;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <calc_humidity+0x130>)
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	e004      	b.n	8001dce <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da01      	bge.n	8001dce <calc_humidity+0x11e>
		calc_hum = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24

	return (uint32_t) calc_hum;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	372c      	adds	r7, #44	; 0x2c
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	51eb851f 	.word	0x51eb851f
 8001de0:	000186a0 	.word	0x000186a0

08001de4 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b0bc      	sub	sp, #240	; 0xf0
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	64ba      	str	r2, [r7, #72]	; 0x48
 8001df0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001df4:	460b      	mov	r3, r1
 8001df6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8001dfa:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <calc_gas_resistance+0x1e4>)
 8001dfc:	f107 0594 	add.w	r5, r7, #148	; 0x94
 8001e00:	461c      	mov	r4, r3
 8001e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8001e16:	4b6d      	ldr	r3, [pc, #436]	; (8001fcc <calc_gas_resistance+0x1e8>)
 8001e18:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8001e1c:	461c      	mov	r4, r3
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e34:	f993 3036 	ldrsb.w	r3, [r3, #54]	; 0x36
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	17da      	asrs	r2, r3, #31
 8001e3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e3e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e40:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001e44:	4622      	mov	r2, r4
 8001e46:	462b      	mov	r3, r5
 8001e48:	f04f 0000 	mov.w	r0, #0
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	0099      	lsls	r1, r3, #2
 8001e52:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001e56:	0090      	lsls	r0, r2, #2
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	1851      	adds	r1, r2, r1
 8001e60:	6339      	str	r1, [r7, #48]	; 0x30
 8001e62:	4629      	mov	r1, r5
 8001e64:	eb43 0101 	adc.w	r1, r3, r1
 8001e68:	6379      	str	r1, [r7, #52]	; 0x34
 8001e6a:	f240 533c 	movw	r3, #1340	; 0x53c
 8001e6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e72:	4602      	mov	r2, r0
 8001e74:	18d3      	adds	r3, r2, r3
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e78:	460b      	mov	r3, r1
 8001e7a:	f143 0300 	adc.w	r3, r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001e80:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	33a8      	adds	r3, #168	; 0xa8
 8001e88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001e92:	2200      	movs	r2, #0
 8001e94:	643b      	str	r3, [r7, #64]	; 0x40
 8001e96:	647a      	str	r2, [r7, #68]	; 0x44
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001e98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001ea2:	4622      	mov	r2, r4
 8001ea4:	fb02 f203 	mul.w	r2, r2, r3
 8001ea8:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 8001eac:	462b      	mov	r3, r5
 8001eae:	4604      	mov	r4, r0
 8001eb0:	460d      	mov	r5, r1
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	4622      	mov	r2, r4
 8001ebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ebe:	fba2 8901 	umull	r8, r9, r2, r1
 8001ec2:	444b      	add	r3, r9
 8001ec4:	4699      	mov	r9, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001ed2:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001ed6:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001eda:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8001ede:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	627a      	str	r2, [r7, #36]	; 0x24
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	03cb      	lsls	r3, r1, #15
 8001ef8:	4621      	mov	r1, r4
 8001efa:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8001efe:	4621      	mov	r1, r4
 8001f00:	03ca      	lsls	r2, r1, #15
 8001f02:	f112 417f 	adds.w	r1, r2, #4278190080	; 0xff000000
 8001f06:	61b9      	str	r1, [r7, #24]
 8001f08:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001f12:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f16:	4621      	mov	r1, r4
 8001f18:	1889      	adds	r1, r1, r2
 8001f1a:	6139      	str	r1, [r7, #16]
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	eb43 0101 	adc.w	r1, r3, r1
 8001f22:	6179      	str	r1, [r7, #20]
 8001f24:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f28:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8001f2c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	33a8      	adds	r3, #168	; 0xa8
 8001f34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f38:	4413      	add	r3, r2
 8001f3a:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	60fa      	str	r2, [r7, #12]
 8001f44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001f48:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f4c:	462a      	mov	r2, r5
 8001f4e:	fb02 f203 	mul.w	r2, r2, r3
 8001f52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f56:	4621      	mov	r1, r4
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001f62:	4621      	mov	r1, r4
 8001f64:	fba2 ab01 	umull	sl, fp, r2, r1
 8001f68:	445b      	add	r3, fp
 8001f6a:	469b      	mov	fp, r3
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	ea4f 225a 	mov.w	r2, sl, lsr #9
 8001f78:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 8001f7c:	ea4f 236b 	mov.w	r3, fp, asr #9
 8001f80:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8001f84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	0842      	lsrs	r2, r0, #1
 8001f92:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001f96:	104b      	asrs	r3, r1, #1
 8001f98:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001f9c:	1814      	adds	r4, r2, r0
 8001f9e:	603c      	str	r4, [r7, #0]
 8001fa0:	414b      	adcs	r3, r1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fac:	f7fe fdfc 	bl	8000ba8 <__aeabi_ldivmod>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

	return calc_gas_res;
 8001fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	37f0      	adds	r7, #240	; 0xf0
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc8:	08009e90 	.word	0x08009e90
 8001fcc:	08009ed0 	.word	0x08009ed0

08001fd0 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b08b      	sub	sp, #44	; 0x2c
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	6039      	str	r1, [r7, #0]
 8001fda:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001fe2:	d902      	bls.n	8001fea <calc_heater_res+0x1a>
		temp = 400;
 8001fe4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001fe8:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <calc_heater_res+0xec>)
 8001ffe:	fb82 1203 	smull	r1, r2, r2, r3
 8002002:	1192      	asrs	r2, r2, #6
 8002004:	17db      	asrs	r3, r3, #31
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8002012:	f503 7244 	add.w	r2, r3, #784	; 0x310
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800201c:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8002020:	f203 1399 	addw	r3, r3, #409	; 0x199
 8002024:	88f9      	ldrh	r1, [r7, #6]
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4925      	ldr	r1, [pc, #148]	; (80020c0 <calc_heater_res+0xf0>)
 800202c:	fb81 0103 	smull	r0, r1, r1, r3
 8002030:	10c9      	asrs	r1, r1, #3
 8002032:	17db      	asrs	r3, r3, #31
 8002034:	1acb      	subs	r3, r1, r3
 8002036:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 800203a:	4921      	ldr	r1, [pc, #132]	; (80020c0 <calc_heater_res+0xf0>)
 800203c:	fb81 0103 	smull	r0, r1, r1, r3
 8002040:	1089      	asrs	r1, r1, #2
 8002042:	17db      	asrs	r3, r3, #31
 8002044:	1acb      	subs	r3, r1, r3
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	0fda      	lsrs	r2, r3, #31
 8002050:	4413      	add	r3, r2
 8002052:	105b      	asrs	r3, r3, #1
 8002054:	461a      	mov	r2, r3
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	4413      	add	r3, r2
 800205a:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002062:	3304      	adds	r3, #4
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	fb92 f3f3 	sdiv	r3, r2, r3
 800206a:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8002072:	461a      	mov	r2, r3
 8002074:	4613      	mov	r3, r2
 8002076:	019b      	lsls	r3, r3, #6
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002082:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fb92 f3f3 	sdiv	r3, r2, r3
 800208c:	f1a3 02fa 	sub.w	r2, r3, #250	; 0xfa
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	3332      	adds	r3, #50	; 0x32
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <calc_heater_res+0xf4>)
 80020a0:	fb82 1203 	smull	r1, r2, r2, r3
 80020a4:	1152      	asrs	r2, r2, #5
 80020a6:	17db      	asrs	r3, r3, #31
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	372c      	adds	r7, #44	; 0x2c
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	10624dd3 	.word	0x10624dd3
 80020c0:	66666667 	.word	0x66666667
 80020c4:	51eb851f 	.word	0x51eb851f

080020c8 <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80020dc:	d308      	bcc.n	80020f0 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 80020de:	23ff      	movs	r3, #255	; 0xff
 80020e0:	73bb      	strb	r3, [r7, #14]
 80020e2:	e00f      	b.n	8002104 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	2b3f      	cmp	r3, #63	; 0x3f
 80020f4:	d8f6      	bhi.n	80020e4 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4413      	add	r3, r2
 8002102:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002104:	7bbb      	ldrb	r3, [r7, #14]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b08a      	sub	sp, #40	; 0x28
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 800212e:	230a      	movs	r3, #10
 8002130:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f000 f975 	bl	8002424 <null_ptr_check>
 800213a:	4603      	mov	r3, r0
 800213c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	do {
		if (rslt == BME680_OK) {
 8002140:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 8087 	bne.w	8002258 <read_field_data+0x146>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 800214a:	f107 0108 	add.w	r1, r7, #8
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	220f      	movs	r2, #15
 8002152:	201d      	movs	r0, #29
 8002154:	f7fe ff2e 	bl	8000fb4 <bme680_get_regs>
 8002158:	4603      	mov	r3, r0
 800215a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 800215e:	7a3b      	ldrb	r3, [r7, #8]
 8002160:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002164:	b2da      	uxtb	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 800216a:	7a3b      	ldrb	r3, [r7, #8]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	b2da      	uxtb	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 8002176:	7a7a      	ldrb	r2, [r7, #9]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800217c:	7abb      	ldrb	r3, [r7, #10]
 800217e:	031a      	lsls	r2, r3, #12
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 8002186:	7b3a      	ldrb	r2, [r7, #12]
 8002188:	0912      	lsrs	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 800218c:	4313      	orrs	r3, r2
 800218e:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	031a      	lsls	r2, r3, #12
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	0912      	lsrs	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80021a4:	7c3b      	ldrb	r3, [r7, #16]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	7c7b      	ldrb	r3, [r7, #17]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80021b4:	7d7b      	ldrb	r3, [r7, #21]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	7dbb      	ldrb	r3, [r7, #22]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 80021c8:	7dbb      	ldrb	r3, [r7, #22]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b25a      	sxtb	r2, r3
 80021d6:	7dbb      	ldrb	r3, [r7, #22]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b25a      	sxtb	r2, r3
 80021f0:	7dbb      	ldrb	r3, [r7, #22]
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b25b      	sxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	da20      	bge.n	8002250 <read_field_data+0x13e>
				data->temperature = calc_temperature(adc_temp, dev);
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	69f8      	ldr	r0, [r7, #28]
 8002212:	f7ff fc05 	bl	8001a20 <calc_temperature>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	6a38      	ldr	r0, [r7, #32]
 8002222:	f7ff fc98 	bl	8001b56 <calc_pressure>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 800222c:	8b7b      	ldrh	r3, [r7, #26]
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fd3d 	bl	8001cb0 <calc_humidity>
 8002236:	4602      	mov	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 800223c:	7df9      	ldrb	r1, [r7, #23]
 800223e:	8b3b      	ldrh	r3, [r7, #24]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fdce 	bl	8001de4 <calc_gas_resistance>
 8002248:	4602      	mov	r2, r0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
				break;
 800224e:	e00d      	b.n	800226c <read_field_data+0x15a>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	200a      	movs	r0, #10
 8002256:	4798      	blx	r3
		}
		tries--;
 8002258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800225c:	3b01      	subs	r3, #1
 800225e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	} while (tries);
 8002262:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002266:	2b00      	cmp	r3, #0
 8002268:	f47f af6a 	bne.w	8002140 <read_field_data+0x2e>

	if (!tries)
 800226c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002270:	2b00      	cmp	r3, #0
 8002272:	d102      	bne.n	800227a <read_field_data+0x168>
		rslt = BME680_W_NO_NEW_DATA;
 8002274:	2302      	movs	r3, #2
 8002276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return rslt;
 800227a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800227e:	4618      	mov	r0, r3
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 8002286:	b590      	push	{r4, r7, lr}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	6039      	str	r1, [r7, #0]
 8002290:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f000 f8c6 	bl	8002424 <null_ptr_check>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 800229c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d14f      	bne.n	8002344 <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da02      	bge.n	80022b2 <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73bb      	strb	r3, [r7, #14]
 80022b0:	e001      	b.n	80022b6 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 80022b2:	2310      	movs	r3, #16
 80022b4:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	78db      	ldrb	r3, [r3, #3]
 80022ba:	7bba      	ldrb	r2, [r7, #14]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d041      	beq.n	8002344 <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7bba      	ldrb	r2, [r7, #14]
 80022c4:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	7858      	ldrb	r0, [r3, #1]
 80022ce:	f107 020d 	add.w	r2, r7, #13
 80022d2:	2301      	movs	r3, #1
 80022d4:	21f3      	movs	r1, #243	; 0xf3
 80022d6:	47a0      	blx	r4
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			if (dev->com_rslt != 0)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 80022ec:	23fe      	movs	r3, #254	; 0xfe
 80022ee:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 80022f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d125      	bne.n	8002344 <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	f023 0310 	bic.w	r3, r3, #16
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	78db      	ldrb	r3, [r3, #3]
 8002306:	b25b      	sxtb	r3, r3
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	b25a      	sxtb	r2, r3
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	b25b      	sxtb	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b25b      	sxtb	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	7858      	ldrb	r0, [r3, #1]
 8002322:	f107 020d 	add.w	r2, r7, #13
 8002326:	2301      	movs	r3, #1
 8002328:	2173      	movs	r1, #115	; 0x73
 800232a:	47a0      	blx	r4
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 8002340:	23fe      	movs	r3, #254	; 0xfe
 8002342:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 8002344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}

08002350 <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f863 	bl	8002424 <null_ptr_check>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11b      	bne.n	80023a2 <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7858      	ldrb	r0, [r3, #1]
 8002372:	f107 020e 	add.w	r2, r7, #14
 8002376:	2301      	movs	r3, #1
 8002378:	21f3      	movs	r1, #243	; 0xf3
 800237a:	47a0      	blx	r4
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		if (dev->com_rslt != 0)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 8002390:	23fe      	movs	r3, #254	; 0xfe
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e005      	b.n	80023a2 <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8002396:	7bbb      	ldrb	r3, [r7, #14]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	b2da      	uxtb	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}

080023ae <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b087      	sub	sp, #28
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	72fb      	strb	r3, [r7, #11]
 80023bc:	4613      	mov	r3, r2
 80023be:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d022      	beq.n	8002410 <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	7afa      	ldrb	r2, [r7, #11]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d90b      	bls.n	80023ec <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	7afa      	ldrb	r2, [r7, #11]
 80023d8:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	7aba      	ldrb	r2, [r7, #10]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d20e      	bcs.n	8002414 <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	7aba      	ldrb	r2, [r7, #10]
 80023fa:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	b2da      	uxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800240e:	e001      	b.n	8002414 <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8002410:	23ff      	movs	r3, #255	; 0xff
 8002412:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8002414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002418:	4618      	mov	r0, r3
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00b      	beq.n	800244a <null_ptr_check+0x26>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <null_ptr_check+0x26>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <null_ptr_check+0x26>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 800244a:	23ff      	movs	r3, #255	; 0xff
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e001      	b.n	8002454 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <user_delay_us>:
#include <bme680_add.h>
#include "i2c.h"

void user_delay_us(uint32_t period)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f9f3 	bl	8002858 <HAL_Delay>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <user_i2c_read>:

uint8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af04      	add	r7, sp, #16
 8002482:	603a      	str	r2, [r7, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
 800248a:	460b      	mov	r3, r1
 800248c:	71bb      	strb	r3, [r7, #6]
 800248e:	4613      	mov	r3, r2
 8002490:	80bb      	strh	r3, [r7, #4]
	int8_t rslt = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(&hi2c1, dev_id << 1, reg_addr, 1, reg_data, len, 100);
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	b29b      	uxth	r3, r3
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	b299      	uxth	r1, r3
 800249e:	79bb      	ldrb	r3, [r7, #6]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	2364      	movs	r3, #100	; 0x64
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	88bb      	ldrh	r3, [r7, #4]
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2301      	movs	r3, #1
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <user_i2c_read+0x44>)
 80024b2:	f001 fe2b 	bl	800410c <HAL_I2C_Mem_Read>

	return rslt;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200001fc 	.word	0x200001fc

080024c4 <user_i2c_write>:

uint8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af04      	add	r7, sp, #16
 80024ca:	603a      	str	r2, [r7, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	460b      	mov	r3, r1
 80024d4:	71bb      	strb	r3, [r7, #6]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80bb      	strh	r3, [r7, #4]
	int8_t rslt = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(&hi2c1, dev_id << 1, reg_addr, 1, reg_data, len, 100);
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	b299      	uxth	r1, r3
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	2364      	movs	r3, #100	; 0x64
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	88bb      	ldrh	r3, [r7, #4]
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2301      	movs	r3, #1
 80024f8:	4803      	ldr	r0, [pc, #12]	; (8002508 <user_i2c_write+0x44>)
 80024fa:	f001 fcf3 	bl	8003ee4 <HAL_I2C_Mem_Write>

	return rslt;
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200001fc 	.word	0x200001fc

0800250c <init_sensor>:

uint8_t init_sensor(struct bme680_dev *sensor)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	  sensor->dev_id = BME680_I2C_ADDR_PRIMARY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2276      	movs	r2, #118	; 0x76
 8002518:	705a      	strb	r2, [r3, #1]
	  sensor->intf = BME680_I2C_INTF;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	709a      	strb	r2, [r3, #2]
	  sensor->read = user_i2c_read;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a08      	ldr	r2, [pc, #32]	; (8002544 <init_sensor+0x38>)
 8002524:	649a      	str	r2, [r3, #72]	; 0x48
	  sensor->write = user_i2c_write;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <init_sensor+0x3c>)
 800252a:	64da      	str	r2, [r3, #76]	; 0x4c
	  sensor->delay_ms = user_delay_us;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <init_sensor+0x40>)
 8002530:	651a      	str	r2, [r3, #80]	; 0x50

	  return bme680_init(sensor);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fd0a 	bl	8000f4c <bme680_init>
 8002538:	4603      	mov	r3, r0
 800253a:	b2db      	uxtb	r3, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	0800247d 	.word	0x0800247d
 8002548:	080024c5 	.word	0x080024c5
 800254c:	08002465 	.word	0x08002465

08002550 <set_sensor_settings>:

uint8_t set_sensor_settings(struct bme680_dev *sensor)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	  sensor->tph_sett.os_hum = BME680_OS_2X;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  sensor->tph_sett.os_pres = BME680_OS_4X;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	  sensor->tph_sett.os_temp = BME680_OS_8X;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2204      	movs	r2, #4
 800256c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	  sensor->tph_sett.filter = BME680_FILTER_SIZE_3;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	  sensor->gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	  sensor->gas_sett.heatr_temp = 320; // degree Celsius
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002586:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	  sensor->gas_sett.heatr_dur = 150; // milliseconds
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2296      	movs	r2, #150	; 0x96
 800258e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	  if (bme680_init(sensor) != BME680_OK) {
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fcda 	bl	8000f4c <bme680_init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <set_sensor_settings+0x52>
		  return 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	e019      	b.n	80025d6 <set_sensor_settings+0x86>
	  }

	  sensor->power_mode = BME680_FORCED_MODE; // power mode
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	  uint8_t required_settings_set = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL;
 80025aa:	23df      	movs	r3, #223	; 0xdf
 80025ac:	73fb      	strb	r3, [r7, #15]
	  if (bme680_set_sensor_settings(required_settings_set, sensor) != BME680_OK) {
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fe06 	bl	80011c6 <bme680_set_sensor_settings>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <set_sensor_settings+0x74>
		  return 2;
 80025c0:	2302      	movs	r3, #2
 80025c2:	e008      	b.n	80025d6 <set_sensor_settings+0x86>
	  }

	  if (bme680_set_sensor_mode(sensor) != BME680_OK) { // set power mode
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fe ffc6 	bl	8001556 <bme680_set_sensor_mode>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <set_sensor_settings+0x84>
		  return 3;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e000      	b.n	80025d6 <set_sensor_settings+0x86>
	  }

	  return BME680_OK;
 80025d4:	2300      	movs	r3, #0
//
//	  int8_t rslt = BME680_OK;
//	  rslt = bme680_init(sensor);
//
//	  return rslt;
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <MX_DMA_Init+0x38>)
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <MX_DMA_Init+0x38>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6493      	str	r3, [r2, #72]	; 0x48
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <MX_DMA_Init+0x38>)
 80025f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	200f      	movs	r0, #15
 8002604:	f000 ffed 	bl	80035e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002608:	200f      	movs	r0, #15
 800260a:	f001 f806 	bl	800361a <HAL_NVIC_EnableIRQ>

}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000

0800261c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	4a2e      	ldr	r2, [pc, #184]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800263c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263e:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <MX_GPIO_Init+0xd4>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002656:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <MX_GPIO_Init+0xd4>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_GPIO_Init+0xd4>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002692:	2200      	movs	r2, #0
 8002694:	2120      	movs	r1, #32
 8002696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269a:	f001 fb7b 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_SET);
 800269e:	2201      	movs	r2, #1
 80026a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a4:	4813      	ldr	r0, [pc, #76]	; (80026f4 <MX_GPIO_Init+0xd8>)
 80026a6:	f001 fb75 	bl	8003d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80026aa:	2320      	movs	r3, #32
 80026ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c4:	f001 f9bc 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRKEY_Pin;
 80026c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWRKEY_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <MX_GPIO_Init+0xd8>)
 80026e2:	f001 f9ad 	bl	8003a40 <HAL_GPIO_Init>

}
 80026e6:	bf00      	nop
 80026e8:	3728      	adds	r7, #40	; 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	48000800 	.word	0x48000800

080026f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <MX_I2C1_Init+0x74>)
 80026fe:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <MX_I2C1_Init+0x78>)
 8002700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <MX_I2C1_Init+0x74>)
 8002704:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <MX_I2C1_Init+0x7c>)
 8002706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <MX_I2C1_Init+0x74>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <MX_I2C1_Init+0x74>)
 8002710:	2201      	movs	r2, #1
 8002712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002714:	4b15      	ldr	r3, [pc, #84]	; (800276c <MX_I2C1_Init+0x74>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <MX_I2C1_Init+0x74>)
 800271c:	2200      	movs	r2, #0
 800271e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <MX_I2C1_Init+0x74>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <MX_I2C1_Init+0x74>)
 8002728:	2200      	movs	r2, #0
 800272a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <MX_I2C1_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002732:	480e      	ldr	r0, [pc, #56]	; (800276c <MX_I2C1_Init+0x74>)
 8002734:	f001 fb46 	bl	8003dc4 <HAL_I2C_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800273e:	f000 fa41 	bl	8002bc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002742:	2100      	movs	r1, #0
 8002744:	4809      	ldr	r0, [pc, #36]	; (800276c <MX_I2C1_Init+0x74>)
 8002746:	f002 f8a1 	bl	800488c <HAL_I2CEx_ConfigAnalogFilter>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002750:	f000 fa38 	bl	8002bc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002754:	2100      	movs	r1, #0
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_I2C1_Init+0x74>)
 8002758:	f002 f8e3 	bl	8004922 <HAL_I2CEx_ConfigDigitalFilter>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002762:	f000 fa2f 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200001fc 	.word	0x200001fc
 8002770:	40005400 	.word	0x40005400
 8002774:	10909cec 	.word	0x10909cec

08002778 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0ac      	sub	sp, #176	; 0xb0
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2288      	movs	r2, #136	; 0x88
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f004 fc35 	bl	8007008 <memset>
  if(i2cHandle->Instance==I2C1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a21      	ldr	r2, [pc, #132]	; (8002828 <HAL_I2C_MspInit+0xb0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d13b      	bne.n	8002820 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80027a8:	2340      	movs	r3, #64	; 0x40
 80027aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4618      	mov	r0, r3
 80027b6:	f002 ff65 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80027c0:	f000 fa00 	bl	8002bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c4:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_I2C_MspInit+0xb4>)
 80027c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c8:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_I2C_MspInit+0xb4>)
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_I2C_MspInit+0xb4>)
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e4:	2312      	movs	r3, #18
 80027e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027f6:	2304      	movs	r3, #4
 80027f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002800:	4619      	mov	r1, r3
 8002802:	480b      	ldr	r0, [pc, #44]	; (8002830 <HAL_I2C_MspInit+0xb8>)
 8002804:	f001 f91c 	bl	8003a40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_I2C_MspInit+0xb4>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	4a07      	ldr	r2, [pc, #28]	; (800282c <HAL_I2C_MspInit+0xb4>)
 800280e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002812:	6593      	str	r3, [r2, #88]	; 0x58
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_I2C_MspInit+0xb4>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002820:	bf00      	nop
 8002822:	37b0      	adds	r7, #176	; 0xb0
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40005400 	.word	0x40005400
 800282c:	40021000 	.word	0x40021000
 8002830:	48000400 	.word	0x48000400

08002834 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart1, RX, 30);
 800283c:	221e      	movs	r2, #30
 800283e:	4904      	ldr	r1, [pc, #16]	; (8002850 <HAL_UART_RxCpltCallback+0x1c>)
 8002840:	4804      	ldr	r0, [pc, #16]	; (8002854 <HAL_UART_RxCpltCallback+0x20>)
 8002842:	f003 fcbd 	bl	80061c0 <HAL_UART_Receive_DMA>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000250 	.word	0x20000250
 8002854:	20000274 	.word	0x20000274

08002858 <HAL_Delay>:

void HAL_Delay(uint32_t Delay)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 uint32_t tickstart = HAL_GetTick();
 8002860:	f000 fdd8 	bl	8003414 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]
 uint32_t wait = Delay;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60fb      	str	r3, [r7, #12]

 /* Add a period to guaranty minimum wait */
 if (wait < HAL_MAX_DELAY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d004      	beq.n	800287c <HAL_Delay+0x24>
 {
   wait++;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3301      	adds	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 }

 while((HAL_GetTick() - tickstart) < wait)
 8002878:	e000      	b.n	800287c <HAL_Delay+0x24>
 {
	 __WFI();
 800287a:	bf30      	wfi
 while((HAL_GetTick() - tickstart) < wait)
 800287c:	f000 fdca 	bl	8003414 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	429a      	cmp	r2, r3
 800288a:	d8f6      	bhi.n	800287a <HAL_Delay+0x22>
 }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289c:	b0ab      	sub	sp, #172	; 0xac
 800289e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028a0:	f000 fd4f 	bl	8003342 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028a4:	f000 f93c 	bl	8002b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028a8:	f7ff feb8 	bl	800261c <MX_GPIO_Init>
  MX_DMA_Init();
 80028ac:	f7ff fe98 	bl	80025e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80028b0:	f000 fc64 	bl	800317c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80028b4:	f7ff ff20 	bl	80026f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (init_sensor(&bme680_sensor) != BME680_OK) {
 80028b8:	f107 0320 	add.w	r3, r7, #32
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fe25 	bl	800250c <init_sensor>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <main+0x34>
	  return 1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e118      	b.n	8002afe <main+0x266>
  }

  if (set_sensor_settings(&bme680_sensor) != BME680_OK) {
 80028cc:	f107 0320 	add.w	r3, r7, #32
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fe3d 	bl	8002550 <set_sensor_settings>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <main+0x48>
	  return 2;
 80028dc:	2302      	movs	r3, #2
 80028de:	e10e      	b.n	8002afe <main+0x266>
  }

  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &bme680_sensor);
 80028e0:	f107 0220 	add.w	r2, r7, #32
 80028e4:	f107 030a 	add.w	r3, r7, #10
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fe98 	bl	8001620 <bme680_get_profile_dur>
  HAL_UART_Receive_DMA(&huart1, RX, 30);
 80028f0:	221e      	movs	r2, #30
 80028f2:	4985      	ldr	r1, [pc, #532]	; (8002b08 <main+0x270>)
 80028f4:	4885      	ldr	r0, [pc, #532]	; (8002b0c <main+0x274>)
 80028f6:	f003 fc63 	bl	80061c0 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(meas_period); // Delay till the measurement is ready
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ffab 	bl	8002858 <HAL_Delay>

	  if (bme680_get_sensor_data(&data, &bme680_sensor) == BME680_OK) {
 8002902:	f107 0220 	add.w	r2, r7, #32
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fee9 	bl	80016e4 <bme680_get_sensor_data>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	f040 80e5 	bne.w	8002ae4 <main+0x24c>
		  if(data.status & BME680_GASM_VALID_MSK) {
 800291a:	7b3b      	ldrb	r3, [r7, #12]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80df 	beq.w	8002ae4 <main+0x24c>
		      const int size = snprintf(NULL, 0,"{\"temperature\":%f,\"humidity\":%f,\"pressure\":%f,\"voc\":%d}", data.temperature / 100.0f, data.humidity / 1000.0f, data.pressure / 100.0f, data.gas_resistance);
 8002926:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002b10 <main+0x278>
 8002936:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800293a:	ee16 0a90 	vmov	r0, s13
 800293e:	f7fd fe03 	bl	8000548 <__aeabi_f2d>
 8002942:	4682      	mov	sl, r0
 8002944:	468b      	mov	fp, r1
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002b14 <main+0x27c>
 8002954:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002958:	ee16 0a90 	vmov	r0, s13
 800295c:	f7fd fdf4 	bl	8000548 <__aeabi_f2d>
 8002960:	e9c7 0100 	strd	r0, r1, [r7]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002b10 <main+0x278>
 8002972:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002976:	ee16 0a90 	vmov	r0, s13
 800297a:	f7fd fde5 	bl	8000548 <__aeabi_f2d>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	69f9      	ldr	r1, [r7, #28]
 8002984:	9106      	str	r1, [sp, #24]
 8002986:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800298a:	ed97 7b00 	vldr	d7, [r7]
 800298e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002992:	e9cd ab00 	strd	sl, fp, [sp]
 8002996:	4a60      	ldr	r2, [pc, #384]	; (8002b18 <main+0x280>)
 8002998:	2100      	movs	r1, #0
 800299a:	2000      	movs	r0, #0
 800299c:	f004 ffa6 	bl	80078ec <sniprintf>
 80029a0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

		      if (size != 0) {
 80029a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 809b 	beq.w	8002ae4 <main+0x24c>
 80029ae:	466b      	mov	r3, sp
 80029b0:	461e      	mov	r6, r3
		    	  char json_to_send[size];
 80029b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029b6:	3b01      	subs	r3, #1
 80029b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029be:	2200      	movs	r2, #0
 80029c0:	461c      	mov	r4, r3
 80029c2:	4615      	mov	r5, r2
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	00eb      	lsls	r3, r5, #3
 80029ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d2:	00e2      	lsls	r2, r4, #3
 80029d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029d8:	2200      	movs	r2, #0
 80029da:	4698      	mov	r8, r3
 80029dc:	4691      	mov	r9, r2
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029f6:	3307      	adds	r3, #7
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	ebad 0d03 	sub.w	sp, sp, r3
 8002a00:	ab08      	add	r3, sp, #32
 8002a02:	3300      	adds	r3, #0
 8002a04:	67bb      	str	r3, [r7, #120]	; 0x78
		    	  sprintf(json_to_send, "{\"temperature\":%f,\"humidity\":%f,\"pressure\":%f,\"voc\":%d}", data.temperature / 100.0f, data.humidity / 1000.0f, data.pressure / 100.0f, data.gas_resistance);
 8002a06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a12:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002b10 <main+0x278>
 8002a16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a1a:	ee16 0a90 	vmov	r0, s13
 8002a1e:	f7fd fd93 	bl	8000548 <__aeabi_f2d>
 8002a22:	e9c7 0100 	strd	r0, r1, [r7]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a30:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002b14 <main+0x27c>
 8002a34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a38:	ee16 0a90 	vmov	r0, s13
 8002a3c:	f7fd fd84 	bl	8000548 <__aeabi_f2d>
 8002a40:	4682      	mov	sl, r0
 8002a42:	468b      	mov	fp, r1
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002b10 <main+0x278>
 8002a52:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a56:	ee16 0a90 	vmov	r0, s13
 8002a5a:	f7fd fd75 	bl	8000548 <__aeabi_f2d>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	69f9      	ldr	r1, [r7, #28]
 8002a64:	9104      	str	r1, [sp, #16]
 8002a66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a6a:	e9cd ab00 	strd	sl, fp, [sp]
 8002a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a72:	4929      	ldr	r1, [pc, #164]	; (8002b18 <main+0x280>)
 8002a74:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002a76:	f004 ff6d 	bl	8007954 <siprintf>

		    	  power_on();
 8002a7a:	f000 f8a9 	bl	8002bd0 <power_on>

		    	  for (int i = 0; i < 20; i++) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a84:	e009      	b.n	8002a9a <main+0x202>
		    		  send_at();
 8002a86:	f000 f90d 	bl	8002ca4 <send_at>
		    		  HAL_Delay(100);
 8002a8a:	2064      	movs	r0, #100	; 0x64
 8002a8c:	f7ff fee4 	bl	8002858 <HAL_Delay>
		    	  for (int i = 0; i < 20; i++) {
 8002a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a94:	3301      	adds	r3, #1
 8002a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a9e:	2b13      	cmp	r3, #19
 8002aa0:	ddf1      	ble.n	8002a86 <main+0x1ee>
		    	  }

		    	  memset(RX, 0, strlen(RX));
 8002aa2:	4819      	ldr	r0, [pc, #100]	; (8002b08 <main+0x270>)
 8002aa4:	f7fd fb94 	bl	80001d0 <strlen>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2100      	movs	r1, #0
 8002aae:	4816      	ldr	r0, [pc, #88]	; (8002b08 <main+0x270>)
 8002ab0:	f004 faaa 	bl	8007008 <memset>
		    	  set_mqtt_config();
 8002ab4:	f000 f906 	bl	8002cc4 <set_mqtt_config>
		    	  HAL_Delay(1000);
 8002ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002abc:	f7ff fecc 	bl	8002858 <HAL_Delay>
		    	  start_gsm_connection();
 8002ac0:	f000 f8cc 	bl	8002c5c <start_gsm_connection>
		    	  HAL_Delay(5000);
 8002ac4:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ac8:	f7ff fec6 	bl	8002858 <HAL_Delay>
		    	  start_mqtt_connection();
 8002acc:	f000 f964 	bl	8002d98 <start_mqtt_connection>
			      mqtt_publish(json_to_send, size);
 8002ad0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002ad4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002ad6:	f000 f99f 	bl	8002e18 <mqtt_publish>
			      end_mqtt_connection();
 8002ada:	f000 f97d 	bl	8002dd8 <end_mqtt_connection>
			      power_off();
 8002ade:	f000 f891 	bl	8002c04 <power_off>
 8002ae2:	46b5      	mov	sp, r6
	  }
//	  else {
//		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  }

      if (bme680_sensor.power_mode == BME680_FORCED_MODE) {
 8002ae4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d104      	bne.n	8002af6 <main+0x25e>
    	  bme680_set_sensor_mode(&bme680_sensor);
 8002aec:	f107 0320 	add.w	r3, r7, #32
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fd30 	bl	8001556 <bme680_set_sensor_mode>
      }
	  HAL_Delay(3600000); // every one hour
 8002af6:	4809      	ldr	r0, [pc, #36]	; (8002b1c <main+0x284>)
 8002af8:	f7ff feae 	bl	8002858 <HAL_Delay>
	  HAL_Delay(meas_period); // Delay till the measurement is ready
 8002afc:	e6fd      	b.n	80028fa <main+0x62>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	378c      	adds	r7, #140	; 0x8c
 8002b02:	46bd      	mov	sp, r7
 8002b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b08:	20000250 	.word	0x20000250
 8002b0c:	20000274 	.word	0x20000274
 8002b10:	42c80000 	.word	0x42c80000
 8002b14:	447a0000 	.word	0x447a0000
 8002b18:	08009f10 	.word	0x08009f10
 8002b1c:	0036ee80 	.word	0x0036ee80

08002b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b096      	sub	sp, #88	; 0x58
 8002b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	2244      	movs	r2, #68	; 0x44
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 fa6a 	bl	8007008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b34:	463b      	mov	r3, r7
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b46:	f001 ff47 	bl	80049d8 <HAL_PWREx_ControlVoltageScaling>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002b50:	f000 f838 	bl	8002bc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002b54:	2310      	movs	r3, #16
 8002b56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002b60:	2360      	movs	r3, #96	; 0x60
 8002b62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b64:	2302      	movs	r3, #2
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002b70:	2328      	movs	r3, #40	; 0x28
 8002b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b74:	2307      	movs	r3, #7
 8002b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 ff7d 	bl	8004a84 <HAL_RCC_OscConfig>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002b90:	f000 f818 	bl	8002bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b94:	230f      	movs	r3, #15
 8002b96:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ba8:	463b      	mov	r3, r7
 8002baa:	2104      	movs	r1, #4
 8002bac:	4618      	mov	r0, r3
 8002bae:	f002 fb45 	bl	800523c <HAL_RCC_ClockConfig>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002bb8:	f000 f804 	bl	8002bc4 <Error_Handler>
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3758      	adds	r7, #88	; 0x58
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
}
 8002bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <Error_Handler+0x8>
	...

08002bd0 <power_on>:
const char START_MQTT_CONNECTION[] = "\rAT+SMCONN\r";
const char END_MQTT_CONNECTION[] = "\rAT+SMDISC\r";
const char MQTT_PUBLISH[] = "\rAT+SMPUB=\"demo/one\",%i,1,1\r";

void power_on(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <power_on+0x30>)
 8002bdc:	f001 f8da 	bl	8003d94 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8002be0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002be4:	f7ff fe38 	bl	8002858 <HAL_Delay>
    HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_SET);
 8002be8:	2201      	movs	r2, #1
 8002bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bee:	4804      	ldr	r0, [pc, #16]	; (8002c00 <power_on+0x30>)
 8002bf0:	f001 f8d0 	bl	8003d94 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8002bf4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bf8:	f7ff fe2e 	bl	8002858 <HAL_Delay>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	48000800 	.word	0x48000800

08002c04 <power_off>:

void power_off(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	power_on();
 8002c08:	f7ff ffe2 	bl	8002bd0 <power_on>
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <check_at_response>:

int check_at_response(const char* expected_response)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	if (strstr(RX, expected_response) == NULL) {
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	480f      	ldr	r0, [pc, #60]	; (8002c58 <check_at_response+0x48>)
 8002c1c:	f004 feba 	bl	8007994 <strstr>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <check_at_response+0x2c>
		memset(RX, 0, strlen(RX));
 8002c26:	480c      	ldr	r0, [pc, #48]	; (8002c58 <check_at_response+0x48>)
 8002c28:	f7fd fad2 	bl	80001d0 <strlen>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2100      	movs	r1, #0
 8002c32:	4809      	ldr	r0, [pc, #36]	; (8002c58 <check_at_response+0x48>)
 8002c34:	f004 f9e8 	bl	8007008 <memset>
		return 1;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e009      	b.n	8002c50 <check_at_response+0x40>
	}

	memset(RX, 0, strlen(RX));
 8002c3c:	4806      	ldr	r0, [pc, #24]	; (8002c58 <check_at_response+0x48>)
 8002c3e:	f7fd fac7 	bl	80001d0 <strlen>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	2100      	movs	r1, #0
 8002c48:	4803      	ldr	r0, [pc, #12]	; (8002c58 <check_at_response+0x48>)
 8002c4a:	f004 f9dd 	bl	8007008 <memset>

	return 0;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000250 	.word	0x20000250

08002c5c <start_gsm_connection>:


int start_gsm_connection(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(uart, (uint8_t*)CONFIGURE_GSM_CONNECTION, sizeof(CONFIGURE_GSM_CONNECTION), 2000);
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <start_gsm_connection+0x3c>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c68:	2224      	movs	r2, #36	; 0x24
 8002c6a:	490c      	ldr	r1, [pc, #48]	; (8002c9c <start_gsm_connection+0x40>)
 8002c6c:	f003 fa14 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(2000);
 8002c70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c74:	f7ff fdf0 	bl	8002858 <HAL_Delay>

	HAL_UART_Transmit(uart, (uint8_t *)START_GSM_CONNECTION, sizeof(START_GSM_CONNECTION), 2000);
 8002c78:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <start_gsm_connection+0x3c>)
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002c80:	220f      	movs	r2, #15
 8002c82:	4907      	ldr	r1, [pc, #28]	; (8002ca0 <start_gsm_connection+0x44>)
 8002c84:	f003 fa08 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(8000);
 8002c88:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002c8c:	f7ff fde4 	bl	8002858 <HAL_Delay>

	return 0;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	08009f54 	.word	0x08009f54
 8002ca0:	08009f78 	.word	0x08009f78

08002ca4 <send_at>:
	return 0;
}


void send_at(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(uart, (uint8_t*)AT, sizeof(AT), 2000);
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <send_at+0x18>)
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cb0:	2205      	movs	r2, #5
 8002cb2:	4903      	ldr	r1, [pc, #12]	; (8002cc0 <send_at+0x1c>)
 8002cb4:	f003 f9f0 	bl	8006098 <HAL_UART_Transmit>
}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	08009f4c 	.word	0x08009f4c

08002cc4 <set_mqtt_config>:

int set_mqtt_config(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(uart, (uint8_t*)MQTT_URL, sizeof(MQTT_URL), 500);
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <set_mqtt_config+0xb4>)
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cd0:	2226      	movs	r2, #38	; 0x26
 8002cd2:	492a      	ldr	r1, [pc, #168]	; (8002d7c <set_mqtt_config+0xb8>)
 8002cd4:	f003 f9e0 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cdc:	f7ff fdbc 	bl	8002858 <HAL_Delay>
//	if (check_at_response("OK") != 0) {
//		return 1;
//	}

	HAL_UART_Transmit(uart, (uint8_t*)MQTT_KEEPTIME, sizeof(MQTT_KEEPTIME), 500);
 8002ce0:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <set_mqtt_config+0xb4>)
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ce8:	221a      	movs	r2, #26
 8002cea:	4925      	ldr	r1, [pc, #148]	; (8002d80 <set_mqtt_config+0xbc>)
 8002cec:	f003 f9d4 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002cf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cf4:	f7ff fdb0 	bl	8002858 <HAL_Delay>
//	if (check_at_response("OK") != 0) {
//		return 1;
//	}

	HAL_UART_Transmit(uart, (uint8_t*)MQTT_USERNAME, sizeof(MQTT_USERNAME), 500);
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <set_mqtt_config+0xb4>)
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d00:	221e      	movs	r2, #30
 8002d02:	4920      	ldr	r1, [pc, #128]	; (8002d84 <set_mqtt_config+0xc0>)
 8002d04:	f003 f9c8 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d0c:	f7ff fda4 	bl	8002858 <HAL_Delay>
//	if (check_at_response("OK") != 0) {
//		return 1;
//	}

	HAL_UART_Transmit(uart, (uint8_t*)MQTT_PASSWORD, sizeof(MQTT_PASSWORD), 500);
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <set_mqtt_config+0xb4>)
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d18:	2222      	movs	r2, #34	; 0x22
 8002d1a:	491b      	ldr	r1, [pc, #108]	; (8002d88 <set_mqtt_config+0xc4>)
 8002d1c:	f003 f9bc 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002d20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d24:	f7ff fd98 	bl	8002858 <HAL_Delay>
//	if (check_at_response("OK") != 0) {
//		return 1;
//	}

	HAL_UART_Transmit(uart, (uint8_t*)MQTT_QOS, sizeof(MQTT_QOS), 500);
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <set_mqtt_config+0xb4>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d30:	2214      	movs	r2, #20
 8002d32:	4916      	ldr	r1, [pc, #88]	; (8002d8c <set_mqtt_config+0xc8>)
 8002d34:	f003 f9b0 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d3c:	f7ff fd8c 	bl	8002858 <HAL_Delay>
//	if (check_at_response("OK") != 0) {
//		return 1;
//	}

	HAL_UART_Transmit(uart, (uint8_t*)MQTT_CLEANSS, sizeof(MQTT_CLEANSS), 500);
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <set_mqtt_config+0xb4>)
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d48:	2218      	movs	r2, #24
 8002d4a:	4911      	ldr	r1, [pc, #68]	; (8002d90 <set_mqtt_config+0xcc>)
 8002d4c:	f003 f9a4 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002d50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d54:	f7ff fd80 	bl	8002858 <HAL_Delay>
//	if (check_at_response("OK") != 0) {
//		return 1;
//	}

	HAL_UART_Transmit(uart, (uint8_t*)MQTT_RETAIN, sizeof(MQTT_RETAIN), 500);
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <set_mqtt_config+0xb4>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d60:	2217      	movs	r2, #23
 8002d62:	490c      	ldr	r1, [pc, #48]	; (8002d94 <set_mqtt_config+0xd0>)
 8002d64:	f003 f998 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(500);
 8002d68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d6c:	f7ff fd74 	bl	8002858 <HAL_Delay>

	return 0;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	08009f88 	.word	0x08009f88
 8002d80:	08009fb0 	.word	0x08009fb0
 8002d84:	08009fcc 	.word	0x08009fcc
 8002d88:	08009fec 	.word	0x08009fec
 8002d8c:	0800a010 	.word	0x0800a010
 8002d90:	0800a024 	.word	0x0800a024
 8002d94:	0800a03c 	.word	0x0800a03c

08002d98 <start_mqtt_connection>:

int start_mqtt_connection(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(uart, (uint8_t *)START_MQTT_CONNECTION, sizeof(START_MQTT_CONNECTION), 2000);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <start_mqtt_connection+0x34>)
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002da4:	220c      	movs	r2, #12
 8002da6:	490a      	ldr	r1, [pc, #40]	; (8002dd0 <start_mqtt_connection+0x38>)
 8002da8:	f003 f976 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(3000);
 8002dac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002db0:	f7ff fd52 	bl	8002858 <HAL_Delay>

	if (check_at_response("OK") != 0) {
 8002db4:	4807      	ldr	r0, [pc, #28]	; (8002dd4 <start_mqtt_connection+0x3c>)
 8002db6:	f7ff ff2b 	bl	8002c10 <check_at_response>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <start_mqtt_connection+0x2c>
		return 1;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <start_mqtt_connection+0x2e>
	}

	return 0;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	0800a054 	.word	0x0800a054
 8002dd4:	08009f48 	.word	0x08009f48

08002dd8 <end_mqtt_connection>:

int end_mqtt_connection(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(uart, (uint8_t *)END_MQTT_CONNECTION, sizeof(END_MQTT_CONNECTION), 2000);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <end_mqtt_connection+0x34>)
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002de4:	220c      	movs	r2, #12
 8002de6:	490a      	ldr	r1, [pc, #40]	; (8002e10 <end_mqtt_connection+0x38>)
 8002de8:	f003 f956 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(5000);
 8002dec:	f241 3088 	movw	r0, #5000	; 0x1388
 8002df0:	f7ff fd32 	bl	8002858 <HAL_Delay>

	if (check_at_response("OK") != 0) {
 8002df4:	4807      	ldr	r0, [pc, #28]	; (8002e14 <end_mqtt_connection+0x3c>)
 8002df6:	f7ff ff0b 	bl	8002c10 <check_at_response>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <end_mqtt_connection+0x2c>
		return 1;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <end_mqtt_connection+0x2e>
	}

	return 0;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	0800a060 	.word	0x0800a060
 8002e14:	08009f48 	.word	0x08009f48

08002e18 <mqtt_publish>:

int mqtt_publish(const char *json, const int size)
{
 8002e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e1c:	b087      	sub	sp, #28
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	6039      	str	r1, [r7, #0]
 8002e24:	466b      	mov	r3, sp
 8002e26:	461e      	mov	r6, r3
	const int command_size = snprintf(NULL, 0, MQTT_PUBLISH, size);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4a2d      	ldr	r2, [pc, #180]	; (8002ee0 <mqtt_publish+0xc8>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f004 fd5c 	bl	80078ec <sniprintf>
 8002e34:	6178      	str	r0, [r7, #20]

	const char mqtt_publish_comm[command_size];
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	4698      	mov	r8, r3
 8002e42:	4691      	mov	r9, r2
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	461c      	mov	r4, r3
 8002e5e:	4615      	mov	r5, r2
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	00eb      	lsls	r3, r5, #3
 8002e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e6e:	00e2      	lsls	r2, r4, #3
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3307      	adds	r3, #7
 8002e74:	08db      	lsrs	r3, r3, #3
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	ebad 0d03 	sub.w	sp, sp, r3
 8002e7c:	466b      	mov	r3, sp
 8002e7e:	3300      	adds	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
	sprintf(mqtt_publish_comm, MQTT_PUBLISH, size);
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	4916      	ldr	r1, [pc, #88]	; (8002ee0 <mqtt_publish+0xc8>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f004 fd64 	bl	8007954 <siprintf>

	HAL_UART_Transmit(uart, (uint8_t *)mqtt_publish_comm, sizeof(mqtt_publish_comm), 2000);
 8002e8c:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <mqtt_publish+0xcc>)
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002e98:	68f9      	ldr	r1, [r7, #12]
 8002e9a:	f003 f8fd 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(5000);
 8002e9e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002ea2:	f7ff fcd9 	bl	8002858 <HAL_Delay>
	HAL_UART_Transmit(uart, (uint8_t *)json, size, 5000);
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <mqtt_publish+0xcc>)
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	f003 f8f0 	bl	8006098 <HAL_UART_Transmit>
	HAL_Delay(10000);
 8002eb8:	f242 7010 	movw	r0, #10000	; 0x2710
 8002ebc:	f7ff fccc 	bl	8002858 <HAL_Delay>
	if (check_at_response("OK") != 0) {
 8002ec0:	4809      	ldr	r0, [pc, #36]	; (8002ee8 <mqtt_publish+0xd0>)
 8002ec2:	f7ff fea5 	bl	8002c10 <check_at_response>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <mqtt_publish+0xb8>
		return 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <mqtt_publish+0xba>
	}

	return 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	46b5      	mov	sp, r6
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ede:	bf00      	nop
 8002ee0:	0800a06c 	.word	0x0800a06c
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	08009f48 	.word	0x08009f48

08002eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_MspInit+0x44>)
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <HAL_MspInit+0x44>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6613      	str	r3, [r2, #96]	; 0x60
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_MspInit+0x44>)
 8002f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_MspInit+0x44>)
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <HAL_MspInit+0x44>)
 8002f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f14:	6593      	str	r3, [r2, #88]	; 0x58
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_MspInit+0x44>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000

08002f34 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f38:	f3bf 8f4f 	dsb	sy
}
 8002f3c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <__NVIC_SystemReset+0x24>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002f46:	4904      	ldr	r1, [pc, #16]	; (8002f58 <__NVIC_SystemReset+0x24>)
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <__NVIC_SystemReset+0x28>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f4e:	f3bf 8f4f 	dsb	sy
}
 8002f52:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002f54:	bf00      	nop
 8002f56:	e7fd      	b.n	8002f54 <__NVIC_SystemReset+0x20>
 8002f58:	e000ed00 	.word	0xe000ed00
 8002f5c:	05fa0004 	.word	0x05fa0004

08002f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f64:	e7fe      	b.n	8002f64 <NMI_Handler+0x4>

08002f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8002f6a:	f7ff ffe3 	bl	8002f34 <__NVIC_SystemReset>

08002f6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f72:	e7fe      	b.n	8002f72 <MemManage_Handler+0x4>

08002f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <BusFault_Handler+0x4>

08002f7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f7e:	e7fe      	b.n	8002f7e <UsageFault_Handler+0x4>

08002f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fae:	f000 fa1d 	bl	80033ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <DMA1_Channel5_IRQHandler+0x10>)
 8002fbe:	f000 fc5f 	bl	8003880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200002f8 	.word	0x200002f8

08002fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
	return 1;
 8002fd0:	2301      	movs	r3, #1
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_kill>:

int _kill(int pid, int sig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fe6:	f003 ffe5 	bl	8006fb4 <__errno>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2216      	movs	r2, #22
 8002fee:	601a      	str	r2, [r3, #0]
	return -1;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_exit>:

void _exit (int status)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003004:	f04f 31ff 	mov.w	r1, #4294967295
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ffe7 	bl	8002fdc <_kill>
	while (1) {}		/* Make sure we hang here */
 800300e:	e7fe      	b.n	800300e <_exit+0x12>

08003010 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	e00a      	b.n	8003038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003022:	f3af 8000 	nop.w
 8003026:	4601      	mov	r1, r0
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	60ba      	str	r2, [r7, #8]
 800302e:	b2ca      	uxtb	r2, r1
 8003030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	dbf0      	blt.n	8003022 <_read+0x12>
	}

return len;
 8003040:	687b      	ldr	r3, [r7, #4]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e009      	b.n	8003070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	60ba      	str	r2, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3301      	adds	r3, #1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	dbf1      	blt.n	800305c <_write+0x12>
	}
	return len;
 8003078:	687b      	ldr	r3, [r7, #4]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <_close>:

int _close(int file)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
	return -1;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030aa:	605a      	str	r2, [r3, #4]
	return 0;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <_isatty>:

int _isatty(int file)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
	return 1;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f4:	4a14      	ldr	r2, [pc, #80]	; (8003148 <_sbrk+0x5c>)
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <_sbrk+0x60>)
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <_sbrk+0x64>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <_sbrk+0x64>)
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <_sbrk+0x68>)
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d207      	bcs.n	800312c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800311c:	f003 ff4a 	bl	8006fb4 <__errno>
 8003120:	4603      	mov	r3, r0
 8003122:	220c      	movs	r2, #12
 8003124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295
 800312a:	e009      	b.n	8003140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800312c:	4b08      	ldr	r3, [pc, #32]	; (8003150 <_sbrk+0x64>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <_sbrk+0x64>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <_sbrk+0x64>)
 800313c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20018000 	.word	0x20018000
 800314c:	00000400 	.word	0x00000400
 8003150:	20000270 	.word	0x20000270
 8003154:	20000358 	.word	0x20000358

08003158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <SystemInit+0x20>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <SystemInit+0x20>)
 8003164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 8003182:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <MX_USART1_UART_Init+0x5c>)
 8003184:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 8003188:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800318c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 8003196:	2200      	movs	r2, #0
 8003198:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 800319c:	2200      	movs	r2, #0
 800319e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 80031a2:	220c      	movs	r2, #12
 80031a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031be:	4805      	ldr	r0, [pc, #20]	; (80031d4 <MX_USART1_UART_Init+0x58>)
 80031c0:	f002 ff1c 	bl	8005ffc <HAL_UART_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80031ca:	f7ff fcfb 	bl	8002bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000274 	.word	0x20000274
 80031d8:	40013800 	.word	0x40013800

080031dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b0ac      	sub	sp, #176	; 0xb0
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	2288      	movs	r2, #136	; 0x88
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f003 ff03 	bl	8007008 <memset>
  if(uartHandle->Instance==USART1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a36      	ldr	r2, [pc, #216]	; (80032e0 <HAL_UART_MspInit+0x104>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d165      	bne.n	80032d8 <HAL_UART_MspInit+0xfc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003210:	2300      	movs	r3, #0
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fa33 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003224:	f7ff fcce 	bl	8002bc4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003228:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <HAL_UART_MspInit+0x108>)
 800322a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322c:	4a2d      	ldr	r2, [pc, #180]	; (80032e4 <HAL_UART_MspInit+0x108>)
 800322e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003232:	6613      	str	r3, [r2, #96]	; 0x60
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_UART_MspInit+0x108>)
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_UART_MspInit+0x108>)
 8003242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003244:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_UART_MspInit+0x108>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_UART_MspInit+0x108>)
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003258:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800325c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003260:	2302      	movs	r3, #2
 8003262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326c:	2303      	movs	r3, #3
 800326e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003272:	2307      	movs	r3, #7
 8003274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003278:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800327c:	4619      	mov	r1, r3
 800327e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003282:	f000 fbdd 	bl	8003a40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 8003288:	4a18      	ldr	r2, [pc, #96]	; (80032ec <HAL_UART_MspInit+0x110>)
 800328a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800328c:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 800328e:	2202      	movs	r2, #2
 8003290:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 80032a0:	2280      	movs	r2, #128	; 0x80
 80032a2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 80032b2:	2220      	movs	r2, #32
 80032b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80032bc:	480a      	ldr	r0, [pc, #40]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 80032be:	f000 f9c7 	bl	8003650 <HAL_DMA_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80032c8:	f7ff fc7c 	bl	8002bc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a06      	ldr	r2, [pc, #24]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 80032d0:	671a      	str	r2, [r3, #112]	; 0x70
 80032d2:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <HAL_UART_MspInit+0x10c>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80032d8:	bf00      	nop
 80032da:	37b0      	adds	r7, #176	; 0xb0
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40021000 	.word	0x40021000
 80032e8:	200002f8 	.word	0x200002f8
 80032ec:	40020058 	.word	0x40020058

080032f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   sp, =_estack    /* Set stack pointer */
 80032f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003328 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032f4:	f7ff ff30 	bl	8003158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <LoopForever+0x6>)
  ldr r1, =_edata
 80032fa:	490d      	ldr	r1, [pc, #52]	; (8003330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <LoopForever+0xe>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003310:	4c0a      	ldr	r4, [pc, #40]	; (800333c <LoopForever+0x16>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800331e:	f003 fe4f 	bl	8006fc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003322:	f7ff fab9 	bl	8002898 <main>

08003326 <LoopForever>:

LoopForever:
    b LoopForever
 8003326:	e7fe      	b.n	8003326 <LoopForever>
	  ldr   sp, =_estack    /* Set stack pointer */
 8003328:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800332c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003330:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003334:	0800a4bc 	.word	0x0800a4bc
  ldr r2, =_sbss
 8003338:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800333c:	20000354 	.word	0x20000354

08003340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003340:	e7fe      	b.n	8003340 <ADC1_2_IRQHandler>

08003342 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334c:	2003      	movs	r0, #3
 800334e:	f000 f93d 	bl	80035cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003352:	2000      	movs	r0, #0
 8003354:	f000 f80e 	bl	8003374 <HAL_InitTick>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	71fb      	strb	r3, [r7, #7]
 8003362:	e001      	b.n	8003368 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003364:	f7ff fdc2 	bl	8002eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003368:	79fb      	ldrb	r3, [r7, #7]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_InitTick+0x6c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d023      	beq.n	80033d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003388:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_InitTick+0x70>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_InitTick+0x6c>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003396:	fbb3 f3f1 	udiv	r3, r3, r1
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f949 	bl	8003636 <HAL_SYSTICK_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b0f      	cmp	r3, #15
 80033ae:	d809      	bhi.n	80033c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b0:	2200      	movs	r2, #0
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	f000 f913 	bl	80035e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_InitTick+0x74>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e007      	b.n	80033d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e004      	b.n	80033d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
 80033ce:	e001      	b.n	80033d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2000000c 	.word	0x2000000c
 80033e4:	20000004 	.word	0x20000004
 80033e8:	20000008 	.word	0x20000008

080033ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x20>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_IncTick+0x24>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_IncTick+0x24>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	2000000c 	.word	0x2000000c
 8003410:	20000340 	.word	0x20000340

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000340 	.word	0x20000340

0800342c <__NVIC_SetPriorityGrouping>:
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003448:	4013      	ands	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	60d3      	str	r3, [r2, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_GetPriorityGrouping>:
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <__NVIC_GetPriorityGrouping+0x18>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	f003 0307 	and.w	r3, r3, #7
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_EnableIRQ>:
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	db0b      	blt.n	80034ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	f003 021f 	and.w	r2, r3, #31
 80034a8:	4907      	ldr	r1, [pc, #28]	; (80034c8 <__NVIC_EnableIRQ+0x38>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2001      	movs	r0, #1
 80034b2:	fa00 f202 	lsl.w	r2, r0, r2
 80034b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000e100 	.word	0xe000e100

080034cc <__NVIC_SetPriority>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	6039      	str	r1, [r7, #0]
 80034d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	db0a      	blt.n	80034f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	490c      	ldr	r1, [pc, #48]	; (8003518 <__NVIC_SetPriority+0x4c>)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	0112      	lsls	r2, r2, #4
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	440b      	add	r3, r1
 80034f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034f4:	e00a      	b.n	800350c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4908      	ldr	r1, [pc, #32]	; (800351c <__NVIC_SetPriority+0x50>)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	3b04      	subs	r3, #4
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	440b      	add	r3, r1
 800350a:	761a      	strb	r2, [r3, #24]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000e100 	.word	0xe000e100
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <NVIC_EncodePriority>:
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f1c3 0307 	rsb	r3, r3, #7
 800353a:	2b04      	cmp	r3, #4
 800353c:	bf28      	it	cs
 800353e:	2304      	movcs	r3, #4
 8003540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3304      	adds	r3, #4
 8003546:	2b06      	cmp	r3, #6
 8003548:	d902      	bls.n	8003550 <NVIC_EncodePriority+0x30>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3b03      	subs	r3, #3
 800354e:	e000      	b.n	8003552 <NVIC_EncodePriority+0x32>
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003554:	f04f 32ff 	mov.w	r2, #4294967295
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	401a      	ands	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003568:	f04f 31ff 	mov.w	r1, #4294967295
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43d9      	mvns	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	4313      	orrs	r3, r2
}
 800357a:	4618      	mov	r0, r3
 800357c:	3724      	adds	r7, #36	; 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003598:	d301      	bcc.n	800359e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800359a:	2301      	movs	r3, #1
 800359c:	e00f      	b.n	80035be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <SysTick_Config+0x40>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a6:	210f      	movs	r1, #15
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f7ff ff8e 	bl	80034cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <SysTick_Config+0x40>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <SysTick_Config+0x40>)
 80035b8:	2207      	movs	r2, #7
 80035ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	e000e010 	.word	0xe000e010

080035cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff29 	bl	800342c <__NVIC_SetPriorityGrouping>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035f4:	f7ff ff3e 	bl	8003474 <__NVIC_GetPriorityGrouping>
 80035f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	6978      	ldr	r0, [r7, #20]
 8003600:	f7ff ff8e 	bl	8003520 <NVIC_EncodePriority>
 8003604:	4602      	mov	r2, r0
 8003606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff5d 	bl	80034cc <__NVIC_SetPriority>
}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff31 	bl	8003490 <__NVIC_EnableIRQ>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ffa2 	bl	8003588 <SysTick_Config>
 8003644:	4603      	mov	r3, r0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e098      	b.n	8003794 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b4d      	ldr	r3, [pc, #308]	; (80037a0 <HAL_DMA_Init+0x150>)
 800366a:	429a      	cmp	r2, r3
 800366c:	d80f      	bhi.n	800368e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_DMA_Init+0x154>)
 8003676:	4413      	add	r3, r2
 8003678:	4a4b      	ldr	r2, [pc, #300]	; (80037a8 <HAL_DMA_Init+0x158>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	009a      	lsls	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a48      	ldr	r2, [pc, #288]	; (80037ac <HAL_DMA_Init+0x15c>)
 800368a:	641a      	str	r2, [r3, #64]	; 0x40
 800368c:	e00e      	b.n	80036ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <HAL_DMA_Init+0x160>)
 8003696:	4413      	add	r3, r2
 8003698:	4a43      	ldr	r2, [pc, #268]	; (80037a8 <HAL_DMA_Init+0x158>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	009a      	lsls	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a42      	ldr	r2, [pc, #264]	; (80037b4 <HAL_DMA_Init+0x164>)
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003706:	d039      	beq.n	800377c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	4a27      	ldr	r2, [pc, #156]	; (80037ac <HAL_DMA_Init+0x15c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d11a      	bne.n	8003748 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <HAL_DMA_Init+0x168>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f003 031c 	and.w	r3, r3, #28
 800371e:	210f      	movs	r1, #15
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	4924      	ldr	r1, [pc, #144]	; (80037b8 <HAL_DMA_Init+0x168>)
 8003728:	4013      	ands	r3, r2
 800372a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_DMA_Init+0x168>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003738:	f003 031c 	and.w	r3, r3, #28
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	491d      	ldr	r1, [pc, #116]	; (80037b8 <HAL_DMA_Init+0x168>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
 8003746:	e019      	b.n	800377c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003748:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <HAL_DMA_Init+0x16c>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f003 031c 	and.w	r3, r3, #28
 8003754:	210f      	movs	r1, #15
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	4917      	ldr	r1, [pc, #92]	; (80037bc <HAL_DMA_Init+0x16c>)
 800375e:	4013      	ands	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_DMA_Init+0x16c>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f003 031c 	and.w	r3, r3, #28
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	4911      	ldr	r1, [pc, #68]	; (80037bc <HAL_DMA_Init+0x16c>)
 8003778:	4313      	orrs	r3, r2
 800377a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40020407 	.word	0x40020407
 80037a4:	bffdfff8 	.word	0xbffdfff8
 80037a8:	cccccccd 	.word	0xcccccccd
 80037ac:	40020000 	.word	0x40020000
 80037b0:	bffdfbf8 	.word	0xbffdfbf8
 80037b4:	40020400 	.word	0x40020400
 80037b8:	400200a8 	.word	0x400200a8
 80037bc:	400204a8 	.word	0x400204a8

080037c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_DMA_Start_IT+0x20>
 80037dc:	2302      	movs	r3, #2
 80037de:	e04b      	b.n	8003878 <HAL_DMA_Start_IT+0xb8>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d13a      	bne.n	800386a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f8e0 	bl	80039de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 020e 	orr.w	r2, r2, #14
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e00f      	b.n	8003858 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 020a 	orr.w	r2, r2, #10
 8003856:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e005      	b.n	8003876 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003872:	2302      	movs	r3, #2
 8003874:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003876:	7dfb      	ldrb	r3, [r7, #23]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	f003 031c 	and.w	r3, r3, #28
 80038a0:	2204      	movs	r2, #4
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d026      	beq.n	80038fa <HAL_DMA_IRQHandler+0x7a>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d021      	beq.n	80038fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d107      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	f003 021c 	and.w	r2, r3, #28
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2104      	movs	r1, #4
 80038e2:	fa01 f202 	lsl.w	r2, r1, r2
 80038e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d071      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038f8:	e06c      	b.n	80039d4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f003 031c 	and.w	r3, r3, #28
 8003902:	2202      	movs	r2, #2
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02e      	beq.n	800396c <HAL_DMA_IRQHandler+0xec>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d029      	beq.n	800396c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 020a 	bic.w	r2, r2, #10
 8003934:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f003 021c 	and.w	r2, r3, #28
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2102      	movs	r1, #2
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d038      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800396a:	e033      	b.n	80039d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f003 031c 	and.w	r3, r3, #28
 8003974:	2208      	movs	r2, #8
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02a      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x156>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d025      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 020e 	bic.w	r2, r2, #14
 8003998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f003 021c 	and.w	r2, r3, #28
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2101      	movs	r1, #1
 80039a8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
}
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	f003 021c 	and.w	r2, r3, #28
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f202 	lsl.w	r2, r1, r2
 80039fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b10      	cmp	r3, #16
 8003a0e:	d108      	bne.n	8003a22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a20:	e007      	b.n	8003a32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	60da      	str	r2, [r3, #12]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4e:	e17f      	b.n	8003d50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	2101      	movs	r1, #1
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8171 	beq.w	8003d4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d005      	beq.n	8003a80 <HAL_GPIO_Init+0x40>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d130      	bne.n	8003ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 0201 	and.w	r2, r3, #1
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d118      	bne.n	8003b20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003af4:	2201      	movs	r2, #1
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	08db      	lsrs	r3, r3, #3
 8003b0a:	f003 0201 	and.w	r2, r3, #1
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d017      	beq.n	8003b5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2203      	movs	r2, #3
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d123      	bne.n	8003bb0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	08da      	lsrs	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3208      	adds	r2, #8
 8003b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	220f      	movs	r2, #15
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	08da      	lsrs	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3208      	adds	r2, #8
 8003baa:	6939      	ldr	r1, [r7, #16]
 8003bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 0203 	and.w	r2, r3, #3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 80ac 	beq.w	8003d4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	; (8003d70 <HAL_GPIO_Init+0x330>)
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf6:	4a5e      	ldr	r2, [pc, #376]	; (8003d70 <HAL_GPIO_Init+0x330>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6613      	str	r3, [r2, #96]	; 0x60
 8003bfe:	4b5c      	ldr	r3, [pc, #368]	; (8003d70 <HAL_GPIO_Init+0x330>)
 8003c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c0a:	4a5a      	ldr	r2, [pc, #360]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3302      	adds	r3, #2
 8003c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	220f      	movs	r2, #15
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c34:	d025      	beq.n	8003c82 <HAL_GPIO_Init+0x242>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4f      	ldr	r2, [pc, #316]	; (8003d78 <HAL_GPIO_Init+0x338>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01f      	beq.n	8003c7e <HAL_GPIO_Init+0x23e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a4e      	ldr	r2, [pc, #312]	; (8003d7c <HAL_GPIO_Init+0x33c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d019      	beq.n	8003c7a <HAL_GPIO_Init+0x23a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a4d      	ldr	r2, [pc, #308]	; (8003d80 <HAL_GPIO_Init+0x340>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_GPIO_Init+0x236>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a4c      	ldr	r2, [pc, #304]	; (8003d84 <HAL_GPIO_Init+0x344>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00d      	beq.n	8003c72 <HAL_GPIO_Init+0x232>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4b      	ldr	r2, [pc, #300]	; (8003d88 <HAL_GPIO_Init+0x348>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <HAL_GPIO_Init+0x22e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4a      	ldr	r2, [pc, #296]	; (8003d8c <HAL_GPIO_Init+0x34c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <HAL_GPIO_Init+0x22a>
 8003c66:	2306      	movs	r3, #6
 8003c68:	e00c      	b.n	8003c84 <HAL_GPIO_Init+0x244>
 8003c6a:	2307      	movs	r3, #7
 8003c6c:	e00a      	b.n	8003c84 <HAL_GPIO_Init+0x244>
 8003c6e:	2305      	movs	r3, #5
 8003c70:	e008      	b.n	8003c84 <HAL_GPIO_Init+0x244>
 8003c72:	2304      	movs	r3, #4
 8003c74:	e006      	b.n	8003c84 <HAL_GPIO_Init+0x244>
 8003c76:	2303      	movs	r3, #3
 8003c78:	e004      	b.n	8003c84 <HAL_GPIO_Init+0x244>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e002      	b.n	8003c84 <HAL_GPIO_Init+0x244>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_GPIO_Init+0x244>
 8003c82:	2300      	movs	r3, #0
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	f002 0203 	and.w	r2, r2, #3
 8003c8a:	0092      	lsls	r2, r2, #2
 8003c8c:	4093      	lsls	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c94:	4937      	ldr	r1, [pc, #220]	; (8003d74 <HAL_GPIO_Init+0x334>)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_GPIO_Init+0x350>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cc6:	4a32      	ldr	r2, [pc, #200]	; (8003d90 <HAL_GPIO_Init+0x350>)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ccc:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <HAL_GPIO_Init+0x350>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cf0:	4a27      	ldr	r2, [pc, #156]	; (8003d90 <HAL_GPIO_Init+0x350>)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cf6:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <HAL_GPIO_Init+0x350>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d1a:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <HAL_GPIO_Init+0x350>)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_GPIO_Init+0x350>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d44:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <HAL_GPIO_Init+0x350>)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f47f ae78 	bne.w	8003a50 <HAL_GPIO_Init+0x10>
  }
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40010000 	.word	0x40010000
 8003d78:	48000400 	.word	0x48000400
 8003d7c:	48000800 	.word	0x48000800
 8003d80:	48000c00 	.word	0x48000c00
 8003d84:	48001000 	.word	0x48001000
 8003d88:	48001400 	.word	0x48001400
 8003d8c:	48001800 	.word	0x48001800
 8003d90:	40010400 	.word	0x40010400

08003d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]
 8003da0:	4613      	mov	r3, r2
 8003da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da4:	787b      	ldrb	r3, [r7, #1]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003db0:	e002      	b.n	8003db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e081      	b.n	8003eda <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe fcc4 	bl	8002778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	; 0x24
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d107      	bne.n	8003e3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	e006      	b.n	8003e4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d104      	bne.n	8003e5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69d9      	ldr	r1, [r3, #28]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	f040 80f9 	bne.w	80040fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_I2C_Mem_Write+0x34>
 8003f12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0ed      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2C_Mem_Write+0x4e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e0e6      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f3a:	f7ff fa6b 	bl	8003414 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2319      	movs	r3, #25
 8003f46:	2201      	movs	r2, #1
 8003f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fac3 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d1      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2221      	movs	r2, #33	; 0x21
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2240      	movs	r2, #64	; 0x40
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f84:	88f8      	ldrh	r0, [r7, #6]
 8003f86:	893a      	ldrh	r2, [r7, #8]
 8003f88:	8979      	ldrh	r1, [r7, #10]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4603      	mov	r3, r0
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f9d3 	bl	8004340 <I2C_RequestMemoryWrite>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0a9      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2bff      	cmp	r3, #255	; 0xff
 8003fb4:	d90e      	bls.n	8003fd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	8979      	ldrh	r1, [r7, #10]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fc2b 	bl	8004828 <I2C_TransferConfig>
 8003fd2:	e00f      	b.n	8003ff4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	8979      	ldrh	r1, [r7, #10]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fc1a 	bl	8004828 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 faad 	bl	8004558 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e07b      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d034      	beq.n	80040ac <HAL_I2C_Mem_Write+0x1c8>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004046:	2b00      	cmp	r3, #0
 8004048:	d130      	bne.n	80040ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	2200      	movs	r2, #0
 8004052:	2180      	movs	r1, #128	; 0x80
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 fa3f 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e04d      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	2bff      	cmp	r3, #255	; 0xff
 800406c:	d90e      	bls.n	800408c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	22ff      	movs	r2, #255	; 0xff
 8004072:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	b2da      	uxtb	r2, r3
 800407a:	8979      	ldrh	r1, [r7, #10]
 800407c:	2300      	movs	r3, #0
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fbcf 	bl	8004828 <I2C_TransferConfig>
 800408a:	e00f      	b.n	80040ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	b2da      	uxtb	r2, r3
 800409c:	8979      	ldrh	r1, [r7, #10]
 800409e:	2300      	movs	r3, #0
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fbbe 	bl	8004828 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d19e      	bne.n	8003ff4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fa8c 	bl	80045d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e01a      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2220      	movs	r2, #32
 80040d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_I2C_Mem_Write+0x224>)
 80040de:	400b      	ands	r3, r1
 80040e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e000      	b.n	8004100 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	fe00e800 	.word	0xfe00e800

0800410c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	461a      	mov	r2, r3
 800411a:	4603      	mov	r3, r0
 800411c:	817b      	strh	r3, [r7, #10]
 800411e:	460b      	mov	r3, r1
 8004120:	813b      	strh	r3, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b20      	cmp	r3, #32
 8004130:	f040 80fd 	bne.w	800432e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_I2C_Mem_Read+0x34>
 800413a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0f1      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_I2C_Mem_Read+0x4e>
 8004156:	2302      	movs	r3, #2
 8004158:	e0ea      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004162:	f7ff f957 	bl	8003414 <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2319      	movs	r3, #25
 800416e:	2201      	movs	r2, #1
 8004170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f9af 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0d5      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2222      	movs	r2, #34	; 0x22
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a3a      	ldr	r2, [r7, #32]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ac:	88f8      	ldrh	r0, [r7, #6]
 80041ae:	893a      	ldrh	r2, [r7, #8]
 80041b0:	8979      	ldrh	r1, [r7, #10]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4603      	mov	r3, r0
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f913 	bl	80043e8 <I2C_RequestMemoryRead>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0ad      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2bff      	cmp	r3, #255	; 0xff
 80041dc:	d90e      	bls.n	80041fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	22ff      	movs	r2, #255	; 0xff
 80041e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	8979      	ldrh	r1, [r7, #10]
 80041ec:	4b52      	ldr	r3, [pc, #328]	; (8004338 <HAL_I2C_Mem_Read+0x22c>)
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fb17 	bl	8004828 <I2C_TransferConfig>
 80041fa:	e00f      	b.n	800421c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	b2da      	uxtb	r2, r3
 800420c:	8979      	ldrh	r1, [r7, #10]
 800420e:	4b4a      	ldr	r3, [pc, #296]	; (8004338 <HAL_I2C_Mem_Read+0x22c>)
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fb06 	bl	8004828 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	2200      	movs	r2, #0
 8004224:	2104      	movs	r1, #4
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f956 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e07c      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d034      	beq.n	80042dc <HAL_I2C_Mem_Read+0x1d0>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	2b00      	cmp	r3, #0
 8004278:	d130      	bne.n	80042dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	2200      	movs	r2, #0
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f927 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e04d      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004298:	b29b      	uxth	r3, r3
 800429a:	2bff      	cmp	r3, #255	; 0xff
 800429c:	d90e      	bls.n	80042bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	22ff      	movs	r2, #255	; 0xff
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	8979      	ldrh	r1, [r7, #10]
 80042ac:	2300      	movs	r3, #0
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fab7 	bl	8004828 <I2C_TransferConfig>
 80042ba:	e00f      	b.n	80042dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	8979      	ldrh	r1, [r7, #10]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 faa6 	bl	8004828 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d19a      	bne.n	800421c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f974 	bl	80045d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e01a      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2220      	movs	r2, #32
 8004300:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_I2C_Mem_Read+0x230>)
 800430e:	400b      	ands	r3, r1
 8004310:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	80002400 	.word	0x80002400
 800433c:	fe00e800 	.word	0xfe00e800

08004340 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	4608      	mov	r0, r1
 800434a:	4611      	mov	r1, r2
 800434c:	461a      	mov	r2, r3
 800434e:	4603      	mov	r3, r0
 8004350:	817b      	strh	r3, [r7, #10]
 8004352:	460b      	mov	r3, r1
 8004354:	813b      	strh	r3, [r7, #8]
 8004356:	4613      	mov	r3, r2
 8004358:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	8979      	ldrh	r1, [r7, #10]
 8004360:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <I2C_RequestMemoryWrite+0xa4>)
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fa5d 	bl	8004828 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	69b9      	ldr	r1, [r7, #24]
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f8f0 	bl	8004558 <I2C_WaitOnTXISFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e02c      	b.n	80043dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d105      	bne.n	8004394 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004388:	893b      	ldrh	r3, [r7, #8]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	629a      	str	r2, [r3, #40]	; 0x28
 8004392:	e015      	b.n	80043c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004394:	893b      	ldrh	r3, [r7, #8]
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	b29b      	uxth	r3, r3
 800439a:	b2da      	uxtb	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	69b9      	ldr	r1, [r7, #24]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f8d6 	bl	8004558 <I2C_WaitOnTXISFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e012      	b.n	80043dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043b6:	893b      	ldrh	r3, [r7, #8]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2200      	movs	r2, #0
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f884 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	80002000 	.word	0x80002000

080043e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	817b      	strh	r3, [r7, #10]
 80043fa:	460b      	mov	r3, r1
 80043fc:	813b      	strh	r3, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	8979      	ldrh	r1, [r7, #10]
 8004408:	4b20      	ldr	r3, [pc, #128]	; (800448c <I2C_RequestMemoryRead+0xa4>)
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2300      	movs	r3, #0
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fa0a 	bl	8004828 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	69b9      	ldr	r1, [r7, #24]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f89d 	bl	8004558 <I2C_WaitOnTXISFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e02c      	b.n	8004482 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800442e:	893b      	ldrh	r3, [r7, #8]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
 8004438:	e015      	b.n	8004466 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800443a:	893b      	ldrh	r3, [r7, #8]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	b29b      	uxth	r3, r3
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	69b9      	ldr	r1, [r7, #24]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f883 	bl	8004558 <I2C_WaitOnTXISFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e012      	b.n	8004482 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800445c:	893b      	ldrh	r3, [r7, #8]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2200      	movs	r2, #0
 800446e:	2140      	movs	r1, #64	; 0x40
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f831 	bl	80044d8 <I2C_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	80002000 	.word	0x80002000

08004490 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d103      	bne.n	80044ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d007      	beq.n	80044cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	619a      	str	r2, [r3, #24]
  }
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e8:	e022      	b.n	8004530 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d01e      	beq.n	8004530 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fe ff8f 	bl	8003414 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d113      	bne.n	8004530 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	f043 0220 	orr.w	r2, r3, #32
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e00f      	b.n	8004550 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	d0cd      	beq.n	80044ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004564:	e02c      	b.n	80045c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f870 	bl	8004650 <I2C_IsErrorOccurred>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e02a      	b.n	80045d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d01e      	beq.n	80045c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004582:	f7fe ff47 	bl	8003414 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	d302      	bcc.n	8004598 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d113      	bne.n	80045c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e007      	b.n	80045d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d1cb      	bne.n	8004566 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e4:	e028      	b.n	8004638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f830 	bl	8004650 <I2C_IsErrorOccurred>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e026      	b.n	8004648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe ff0b 	bl	8003414 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d113      	bne.n	8004638 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004614:	f043 0220 	orr.w	r2, r3, #32
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b20      	cmp	r3, #32
 8004644:	d1cf      	bne.n	80045e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08a      	sub	sp, #40	; 0x28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d075      	beq.n	8004768 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2210      	movs	r2, #16
 8004682:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004684:	e056      	b.n	8004734 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d052      	beq.n	8004734 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800468e:	f7fe fec1 	bl	8003414 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	429a      	cmp	r2, r3
 800469c:	d302      	bcc.n	80046a4 <I2C_IsErrorOccurred+0x54>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d147      	bne.n	8004734 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c6:	d12e      	bne.n	8004726 <I2C_IsErrorOccurred+0xd6>
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ce:	d02a      	beq.n	8004726 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d027      	beq.n	8004726 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046e6:	f7fe fe95 	bl	8003414 <HAL_GetTick>
 80046ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ec:	e01b      	b.n	8004726 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046ee:	f7fe fe91 	bl	8003414 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b19      	cmp	r3, #25
 80046fa:	d914      	bls.n	8004726 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004700:	f043 0220 	orr.w	r2, r3, #32
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b20      	cmp	r3, #32
 8004732:	d1dc      	bne.n	80046ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b20      	cmp	r3, #32
 8004740:	d003      	beq.n	800474a <I2C_IsErrorOccurred+0xfa>
 8004742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004746:	2b00      	cmp	r3, #0
 8004748:	d09d      	beq.n	8004686 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800474a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800474e:	2b00      	cmp	r3, #0
 8004750:	d103      	bne.n	800475a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2220      	movs	r2, #32
 8004758:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	f043 0304 	orr.w	r3, r3, #4
 8004760:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800478a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00b      	beq.n	80047b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	f043 0308 	orr.w	r3, r3, #8
 80047a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01c      	beq.n	8004818 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff fe56 	bl	8004490 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6859      	ldr	r1, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b0d      	ldr	r3, [pc, #52]	; (8004824 <I2C_IsErrorOccurred+0x1d4>)
 80047f0:	400b      	ands	r3, r1
 80047f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800481c:	4618      	mov	r0, r3
 800481e:	3728      	adds	r7, #40	; 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	fe00e800 	.word	0xfe00e800

08004828 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	817b      	strh	r3, [r7, #10]
 8004836:	4613      	mov	r3, r2
 8004838:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800483a:	897b      	ldrh	r3, [r7, #10]
 800483c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004840:	7a7b      	ldrb	r3, [r7, #9]
 8004842:	041b      	lsls	r3, r3, #16
 8004844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004848:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	4313      	orrs	r3, r2
 8004852:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004856:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	0d5b      	lsrs	r3, r3, #21
 8004862:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <I2C_TransferConfig+0x60>)
 8004868:	430b      	orrs	r3, r1
 800486a:	43db      	mvns	r3, r3
 800486c:	ea02 0103 	and.w	r1, r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	03ff63ff 	.word	0x03ff63ff

0800488c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d138      	bne.n	8004914 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e032      	b.n	8004916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2224      	movs	r2, #36	; 0x24
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0201 	bic.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6819      	ldr	r1, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	e000      	b.n	8004916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
  }
}
 8004916:	4618      	mov	r0, r3
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b20      	cmp	r3, #32
 8004936:	d139      	bne.n	80049ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004942:	2302      	movs	r3, #2
 8004944:	e033      	b.n	80049ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2224      	movs	r2, #36	; 0x24
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004974:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40007000 	.word	0x40007000

080049d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e6:	d130      	bne.n	8004a4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e8:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f4:	d038      	beq.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f6:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2232      	movs	r2, #50	; 0x32
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0c9b      	lsrs	r3, r3, #18
 8004a18:	3301      	adds	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1c:	e002      	b.n	8004a24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a24:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a30:	d102      	bne.n	8004a38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f2      	bne.n	8004a1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a44:	d110      	bne.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e00f      	b.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a56:	d007      	beq.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a60:	4a05      	ldr	r2, [pc, #20]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40007000 	.word	0x40007000
 8004a7c:	20000004 	.word	0x20000004
 8004a80:	431bde83 	.word	0x431bde83

08004a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e3ca      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a96:	4b97      	ldr	r3, [pc, #604]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa0:	4b94      	ldr	r3, [pc, #592]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0310 	and.w	r3, r3, #16
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80e4 	beq.w	8004c80 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <HAL_RCC_OscConfig+0x4a>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b0c      	cmp	r3, #12
 8004ac2:	f040 808b 	bne.w	8004bdc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	f040 8087 	bne.w	8004bdc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ace:	4b89      	ldr	r3, [pc, #548]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x62>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e3a2      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <HAL_RCC_OscConfig+0x7c>
 8004af6:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004afe:	e005      	b.n	8004b0c <HAL_RCC_OscConfig+0x88>
 8004b00:	4b7c      	ldr	r3, [pc, #496]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d223      	bcs.n	8004b58 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fd55 	bl	80055c4 <RCC_SetFlashLatencyFromMSIRange>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e383      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b24:	4b73      	ldr	r3, [pc, #460]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a72      	ldr	r2, [pc, #456]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b2a:	f043 0308 	orr.w	r3, r3, #8
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	4b70      	ldr	r3, [pc, #448]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	496d      	ldr	r1, [pc, #436]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b42:	4b6c      	ldr	r3, [pc, #432]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	4968      	ldr	r1, [pc, #416]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
 8004b56:	e025      	b.n	8004ba4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b58:	4b66      	ldr	r3, [pc, #408]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a65      	ldr	r2, [pc, #404]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	f043 0308 	orr.w	r3, r3, #8
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	4b63      	ldr	r3, [pc, #396]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	4960      	ldr	r1, [pc, #384]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b76:	4b5f      	ldr	r3, [pc, #380]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	495b      	ldr	r1, [pc, #364]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fd15 	bl	80055c4 <RCC_SetFlashLatencyFromMSIRange>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e343      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ba4:	f000 fc4a 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b52      	ldr	r3, [pc, #328]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	091b      	lsrs	r3, r3, #4
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	4950      	ldr	r1, [pc, #320]	; (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc0:	4a4e      	ldr	r2, [pc, #312]	; (8004cfc <HAL_RCC_OscConfig+0x278>)
 8004bc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bc4:	4b4e      	ldr	r3, [pc, #312]	; (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fe fbd3 	bl	8003374 <HAL_InitTick>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d052      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	e327      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d032      	beq.n	8004c4a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a42      	ldr	r2, [pc, #264]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fc10 	bl	8003414 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bf8:	f7fe fc0c 	bl	8003414 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e310      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c0a:	4b3a      	ldr	r3, [pc, #232]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c16:	4b37      	ldr	r3, [pc, #220]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a36      	ldr	r2, [pc, #216]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c1c:	f043 0308 	orr.w	r3, r3, #8
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b34      	ldr	r3, [pc, #208]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4931      	ldr	r1, [pc, #196]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c34:	4b2f      	ldr	r3, [pc, #188]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	492c      	ldr	r1, [pc, #176]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]
 8004c48:	e01a      	b.n	8004c80 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a29      	ldr	r2, [pc, #164]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c56:	f7fe fbdd 	bl	8003414 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c5e:	f7fe fbd9 	bl	8003414 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e2dd      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c70:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x1da>
 8004c7c:	e000      	b.n	8004c80 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d074      	beq.n	8004d76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d005      	beq.n	8004c9e <HAL_RCC_OscConfig+0x21a>
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d10e      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d10b      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d064      	beq.n	8004d74 <HAL_RCC_OscConfig+0x2f0>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d160      	bne.n	8004d74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e2ba      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x24a>
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0b      	ldr	r2, [pc, #44]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e026      	b.n	8004d1c <HAL_RCC_OscConfig+0x298>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd6:	d115      	bne.n	8004d04 <HAL_RCC_OscConfig+0x280>
 8004cd8:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a05      	ldr	r2, [pc, #20]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a02      	ldr	r2, [pc, #8]	; (8004cf4 <HAL_RCC_OscConfig+0x270>)
 8004cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	e014      	b.n	8004d1c <HAL_RCC_OscConfig+0x298>
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	0800a08c 	.word	0x0800a08c
 8004cfc:	20000004 	.word	0x20000004
 8004d00:	20000008 	.word	0x20000008
 8004d04:	4ba0      	ldr	r3, [pc, #640]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a9f      	ldr	r2, [pc, #636]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b9d      	ldr	r3, [pc, #628]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a9c      	ldr	r2, [pc, #624]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d013      	beq.n	8004d4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fe fb76 	bl	8003414 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fe fb72 	bl	8003414 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e276      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d3e:	4b92      	ldr	r3, [pc, #584]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x2a8>
 8004d4a:	e014      	b.n	8004d76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fe fb62 	bl	8003414 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fe fb5e 	bl	8003414 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	; 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e262      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d66:	4b88      	ldr	r3, [pc, #544]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x2d0>
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d060      	beq.n	8004e44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_OscConfig+0x310>
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d119      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d116      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d94:	4b7c      	ldr	r3, [pc, #496]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_OscConfig+0x328>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e23f      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dac:	4b76      	ldr	r3, [pc, #472]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	4973      	ldr	r1, [pc, #460]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc0:	e040      	b.n	8004e44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d023      	beq.n	8004e12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dca:	4b6f      	ldr	r3, [pc, #444]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6e      	ldr	r2, [pc, #440]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fe fb1d 	bl	8003414 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dde:	f7fe fb19 	bl	8003414 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e21d      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df0:	4b65      	ldr	r3, [pc, #404]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfc:	4b62      	ldr	r3, [pc, #392]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	061b      	lsls	r3, r3, #24
 8004e0a:	495f      	ldr	r1, [pc, #380]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
 8004e10:	e018      	b.n	8004e44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e12:	4b5d      	ldr	r3, [pc, #372]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5c      	ldr	r2, [pc, #368]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fe faf9 	bl	8003414 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e26:	f7fe faf5 	bl	8003414 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e1f9      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e38:	4b53      	ldr	r3, [pc, #332]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f0      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d03c      	beq.n	8004eca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01c      	beq.n	8004e92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e58:	4b4b      	ldr	r3, [pc, #300]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5e:	4a4a      	ldr	r2, [pc, #296]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fe fad4 	bl	8003414 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e70:	f7fe fad0 	bl	8003414 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e1d4      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e82:	4b41      	ldr	r3, [pc, #260]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ef      	beq.n	8004e70 <HAL_RCC_OscConfig+0x3ec>
 8004e90:	e01b      	b.n	8004eca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e92:	4b3d      	ldr	r3, [pc, #244]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e98:	4a3b      	ldr	r2, [pc, #236]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea2:	f7fe fab7 	bl	8003414 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eaa:	f7fe fab3 	bl	8003414 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e1b7      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ebc:	4b32      	ldr	r3, [pc, #200]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1ef      	bne.n	8004eaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80a6 	beq.w	8005024 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee8:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f00:	2301      	movs	r3, #1
 8004f02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f04:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <HAL_RCC_OscConfig+0x508>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d118      	bne.n	8004f42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f10:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <HAL_RCC_OscConfig+0x508>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <HAL_RCC_OscConfig+0x508>)
 8004f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1c:	f7fe fa7a 	bl	8003414 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f24:	f7fe fa76 	bl	8003414 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e17a      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f36:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <HAL_RCC_OscConfig+0x508>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d108      	bne.n	8004f5c <HAL_RCC_OscConfig+0x4d8>
 8004f4a:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f50:	4a0d      	ldr	r2, [pc, #52]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f5a:	e029      	b.n	8004fb0 <HAL_RCC_OscConfig+0x52c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d115      	bne.n	8004f90 <HAL_RCC_OscConfig+0x50c>
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6a:	4a07      	ldr	r2, [pc, #28]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f6c:	f043 0304 	orr.w	r3, r3, #4
 8004f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	4a03      	ldr	r2, [pc, #12]	; (8004f88 <HAL_RCC_OscConfig+0x504>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f84:	e014      	b.n	8004fb0 <HAL_RCC_OscConfig+0x52c>
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40007000 	.word	0x40007000
 8004f90:	4b9c      	ldr	r3, [pc, #624]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	4a9b      	ldr	r2, [pc, #620]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa0:	4b98      	ldr	r3, [pc, #608]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	4a97      	ldr	r2, [pc, #604]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 8004fa8:	f023 0304 	bic.w	r3, r3, #4
 8004fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d016      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fe fa2c 	bl	8003414 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fe fa28 	bl	8003414 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e12a      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd6:	4b8b      	ldr	r3, [pc, #556]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ed      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x53c>
 8004fe4:	e015      	b.n	8005012 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe6:	f7fe fa15 	bl	8003414 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fe fa11 	bl	8003414 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e113      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005004:	4b7f      	ldr	r3, [pc, #508]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ed      	bne.n	8004fee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005012:	7ffb      	ldrb	r3, [r7, #31]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d105      	bne.n	8005024 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005018:	4b7a      	ldr	r3, [pc, #488]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800501a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501c:	4a79      	ldr	r2, [pc, #484]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800501e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005022:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80fe 	beq.w	800522a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	2b02      	cmp	r3, #2
 8005034:	f040 80d0 	bne.w	80051d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005038:	4b72      	ldr	r3, [pc, #456]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f003 0203 	and.w	r2, r3, #3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	429a      	cmp	r2, r3
 800504a:	d130      	bne.n	80050ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	3b01      	subs	r3, #1
 8005058:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800505a:	429a      	cmp	r2, r3
 800505c:	d127      	bne.n	80050ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005068:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800506a:	429a      	cmp	r2, r3
 800506c:	d11f      	bne.n	80050ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005078:	2a07      	cmp	r2, #7
 800507a:	bf14      	ite	ne
 800507c:	2201      	movne	r2, #1
 800507e:	2200      	moveq	r2, #0
 8005080:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005082:	4293      	cmp	r3, r2
 8005084:	d113      	bne.n	80050ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	3b01      	subs	r3, #1
 8005094:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005096:	429a      	cmp	r2, r3
 8005098:	d109      	bne.n	80050ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	085b      	lsrs	r3, r3, #1
 80050a6:	3b01      	subs	r3, #1
 80050a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d06e      	beq.n	800518c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b0c      	cmp	r3, #12
 80050b2:	d069      	beq.n	8005188 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050b4:	4b53      	ldr	r3, [pc, #332]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050c0:	4b50      	ldr	r3, [pc, #320]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0ad      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050d0:	4b4c      	ldr	r3, [pc, #304]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a4b      	ldr	r2, [pc, #300]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80050d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050dc:	f7fe f99a 	bl	8003414 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e4:	f7fe f996 	bl	8003414 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e09a      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f6:	4b43      	ldr	r3, [pc, #268]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005102:	4b40      	ldr	r3, [pc, #256]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	4b40      	ldr	r3, [pc, #256]	; (8005208 <HAL_RCC_OscConfig+0x784>)
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005112:	3a01      	subs	r2, #1
 8005114:	0112      	lsls	r2, r2, #4
 8005116:	4311      	orrs	r1, r2
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800511c:	0212      	lsls	r2, r2, #8
 800511e:	4311      	orrs	r1, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005124:	0852      	lsrs	r2, r2, #1
 8005126:	3a01      	subs	r2, #1
 8005128:	0552      	lsls	r2, r2, #21
 800512a:	4311      	orrs	r1, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005130:	0852      	lsrs	r2, r2, #1
 8005132:	3a01      	subs	r2, #1
 8005134:	0652      	lsls	r2, r2, #25
 8005136:	4311      	orrs	r1, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800513c:	0912      	lsrs	r2, r2, #4
 800513e:	0452      	lsls	r2, r2, #17
 8005140:	430a      	orrs	r2, r1
 8005142:	4930      	ldr	r1, [pc, #192]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 8005144:	4313      	orrs	r3, r2
 8005146:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005148:	4b2e      	ldr	r3, [pc, #184]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800514e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005152:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005154:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800515a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800515e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005160:	f7fe f958 	bl	8003414 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005168:	f7fe f954 	bl	8003414 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e058      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800517a:	4b22      	ldr	r3, [pc, #136]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f0      	beq.n	8005168 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005186:	e050      	b.n	800522a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e04f      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518c:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d148      	bne.n	800522a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a19      	ldr	r2, [pc, #100]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 800519e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051a4:	4b17      	ldr	r3, [pc, #92]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a16      	ldr	r2, [pc, #88]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80051aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051b0:	f7fe f930 	bl	8003414 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b8:	f7fe f92c 	bl	8003414 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e030      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0x734>
 80051d6:	e028      	b.n	800522a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d023      	beq.n	8005226 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a08      	ldr	r2, [pc, #32]	; (8005204 <HAL_RCC_OscConfig+0x780>)
 80051e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fe f913 	bl	8003414 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f0:	e00c      	b.n	800520c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fe f90f 	bl	8003414 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d905      	bls.n	800520c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e013      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
 8005204:	40021000 	.word	0x40021000
 8005208:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800520c:	4b09      	ldr	r3, [pc, #36]	; (8005234 <HAL_RCC_OscConfig+0x7b0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ec      	bne.n	80051f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_RCC_OscConfig+0x7b0>)
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	4905      	ldr	r1, [pc, #20]	; (8005234 <HAL_RCC_OscConfig+0x7b0>)
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <HAL_RCC_OscConfig+0x7b4>)
 8005220:	4013      	ands	r3, r2
 8005222:	60cb      	str	r3, [r1, #12]
 8005224:	e001      	b.n	800522a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40021000 	.word	0x40021000
 8005238:	feeefffc 	.word	0xfeeefffc

0800523c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0e7      	b.n	8005420 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005250:	4b75      	ldr	r3, [pc, #468]	; (8005428 <HAL_RCC_ClockConfig+0x1ec>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d910      	bls.n	8005280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b72      	ldr	r3, [pc, #456]	; (8005428 <HAL_RCC_ClockConfig+0x1ec>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 0207 	bic.w	r2, r3, #7
 8005266:	4970      	ldr	r1, [pc, #448]	; (8005428 <HAL_RCC_ClockConfig+0x1ec>)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526e:	4b6e      	ldr	r3, [pc, #440]	; (8005428 <HAL_RCC_ClockConfig+0x1ec>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0cf      	b.n	8005420 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d010      	beq.n	80052ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	4b66      	ldr	r3, [pc, #408]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005298:	429a      	cmp	r2, r3
 800529a:	d908      	bls.n	80052ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529c:	4b63      	ldr	r3, [pc, #396]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4960      	ldr	r1, [pc, #384]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d04c      	beq.n	8005354 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d107      	bne.n	80052d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c2:	4b5a      	ldr	r3, [pc, #360]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d121      	bne.n	8005312 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e0a6      	b.n	8005420 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d107      	bne.n	80052ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052da:	4b54      	ldr	r3, [pc, #336]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d115      	bne.n	8005312 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e09a      	b.n	8005420 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052f2:	4b4e      	ldr	r3, [pc, #312]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e08e      	b.n	8005420 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005302:	4b4a      	ldr	r3, [pc, #296]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e086      	b.n	8005420 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005312:	4b46      	ldr	r3, [pc, #280]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 0203 	bic.w	r2, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	4943      	ldr	r1, [pc, #268]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 8005320:	4313      	orrs	r3, r2
 8005322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005324:	f7fe f876 	bl	8003414 <HAL_GetTick>
 8005328:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532a:	e00a      	b.n	8005342 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532c:	f7fe f872 	bl	8003414 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f241 3288 	movw	r2, #5000	; 0x1388
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e06e      	b.n	8005420 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	4b3a      	ldr	r3, [pc, #232]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 020c 	and.w	r2, r3, #12
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	429a      	cmp	r2, r3
 8005352:	d1eb      	bne.n	800532c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d010      	beq.n	8005382 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	4b31      	ldr	r3, [pc, #196]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800536c:	429a      	cmp	r2, r3
 800536e:	d208      	bcs.n	8005382 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005370:	4b2e      	ldr	r3, [pc, #184]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	492b      	ldr	r1, [pc, #172]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005382:	4b29      	ldr	r3, [pc, #164]	; (8005428 <HAL_RCC_ClockConfig+0x1ec>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d210      	bcs.n	80053b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005390:	4b25      	ldr	r3, [pc, #148]	; (8005428 <HAL_RCC_ClockConfig+0x1ec>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f023 0207 	bic.w	r2, r3, #7
 8005398:	4923      	ldr	r1, [pc, #140]	; (8005428 <HAL_RCC_ClockConfig+0x1ec>)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	4313      	orrs	r3, r2
 800539e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a0:	4b21      	ldr	r3, [pc, #132]	; (8005428 <HAL_RCC_ClockConfig+0x1ec>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d001      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e036      	b.n	8005420 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053be:	4b1b      	ldr	r3, [pc, #108]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	4918      	ldr	r1, [pc, #96]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053dc:	4b13      	ldr	r3, [pc, #76]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	4910      	ldr	r1, [pc, #64]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053f0:	f000 f824 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b0d      	ldr	r3, [pc, #52]	; (800542c <HAL_RCC_ClockConfig+0x1f0>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	091b      	lsrs	r3, r3, #4
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	490b      	ldr	r1, [pc, #44]	; (8005430 <HAL_RCC_ClockConfig+0x1f4>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
 800540c:	4a09      	ldr	r2, [pc, #36]	; (8005434 <HAL_RCC_ClockConfig+0x1f8>)
 800540e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <HAL_RCC_ClockConfig+0x1fc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f7fd ffad 	bl	8003374 <HAL_InitTick>
 800541a:	4603      	mov	r3, r0
 800541c:	72fb      	strb	r3, [r7, #11]

  return status;
 800541e:	7afb      	ldrb	r3, [r7, #11]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40022000 	.word	0x40022000
 800542c:	40021000 	.word	0x40021000
 8005430:	0800a08c 	.word	0x0800a08c
 8005434:	20000004 	.word	0x20000004
 8005438:	20000008 	.word	0x20000008

0800543c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
 8005446:	2300      	movs	r3, #0
 8005448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544a:	4b3e      	ldr	r3, [pc, #248]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
 8005452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005454:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x34>
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b0c      	cmp	r3, #12
 8005468:	d121      	bne.n	80054ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d11e      	bne.n	80054ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005470:	4b34      	ldr	r3, [pc, #208]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800547c:	4b31      	ldr	r3, [pc, #196]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	e005      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800548c:	4b2d      	ldr	r3, [pc, #180]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005498:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <HAL_RCC_GetSysClockFreq+0x10c>)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10d      	bne.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054ac:	e00a      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d102      	bne.n	80054ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <HAL_RCC_GetSysClockFreq+0x110>)
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	e004      	b.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054c0:	4b23      	ldr	r3, [pc, #140]	; (8005550 <HAL_RCC_GetSysClockFreq+0x114>)
 80054c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b0c      	cmp	r3, #12
 80054c8:	d134      	bne.n	8005534 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054ca:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d003      	beq.n	80054e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d003      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0xac>
 80054e0:	e005      	b.n	80054ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054e2:	4b1a      	ldr	r3, [pc, #104]	; (800554c <HAL_RCC_GetSysClockFreq+0x110>)
 80054e4:	617b      	str	r3, [r7, #20]
      break;
 80054e6:	e005      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054e8:	4b19      	ldr	r3, [pc, #100]	; (8005550 <HAL_RCC_GetSysClockFreq+0x114>)
 80054ea:	617b      	str	r3, [r7, #20]
      break;
 80054ec:	e002      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	617b      	str	r3, [r7, #20]
      break;
 80054f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	3301      	adds	r3, #1
 8005500:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	fb03 f202 	mul.w	r2, r3, r2
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <HAL_RCC_GetSysClockFreq+0x108>)
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	0e5b      	lsrs	r3, r3, #25
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	3301      	adds	r3, #1
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005534:	69bb      	ldr	r3, [r7, #24]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3724      	adds	r7, #36	; 0x24
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40021000 	.word	0x40021000
 8005548:	0800a0a4 	.word	0x0800a0a4
 800554c:	00f42400 	.word	0x00f42400
 8005550:	007a1200 	.word	0x007a1200

08005554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <HAL_RCC_GetHCLKFreq+0x14>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000004 	.word	0x20000004

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005570:	f7ff fff0 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0a1b      	lsrs	r3, r3, #8
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4904      	ldr	r1, [pc, #16]	; (8005594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800558c:	4618      	mov	r0, r3
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40021000 	.word	0x40021000
 8005594:	0800a09c 	.word	0x0800a09c

08005598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800559c:	f7ff ffda 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 80055a0:	4602      	mov	r2, r0
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	0adb      	lsrs	r3, r3, #11
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	4904      	ldr	r1, [pc, #16]	; (80055c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ae:	5ccb      	ldrb	r3, [r1, r3]
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40021000 	.word	0x40021000
 80055c0:	0800a09c 	.word	0x0800a09c

080055c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055d0:	4b2a      	ldr	r3, [pc, #168]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055dc:	f7ff f9ee 	bl	80049bc <HAL_PWREx_GetVoltageRange>
 80055e0:	6178      	str	r0, [r7, #20]
 80055e2:	e014      	b.n	800560e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055e4:	4b25      	ldr	r3, [pc, #148]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e8:	4a24      	ldr	r2, [pc, #144]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6593      	str	r3, [r2, #88]	; 0x58
 80055f0:	4b22      	ldr	r3, [pc, #136]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055fc:	f7ff f9de 	bl	80049bc <HAL_PWREx_GetVoltageRange>
 8005600:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005602:	4b1e      	ldr	r3, [pc, #120]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	4a1d      	ldr	r2, [pc, #116]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005614:	d10b      	bne.n	800562e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d919      	bls.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2ba0      	cmp	r3, #160	; 0xa0
 8005620:	d902      	bls.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005622:	2302      	movs	r3, #2
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e013      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005628:	2301      	movs	r3, #1
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e010      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d902      	bls.n	800563a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005634:	2303      	movs	r3, #3
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e00a      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d102      	bne.n	8005646 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005640:	2302      	movs	r3, #2
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	e004      	b.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b70      	cmp	r3, #112	; 0x70
 800564a:	d101      	bne.n	8005650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800564c:	2301      	movs	r3, #1
 800564e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005650:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 0207 	bic.w	r2, r3, #7
 8005658:	4909      	ldr	r1, [pc, #36]	; (8005680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	d001      	beq.n	8005672 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40021000 	.word	0x40021000
 8005680:	40022000 	.word	0x40022000

08005684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800568c:	2300      	movs	r3, #0
 800568e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005690:	2300      	movs	r3, #0
 8005692:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569c:	2b00      	cmp	r3, #0
 800569e:	d041      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056a8:	d02a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056ae:	d824      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056b4:	d008      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ba:	d81e      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056c4:	d010      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056c6:	e018      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056c8:	4b86      	ldr	r3, [pc, #536]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4a85      	ldr	r2, [pc, #532]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056d4:	e015      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fabb 	bl	8005c58 <RCCEx_PLLSAI1_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056e6:	e00c      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3320      	adds	r3, #32
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fba6 	bl	8005e40 <RCCEx_PLLSAI2_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056f8:	e003      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	74fb      	strb	r3, [r7, #19]
      break;
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10b      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005708:	4b76      	ldr	r3, [pc, #472]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005716:	4973      	ldr	r1, [pc, #460]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800571e:	e001      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d041      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005734:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005738:	d02a      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800573a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800573e:	d824      	bhi.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005744:	d008      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800574a:	d81e      	bhi.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005754:	d010      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005756:	e018      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005758:	4b62      	ldr	r3, [pc, #392]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4a61      	ldr	r2, [pc, #388]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800575e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005762:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005764:	e015      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3304      	adds	r3, #4
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fa73 	bl	8005c58 <RCCEx_PLLSAI1_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005776:	e00c      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3320      	adds	r3, #32
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fb5e 	bl	8005e40 <RCCEx_PLLSAI2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005788:	e003      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	74fb      	strb	r3, [r7, #19]
      break;
 800578e:	e000      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005792:	7cfb      	ldrb	r3, [r7, #19]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10b      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005798:	4b52      	ldr	r3, [pc, #328]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057a6:	494f      	ldr	r1, [pc, #316]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057ae:	e001      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a0 	beq.w	8005902 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c2:	2300      	movs	r3, #0
 80057c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057c6:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80057d6:	2300      	movs	r3, #0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00d      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057dc:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e0:	4a40      	ldr	r2, [pc, #256]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e6:	6593      	str	r3, [r2, #88]	; 0x58
 80057e8:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f0:	60bb      	str	r3, [r7, #8]
 80057f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f4:	2301      	movs	r3, #1
 80057f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f8:	4b3b      	ldr	r3, [pc, #236]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a3a      	ldr	r2, [pc, #232]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80057fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005804:	f7fd fe06 	bl	8003414 <HAL_GetTick>
 8005808:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800580a:	e009      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800580c:	f7fd fe02 	bl	8003414 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d902      	bls.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	74fb      	strb	r3, [r7, #19]
        break;
 800581e:	e005      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005820:	4b31      	ldr	r3, [pc, #196]	; (80058e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0ef      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d15c      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005832:	4b2c      	ldr	r3, [pc, #176]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01f      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	429a      	cmp	r2, r3
 800584e:	d019      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005850:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800585a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800585c:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	4a20      	ldr	r2, [pc, #128]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005872:	4a1c      	ldr	r2, [pc, #112]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588e:	f7fd fdc1 	bl	8003414 <HAL_GetTick>
 8005892:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005894:	e00b      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7fd fdbd 	bl	8003414 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d902      	bls.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	74fb      	strb	r3, [r7, #19]
            break;
 80058ac:	e006      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ae:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0ec      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10c      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058c2:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d2:	4904      	ldr	r1, [pc, #16]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058da:	e009      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058dc:	7cfb      	ldrb	r3, [r7, #19]
 80058de:	74bb      	strb	r3, [r7, #18]
 80058e0:	e006      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80058e2:	bf00      	nop
 80058e4:	40021000 	.word	0x40021000
 80058e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ec:	7cfb      	ldrb	r3, [r7, #19]
 80058ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058f0:	7c7b      	ldrb	r3, [r7, #17]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d105      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f6:	4b9e      	ldr	r3, [pc, #632]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fa:	4a9d      	ldr	r2, [pc, #628]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005900:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800590e:	4b98      	ldr	r3, [pc, #608]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005914:	f023 0203 	bic.w	r2, r3, #3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	4994      	ldr	r1, [pc, #592]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005930:	4b8f      	ldr	r3, [pc, #572]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005936:	f023 020c 	bic.w	r2, r3, #12
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	498c      	ldr	r1, [pc, #560]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005952:	4b87      	ldr	r3, [pc, #540]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	4983      	ldr	r1, [pc, #524]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005974:	4b7e      	ldr	r3, [pc, #504]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	497b      	ldr	r1, [pc, #492]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005996:	4b76      	ldr	r3, [pc, #472]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a4:	4972      	ldr	r1, [pc, #456]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059b8:	4b6d      	ldr	r3, [pc, #436]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c6:	496a      	ldr	r1, [pc, #424]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059da:	4b65      	ldr	r3, [pc, #404]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e8:	4961      	ldr	r1, [pc, #388]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059fc:	4b5c      	ldr	r3, [pc, #368]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0a:	4959      	ldr	r1, [pc, #356]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a1e:	4b54      	ldr	r3, [pc, #336]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2c:	4950      	ldr	r1, [pc, #320]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a40:	4b4b      	ldr	r3, [pc, #300]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	4948      	ldr	r1, [pc, #288]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a62:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a70:	493f      	ldr	r1, [pc, #252]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d028      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a84:	4b3a      	ldr	r3, [pc, #232]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a92:	4937      	ldr	r1, [pc, #220]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aa2:	d106      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa4:	4b32      	ldr	r3, [pc, #200]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4a31      	ldr	r2, [pc, #196]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aae:	60d3      	str	r3, [r2, #12]
 8005ab0:	e011      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aba:	d10c      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f8c8 	bl	8005c58 <RCCEx_PLLSAI1_Config>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005acc:	7cfb      	ldrb	r3, [r7, #19]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005ad2:	7cfb      	ldrb	r3, [r7, #19]
 8005ad4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d028      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ae2:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	491f      	ldr	r1, [pc, #124]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b00:	d106      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b02:	4b1b      	ldr	r3, [pc, #108]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	4a1a      	ldr	r2, [pc, #104]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b0c:	60d3      	str	r3, [r2, #12]
 8005b0e:	e011      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f899 	bl	8005c58 <RCCEx_PLLSAI1_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005b30:	7cfb      	ldrb	r3, [r7, #19]
 8005b32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02b      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4e:	4908      	ldr	r1, [pc, #32]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b5e:	d109      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b60:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a02      	ldr	r2, [pc, #8]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b6a:	60d3      	str	r3, [r2, #12]
 8005b6c:	e014      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b7c:	d10c      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	2101      	movs	r1, #1
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f867 	bl	8005c58 <RCCEx_PLLSAI1_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b8e:	7cfb      	ldrb	r3, [r7, #19]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02f      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005baa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb2:	4928      	ldr	r1, [pc, #160]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc2:	d10d      	bne.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	2102      	movs	r1, #2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f844 	bl	8005c58 <RCCEx_PLLSAI1_Config>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bd4:	7cfb      	ldrb	r3, [r7, #19]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d014      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005bda:	7cfb      	ldrb	r3, [r7, #19]
 8005bdc:	74bb      	strb	r3, [r7, #18]
 8005bde:	e011      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be8:	d10c      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3320      	adds	r3, #32
 8005bee:	2102      	movs	r1, #2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 f925 	bl	8005e40 <RCCEx_PLLSAI2_Config>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bfa:	7cfb      	ldrb	r3, [r7, #19]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c00:	7cfb      	ldrb	r3, [r7, #19]
 8005c02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c10:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c1e:	490d      	ldr	r1, [pc, #52]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c42:	4904      	ldr	r1, [pc, #16]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40021000 	.word	0x40021000

08005c58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c66:	4b75      	ldr	r3, [pc, #468]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d018      	beq.n	8005ca4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c72:	4b72      	ldr	r3, [pc, #456]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0203 	and.w	r2, r3, #3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d10d      	bne.n	8005c9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
       ||
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d009      	beq.n	8005c9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c8a:	4b6c      	ldr	r3, [pc, #432]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
       ||
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d047      	beq.n	8005d2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
 8005ca2:	e044      	b.n	8005d2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d018      	beq.n	8005cde <RCCEx_PLLSAI1_Config+0x86>
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d825      	bhi.n	8005cfc <RCCEx_PLLSAI1_Config+0xa4>
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d002      	beq.n	8005cba <RCCEx_PLLSAI1_Config+0x62>
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d009      	beq.n	8005ccc <RCCEx_PLLSAI1_Config+0x74>
 8005cb8:	e020      	b.n	8005cfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cba:	4b60      	ldr	r3, [pc, #384]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d11d      	bne.n	8005d02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cca:	e01a      	b.n	8005d02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ccc:	4b5b      	ldr	r3, [pc, #364]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d116      	bne.n	8005d06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cdc:	e013      	b.n	8005d06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cde:	4b57      	ldr	r3, [pc, #348]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10f      	bne.n	8005d0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cea:	4b54      	ldr	r3, [pc, #336]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d109      	bne.n	8005d0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cfa:	e006      	b.n	8005d0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005d00:	e004      	b.n	8005d0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d02:	bf00      	nop
 8005d04:	e002      	b.n	8005d0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d06:	bf00      	nop
 8005d08:	e000      	b.n	8005d0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10d      	bne.n	8005d2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d12:	4b4a      	ldr	r3, [pc, #296]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6819      	ldr	r1, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	430b      	orrs	r3, r1
 8005d28:	4944      	ldr	r1, [pc, #272]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d17d      	bne.n	8005e30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d34:	4b41      	ldr	r3, [pc, #260]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a40      	ldr	r2, [pc, #256]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d40:	f7fd fb68 	bl	8003414 <HAL_GetTick>
 8005d44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d46:	e009      	b.n	8005d5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d48:	f7fd fb64 	bl	8003414 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d902      	bls.n	8005d5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	73fb      	strb	r3, [r7, #15]
        break;
 8005d5a:	e005      	b.n	8005d68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d5c:	4b37      	ldr	r3, [pc, #220]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1ef      	bne.n	8005d48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d160      	bne.n	8005e30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d111      	bne.n	8005d98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d74:	4b31      	ldr	r3, [pc, #196]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6892      	ldr	r2, [r2, #8]
 8005d84:	0211      	lsls	r1, r2, #8
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	68d2      	ldr	r2, [r2, #12]
 8005d8a:	0912      	lsrs	r2, r2, #4
 8005d8c:	0452      	lsls	r2, r2, #17
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	492a      	ldr	r1, [pc, #168]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	610b      	str	r3, [r1, #16]
 8005d96:	e027      	b.n	8005de8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d112      	bne.n	8005dc4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d9e:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005da6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6892      	ldr	r2, [r2, #8]
 8005dae:	0211      	lsls	r1, r2, #8
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6912      	ldr	r2, [r2, #16]
 8005db4:	0852      	lsrs	r2, r2, #1
 8005db6:	3a01      	subs	r2, #1
 8005db8:	0552      	lsls	r2, r2, #21
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	491f      	ldr	r1, [pc, #124]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	610b      	str	r3, [r1, #16]
 8005dc2:	e011      	b.n	8005de8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dc4:	4b1d      	ldr	r3, [pc, #116]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6892      	ldr	r2, [r2, #8]
 8005dd4:	0211      	lsls	r1, r2, #8
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6952      	ldr	r2, [r2, #20]
 8005dda:	0852      	lsrs	r2, r2, #1
 8005ddc:	3a01      	subs	r2, #1
 8005dde:	0652      	lsls	r2, r2, #25
 8005de0:	430a      	orrs	r2, r1
 8005de2:	4916      	ldr	r1, [pc, #88]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005de8:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005df2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df4:	f7fd fb0e 	bl	8003414 <HAL_GetTick>
 8005df8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dfa:	e009      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dfc:	f7fd fb0a 	bl	8003414 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d902      	bls.n	8005e10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	73fb      	strb	r3, [r7, #15]
          break;
 8005e0e:	e005      	b.n	8005e1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0ef      	beq.n	8005dfc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d106      	bne.n	8005e30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	4904      	ldr	r1, [pc, #16]	; (8005e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40021000 	.word	0x40021000

08005e40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d018      	beq.n	8005e8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e5a:	4b67      	ldr	r3, [pc, #412]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0203 	and.w	r2, r3, #3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d10d      	bne.n	8005e86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005e72:	4b61      	ldr	r3, [pc, #388]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	091b      	lsrs	r3, r3, #4
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
       ||
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d047      	beq.n	8005f16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	73fb      	strb	r3, [r7, #15]
 8005e8a:	e044      	b.n	8005f16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d018      	beq.n	8005ec6 <RCCEx_PLLSAI2_Config+0x86>
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d825      	bhi.n	8005ee4 <RCCEx_PLLSAI2_Config+0xa4>
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d002      	beq.n	8005ea2 <RCCEx_PLLSAI2_Config+0x62>
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d009      	beq.n	8005eb4 <RCCEx_PLLSAI2_Config+0x74>
 8005ea0:	e020      	b.n	8005ee4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ea2:	4b55      	ldr	r3, [pc, #340]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d11d      	bne.n	8005eea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eb2:	e01a      	b.n	8005eea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005eb4:	4b50      	ldr	r3, [pc, #320]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d116      	bne.n	8005eee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ec4:	e013      	b.n	8005eee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ec6:	4b4c      	ldr	r3, [pc, #304]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10f      	bne.n	8005ef2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ed2:	4b49      	ldr	r3, [pc, #292]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ee2:	e006      	b.n	8005ef2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ee8:	e004      	b.n	8005ef4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005eea:	bf00      	nop
 8005eec:	e002      	b.n	8005ef4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005eee:	bf00      	nop
 8005ef0:	e000      	b.n	8005ef4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ef2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10d      	bne.n	8005f16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005efa:	4b3f      	ldr	r3, [pc, #252]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6819      	ldr	r1, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	011b      	lsls	r3, r3, #4
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	4939      	ldr	r1, [pc, #228]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d167      	bne.n	8005fec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f1c:	4b36      	ldr	r3, [pc, #216]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a35      	ldr	r2, [pc, #212]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f28:	f7fd fa74 	bl	8003414 <HAL_GetTick>
 8005f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f2e:	e009      	b.n	8005f44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f30:	f7fd fa70 	bl	8003414 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d902      	bls.n	8005f44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	73fb      	strb	r3, [r7, #15]
        break;
 8005f42:	e005      	b.n	8005f50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f44:	4b2c      	ldr	r3, [pc, #176]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1ef      	bne.n	8005f30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d14a      	bne.n	8005fec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d111      	bne.n	8005f80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f5c:	4b26      	ldr	r3, [pc, #152]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6892      	ldr	r2, [r2, #8]
 8005f6c:	0211      	lsls	r1, r2, #8
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	68d2      	ldr	r2, [r2, #12]
 8005f72:	0912      	lsrs	r2, r2, #4
 8005f74:	0452      	lsls	r2, r2, #17
 8005f76:	430a      	orrs	r2, r1
 8005f78:	491f      	ldr	r1, [pc, #124]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	614b      	str	r3, [r1, #20]
 8005f7e:	e011      	b.n	8005fa4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f80:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6892      	ldr	r2, [r2, #8]
 8005f90:	0211      	lsls	r1, r2, #8
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	6912      	ldr	r2, [r2, #16]
 8005f96:	0852      	lsrs	r2, r2, #1
 8005f98:	3a01      	subs	r2, #1
 8005f9a:	0652      	lsls	r2, r2, #25
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	4916      	ldr	r1, [pc, #88]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fa4:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f7fd fa30 	bl	8003414 <HAL_GetTick>
 8005fb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fb6:	e009      	b.n	8005fcc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fb8:	f7fd fa2c 	bl	8003414 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d902      	bls.n	8005fcc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	73fb      	strb	r3, [r7, #15]
          break;
 8005fca:	e005      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0ef      	beq.n	8005fb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	4904      	ldr	r1, [pc, #16]	; (8005ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000

08005ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e040      	b.n	8006090 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fd f8dc 	bl	80031dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2224      	movs	r2, #36	; 0x24
 8006028:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0201 	bic.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f936 	bl	80062ac <UART_SetConfig>
 8006040:	4603      	mov	r3, r0
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e022      	b.n	8006090 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fbe2 	bl	800681c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fc69 	bl	8006960 <UART_CheckIdleState>
 800608e:	4603      	mov	r3, r0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	f040 8082 	bne.w	80061b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_UART_Transmit+0x26>
 80060b8:	88fb      	ldrh	r3, [r7, #6]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e07a      	b.n	80061b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UART_Transmit+0x38>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e073      	b.n	80061b8 <HAL_UART_Transmit+0x120>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2221      	movs	r2, #33	; 0x21
 80060e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060e6:	f7fd f995 	bl	8003414 <HAL_GetTick>
 80060ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	88fa      	ldrh	r2, [r7, #6]
 80060f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006104:	d108      	bne.n	8006118 <HAL_UART_Transmit+0x80>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d104      	bne.n	8006118 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	e003      	b.n	8006120 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006128:	e02d      	b.n	8006186 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2200      	movs	r2, #0
 8006132:	2180      	movs	r1, #128	; 0x80
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fc5c 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e039      	b.n	80061b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10b      	bne.n	8006162 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006156:	b292      	uxth	r2, r2
 8006158:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	3302      	adds	r3, #2
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	e008      	b.n	8006174 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	b292      	uxth	r2, r2
 800616c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	3301      	adds	r3, #1
 8006172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1cb      	bne.n	800612a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2200      	movs	r2, #0
 800619a:	2140      	movs	r1, #64	; 0x40
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fc28 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e005      	b.n	80061b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
  }
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d142      	bne.n	800625c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <HAL_UART_Receive_DMA+0x22>
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e03b      	b.n	800625e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_UART_Receive_DMA+0x34>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e034      	b.n	800625e <HAL_UART_Receive_DMA+0x9e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a18      	ldr	r2, [pc, #96]	; (8006268 <HAL_UART_Receive_DMA+0xa8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d01f      	beq.n	800624c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	613b      	str	r3, [r7, #16]
   return(result);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	69f9      	ldr	r1, [r7, #28]
 800623e:	6a3a      	ldr	r2, [r7, #32]
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	61bb      	str	r3, [r7, #24]
   return(result);
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e6      	bne.n	800621a <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800624c:	88fb      	ldrh	r3, [r7, #6]
 800624e:	461a      	mov	r2, r3
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fc92 	bl	8006b7c <UART_Start_Receive_DMA>
 8006258:	4603      	mov	r3, r0
 800625a:	e000      	b.n	800625e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800625c:	2302      	movs	r3, #2
  }
}
 800625e:	4618      	mov	r0, r3
 8006260:	3728      	adds	r7, #40	; 0x28
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40008000 	.word	0x40008000

0800626c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b0:	b08a      	sub	sp, #40	; 0x28
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4ba4      	ldr	r3, [pc, #656]	; (800656c <UART_SetConfig+0x2c0>)
 80062dc:	4013      	ands	r3, r2
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062e4:	430b      	orrs	r3, r1
 80062e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a99      	ldr	r2, [pc, #612]	; (8006570 <UART_SetConfig+0x2c4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006314:	4313      	orrs	r3, r2
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006328:	430a      	orrs	r2, r1
 800632a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a90      	ldr	r2, [pc, #576]	; (8006574 <UART_SetConfig+0x2c8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d126      	bne.n	8006384 <UART_SetConfig+0xd8>
 8006336:	4b90      	ldr	r3, [pc, #576]	; (8006578 <UART_SetConfig+0x2cc>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	2b03      	cmp	r3, #3
 8006342:	d81b      	bhi.n	800637c <UART_SetConfig+0xd0>
 8006344:	a201      	add	r2, pc, #4	; (adr r2, 800634c <UART_SetConfig+0xa0>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	0800635d 	.word	0x0800635d
 8006350:	0800636d 	.word	0x0800636d
 8006354:	08006365 	.word	0x08006365
 8006358:	08006375 	.word	0x08006375
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006362:	e116      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006364:	2302      	movs	r3, #2
 8006366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636a:	e112      	b.n	8006592 <UART_SetConfig+0x2e6>
 800636c:	2304      	movs	r3, #4
 800636e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006372:	e10e      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006374:	2308      	movs	r3, #8
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637a:	e10a      	b.n	8006592 <UART_SetConfig+0x2e6>
 800637c:	2310      	movs	r3, #16
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006382:	e106      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a7c      	ldr	r2, [pc, #496]	; (800657c <UART_SetConfig+0x2d0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d138      	bne.n	8006400 <UART_SetConfig+0x154>
 800638e:	4b7a      	ldr	r3, [pc, #488]	; (8006578 <UART_SetConfig+0x2cc>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f003 030c 	and.w	r3, r3, #12
 8006398:	2b0c      	cmp	r3, #12
 800639a:	d82d      	bhi.n	80063f8 <UART_SetConfig+0x14c>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0xf8>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063d9 	.word	0x080063d9
 80063a8:	080063f9 	.word	0x080063f9
 80063ac:	080063f9 	.word	0x080063f9
 80063b0:	080063f9 	.word	0x080063f9
 80063b4:	080063e9 	.word	0x080063e9
 80063b8:	080063f9 	.word	0x080063f9
 80063bc:	080063f9 	.word	0x080063f9
 80063c0:	080063f9 	.word	0x080063f9
 80063c4:	080063e1 	.word	0x080063e1
 80063c8:	080063f9 	.word	0x080063f9
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	080063f9 	.word	0x080063f9
 80063d4:	080063f1 	.word	0x080063f1
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063de:	e0d8      	b.n	8006592 <UART_SetConfig+0x2e6>
 80063e0:	2302      	movs	r3, #2
 80063e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063e6:	e0d4      	b.n	8006592 <UART_SetConfig+0x2e6>
 80063e8:	2304      	movs	r3, #4
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ee:	e0d0      	b.n	8006592 <UART_SetConfig+0x2e6>
 80063f0:	2308      	movs	r3, #8
 80063f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f6:	e0cc      	b.n	8006592 <UART_SetConfig+0x2e6>
 80063f8:	2310      	movs	r3, #16
 80063fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fe:	e0c8      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5e      	ldr	r2, [pc, #376]	; (8006580 <UART_SetConfig+0x2d4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d125      	bne.n	8006456 <UART_SetConfig+0x1aa>
 800640a:	4b5b      	ldr	r3, [pc, #364]	; (8006578 <UART_SetConfig+0x2cc>)
 800640c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006410:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006414:	2b30      	cmp	r3, #48	; 0x30
 8006416:	d016      	beq.n	8006446 <UART_SetConfig+0x19a>
 8006418:	2b30      	cmp	r3, #48	; 0x30
 800641a:	d818      	bhi.n	800644e <UART_SetConfig+0x1a2>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d00a      	beq.n	8006436 <UART_SetConfig+0x18a>
 8006420:	2b20      	cmp	r3, #32
 8006422:	d814      	bhi.n	800644e <UART_SetConfig+0x1a2>
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <UART_SetConfig+0x182>
 8006428:	2b10      	cmp	r3, #16
 800642a:	d008      	beq.n	800643e <UART_SetConfig+0x192>
 800642c:	e00f      	b.n	800644e <UART_SetConfig+0x1a2>
 800642e:	2300      	movs	r3, #0
 8006430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006434:	e0ad      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006436:	2302      	movs	r3, #2
 8006438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643c:	e0a9      	b.n	8006592 <UART_SetConfig+0x2e6>
 800643e:	2304      	movs	r3, #4
 8006440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006444:	e0a5      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006446:	2308      	movs	r3, #8
 8006448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644c:	e0a1      	b.n	8006592 <UART_SetConfig+0x2e6>
 800644e:	2310      	movs	r3, #16
 8006450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006454:	e09d      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a4a      	ldr	r2, [pc, #296]	; (8006584 <UART_SetConfig+0x2d8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d125      	bne.n	80064ac <UART_SetConfig+0x200>
 8006460:	4b45      	ldr	r3, [pc, #276]	; (8006578 <UART_SetConfig+0x2cc>)
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006466:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800646a:	2bc0      	cmp	r3, #192	; 0xc0
 800646c:	d016      	beq.n	800649c <UART_SetConfig+0x1f0>
 800646e:	2bc0      	cmp	r3, #192	; 0xc0
 8006470:	d818      	bhi.n	80064a4 <UART_SetConfig+0x1f8>
 8006472:	2b80      	cmp	r3, #128	; 0x80
 8006474:	d00a      	beq.n	800648c <UART_SetConfig+0x1e0>
 8006476:	2b80      	cmp	r3, #128	; 0x80
 8006478:	d814      	bhi.n	80064a4 <UART_SetConfig+0x1f8>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d002      	beq.n	8006484 <UART_SetConfig+0x1d8>
 800647e:	2b40      	cmp	r3, #64	; 0x40
 8006480:	d008      	beq.n	8006494 <UART_SetConfig+0x1e8>
 8006482:	e00f      	b.n	80064a4 <UART_SetConfig+0x1f8>
 8006484:	2300      	movs	r3, #0
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800648a:	e082      	b.n	8006592 <UART_SetConfig+0x2e6>
 800648c:	2302      	movs	r3, #2
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006492:	e07e      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006494:	2304      	movs	r3, #4
 8006496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800649a:	e07a      	b.n	8006592 <UART_SetConfig+0x2e6>
 800649c:	2308      	movs	r3, #8
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a2:	e076      	b.n	8006592 <UART_SetConfig+0x2e6>
 80064a4:	2310      	movs	r3, #16
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064aa:	e072      	b.n	8006592 <UART_SetConfig+0x2e6>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a35      	ldr	r2, [pc, #212]	; (8006588 <UART_SetConfig+0x2dc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d12a      	bne.n	800650c <UART_SetConfig+0x260>
 80064b6:	4b30      	ldr	r3, [pc, #192]	; (8006578 <UART_SetConfig+0x2cc>)
 80064b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064c4:	d01a      	beq.n	80064fc <UART_SetConfig+0x250>
 80064c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ca:	d81b      	bhi.n	8006504 <UART_SetConfig+0x258>
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d0:	d00c      	beq.n	80064ec <UART_SetConfig+0x240>
 80064d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d6:	d815      	bhi.n	8006504 <UART_SetConfig+0x258>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <UART_SetConfig+0x238>
 80064dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e0:	d008      	beq.n	80064f4 <UART_SetConfig+0x248>
 80064e2:	e00f      	b.n	8006504 <UART_SetConfig+0x258>
 80064e4:	2300      	movs	r3, #0
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ea:	e052      	b.n	8006592 <UART_SetConfig+0x2e6>
 80064ec:	2302      	movs	r3, #2
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064f2:	e04e      	b.n	8006592 <UART_SetConfig+0x2e6>
 80064f4:	2304      	movs	r3, #4
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064fa:	e04a      	b.n	8006592 <UART_SetConfig+0x2e6>
 80064fc:	2308      	movs	r3, #8
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006502:	e046      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006504:	2310      	movs	r3, #16
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650a:	e042      	b.n	8006592 <UART_SetConfig+0x2e6>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a17      	ldr	r2, [pc, #92]	; (8006570 <UART_SetConfig+0x2c4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d13a      	bne.n	800658c <UART_SetConfig+0x2e0>
 8006516:	4b18      	ldr	r3, [pc, #96]	; (8006578 <UART_SetConfig+0x2cc>)
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006524:	d01a      	beq.n	800655c <UART_SetConfig+0x2b0>
 8006526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800652a:	d81b      	bhi.n	8006564 <UART_SetConfig+0x2b8>
 800652c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006530:	d00c      	beq.n	800654c <UART_SetConfig+0x2a0>
 8006532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006536:	d815      	bhi.n	8006564 <UART_SetConfig+0x2b8>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <UART_SetConfig+0x298>
 800653c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006540:	d008      	beq.n	8006554 <UART_SetConfig+0x2a8>
 8006542:	e00f      	b.n	8006564 <UART_SetConfig+0x2b8>
 8006544:	2300      	movs	r3, #0
 8006546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800654a:	e022      	b.n	8006592 <UART_SetConfig+0x2e6>
 800654c:	2302      	movs	r3, #2
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006552:	e01e      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006554:	2304      	movs	r3, #4
 8006556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800655a:	e01a      	b.n	8006592 <UART_SetConfig+0x2e6>
 800655c:	2308      	movs	r3, #8
 800655e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006562:	e016      	b.n	8006592 <UART_SetConfig+0x2e6>
 8006564:	2310      	movs	r3, #16
 8006566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800656a:	e012      	b.n	8006592 <UART_SetConfig+0x2e6>
 800656c:	efff69f3 	.word	0xefff69f3
 8006570:	40008000 	.word	0x40008000
 8006574:	40013800 	.word	0x40013800
 8006578:	40021000 	.word	0x40021000
 800657c:	40004400 	.word	0x40004400
 8006580:	40004800 	.word	0x40004800
 8006584:	40004c00 	.word	0x40004c00
 8006588:	40005000 	.word	0x40005000
 800658c:	2310      	movs	r3, #16
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a9f      	ldr	r2, [pc, #636]	; (8006814 <UART_SetConfig+0x568>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d17a      	bne.n	8006692 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800659c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d824      	bhi.n	80065ee <UART_SetConfig+0x342>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <UART_SetConfig+0x300>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065ef 	.word	0x080065ef
 80065b4:	080065d9 	.word	0x080065d9
 80065b8:	080065ef 	.word	0x080065ef
 80065bc:	080065df 	.word	0x080065df
 80065c0:	080065ef 	.word	0x080065ef
 80065c4:	080065ef 	.word	0x080065ef
 80065c8:	080065ef 	.word	0x080065ef
 80065cc:	080065e7 	.word	0x080065e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d0:	f7fe ffcc 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 80065d4:	61f8      	str	r0, [r7, #28]
        break;
 80065d6:	e010      	b.n	80065fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d8:	4b8f      	ldr	r3, [pc, #572]	; (8006818 <UART_SetConfig+0x56c>)
 80065da:	61fb      	str	r3, [r7, #28]
        break;
 80065dc:	e00d      	b.n	80065fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065de:	f7fe ff2d 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80065e2:	61f8      	str	r0, [r7, #28]
        break;
 80065e4:	e009      	b.n	80065fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ea:	61fb      	str	r3, [r7, #28]
        break;
 80065ec:	e005      	b.n	80065fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80fb 	beq.w	80067f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	4413      	add	r3, r2
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	429a      	cmp	r2, r3
 8006610:	d305      	bcc.n	800661e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	429a      	cmp	r2, r3
 800661c:	d903      	bls.n	8006626 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006624:	e0e8      	b.n	80067f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	2200      	movs	r2, #0
 800662a:	461c      	mov	r4, r3
 800662c:	4615      	mov	r5, r2
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	022b      	lsls	r3, r5, #8
 8006638:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800663c:	0222      	lsls	r2, r4, #8
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	6849      	ldr	r1, [r1, #4]
 8006642:	0849      	lsrs	r1, r1, #1
 8006644:	2000      	movs	r0, #0
 8006646:	4688      	mov	r8, r1
 8006648:	4681      	mov	r9, r0
 800664a:	eb12 0a08 	adds.w	sl, r2, r8
 800664e:	eb43 0b09 	adc.w	fp, r3, r9
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006660:	4650      	mov	r0, sl
 8006662:	4659      	mov	r1, fp
 8006664:	f7fa faf0 	bl	8000c48 <__aeabi_uldivmod>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4613      	mov	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006676:	d308      	bcc.n	800668a <UART_SetConfig+0x3de>
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800667e:	d204      	bcs.n	800668a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	60da      	str	r2, [r3, #12]
 8006688:	e0b6      	b.n	80067f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006690:	e0b2      	b.n	80067f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800669a:	d15e      	bne.n	800675a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800669c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d828      	bhi.n	80066f6 <UART_SetConfig+0x44a>
 80066a4:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <UART_SetConfig+0x400>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080066d1 	.word	0x080066d1
 80066b0:	080066d9 	.word	0x080066d9
 80066b4:	080066e1 	.word	0x080066e1
 80066b8:	080066f7 	.word	0x080066f7
 80066bc:	080066e7 	.word	0x080066e7
 80066c0:	080066f7 	.word	0x080066f7
 80066c4:	080066f7 	.word	0x080066f7
 80066c8:	080066f7 	.word	0x080066f7
 80066cc:	080066ef 	.word	0x080066ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d0:	f7fe ff4c 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 80066d4:	61f8      	str	r0, [r7, #28]
        break;
 80066d6:	e014      	b.n	8006702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d8:	f7fe ff5e 	bl	8005598 <HAL_RCC_GetPCLK2Freq>
 80066dc:	61f8      	str	r0, [r7, #28]
        break;
 80066de:	e010      	b.n	8006702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e0:	4b4d      	ldr	r3, [pc, #308]	; (8006818 <UART_SetConfig+0x56c>)
 80066e2:	61fb      	str	r3, [r7, #28]
        break;
 80066e4:	e00d      	b.n	8006702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066e6:	f7fe fea9 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80066ea:	61f8      	str	r0, [r7, #28]
        break;
 80066ec:	e009      	b.n	8006702 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f2:	61fb      	str	r3, [r7, #28]
        break;
 80066f4:	e005      	b.n	8006702 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d077      	beq.n	80067f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	005a      	lsls	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	441a      	add	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b0f      	cmp	r3, #15
 8006722:	d916      	bls.n	8006752 <UART_SetConfig+0x4a6>
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800672a:	d212      	bcs.n	8006752 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f023 030f 	bic.w	r3, r3, #15
 8006734:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	b29b      	uxth	r3, r3
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	b29a      	uxth	r2, r3
 8006742:	8afb      	ldrh	r3, [r7, #22]
 8006744:	4313      	orrs	r3, r2
 8006746:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	8afa      	ldrh	r2, [r7, #22]
 800674e:	60da      	str	r2, [r3, #12]
 8006750:	e052      	b.n	80067f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006758:	e04e      	b.n	80067f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800675a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800675e:	2b08      	cmp	r3, #8
 8006760:	d827      	bhi.n	80067b2 <UART_SetConfig+0x506>
 8006762:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <UART_SetConfig+0x4bc>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	0800678d 	.word	0x0800678d
 800676c:	08006795 	.word	0x08006795
 8006770:	0800679d 	.word	0x0800679d
 8006774:	080067b3 	.word	0x080067b3
 8006778:	080067a3 	.word	0x080067a3
 800677c:	080067b3 	.word	0x080067b3
 8006780:	080067b3 	.word	0x080067b3
 8006784:	080067b3 	.word	0x080067b3
 8006788:	080067ab 	.word	0x080067ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800678c:	f7fe feee 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8006790:	61f8      	str	r0, [r7, #28]
        break;
 8006792:	e014      	b.n	80067be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006794:	f7fe ff00 	bl	8005598 <HAL_RCC_GetPCLK2Freq>
 8006798:	61f8      	str	r0, [r7, #28]
        break;
 800679a:	e010      	b.n	80067be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800679c:	4b1e      	ldr	r3, [pc, #120]	; (8006818 <UART_SetConfig+0x56c>)
 800679e:	61fb      	str	r3, [r7, #28]
        break;
 80067a0:	e00d      	b.n	80067be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067a2:	f7fe fe4b 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80067a6:	61f8      	str	r0, [r7, #28]
        break;
 80067a8:	e009      	b.n	80067be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ae:	61fb      	str	r3, [r7, #28]
        break;
 80067b0:	e005      	b.n	80067be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067bc:	bf00      	nop
    }

    if (pclk != 0U)
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d019      	beq.n	80067f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	085a      	lsrs	r2, r3, #1
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	441a      	add	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b0f      	cmp	r3, #15
 80067dc:	d909      	bls.n	80067f2 <UART_SetConfig+0x546>
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e4:	d205      	bcs.n	80067f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60da      	str	r2, [r3, #12]
 80067f0:	e002      	b.n	80067f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006804:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006808:	4618      	mov	r0, r3
 800680a:	3728      	adds	r7, #40	; 0x28
 800680c:	46bd      	mov	sp, r7
 800680e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006812:	bf00      	nop
 8006814:	40008000 	.word	0x40008000
 8006818:	00f42400 	.word	0x00f42400

0800681c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01a      	beq.n	8006932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800691a:	d10a      	bne.n	8006932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
  }
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af02      	add	r7, sp, #8
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006970:	f7fc fd50 	bl	8003414 <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b08      	cmp	r3, #8
 8006982:	d10e      	bne.n	80069a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f82d 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e023      	b.n	80069ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d10e      	bne.n	80069ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f817 	bl	80069f2 <UART_WaitOnFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e00d      	b.n	80069ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b09c      	sub	sp, #112	; 0x70
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	4613      	mov	r3, r2
 8006a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a02:	e0a5      	b.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	f000 80a1 	beq.w	8006b50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0e:	f7fc fd01 	bl	8003414 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d302      	bcc.n	8006a24 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d13e      	bne.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2c:	e853 3f00 	ldrex	r3, [r3]
 8006a30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a38:	667b      	str	r3, [r7, #100]	; 0x64
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a44:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e6      	bne.n	8006a24 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3308      	adds	r3, #8
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3308      	adds	r3, #8
 8006a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a76:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e067      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d04f      	beq.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006abe:	d147      	bne.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ac8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ade:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e6      	bne.n	8006aca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f023 0301 	bic.w	r3, r3, #1
 8006b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b1c:	623a      	str	r2, [r7, #32]
 8006b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	69f9      	ldr	r1, [r7, #28]
 8006b22:	6a3a      	ldr	r2, [r7, #32]
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e5      	bne.n	8006afc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e010      	b.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	bf0c      	ite	eq
 8006b60:	2301      	moveq	r3, #1
 8006b62:	2300      	movne	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	f43f af4a 	beq.w	8006a04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3770      	adds	r7, #112	; 0x70
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b096      	sub	sp, #88	; 0x58
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	88fa      	ldrh	r2, [r7, #6]
 8006b94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2222      	movs	r2, #34	; 0x22
 8006ba4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d02b      	beq.n	8006c06 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	4a42      	ldr	r2, [pc, #264]	; (8006cbc <UART_Start_Receive_DMA+0x140>)
 8006bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	4a41      	ldr	r2, [pc, #260]	; (8006cc0 <UART_Start_Receive_DMA+0x144>)
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc2:	4a40      	ldr	r2, [pc, #256]	; (8006cc4 <UART_Start_Receive_DMA+0x148>)
 8006bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bca:	2200      	movs	r2, #0
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	4619      	mov	r1, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bde:	461a      	mov	r2, r3
 8006be0:	88fb      	ldrh	r3, [r7, #6]
 8006be2:	f7fc fded 	bl	80037c0 <HAL_DMA_Start_IT>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00c      	beq.n	8006c06 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2210      	movs	r2, #16
 8006bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e055      	b.n	8006cb2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d018      	beq.n	8006c48 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c36:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e6      	bne.n	8006c16 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3308      	adds	r3, #8
 8006c66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c68:	637a      	str	r2, [r7, #52]	; 0x34
 8006c6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c70:	e841 2300 	strex	r3, r2, [r1]
 8006c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e5      	bne.n	8006c48 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3308      	adds	r3, #8
 8006c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3308      	adds	r3, #8
 8006c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c9c:	623a      	str	r2, [r7, #32]
 8006c9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	69f9      	ldr	r1, [r7, #28]
 8006ca2:	6a3a      	ldr	r2, [r7, #32]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e5      	bne.n	8006c7c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3758      	adds	r7, #88	; 0x58
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	08006ddb 	.word	0x08006ddb
 8006cc0:	08006eff 	.word	0x08006eff
 8006cc4:	08006f37 	.word	0x08006f37

08006cc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b089      	sub	sp, #36	; 0x24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6979      	ldr	r1, [r7, #20]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e6      	bne.n	8006cd0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006d08:	bf00      	nop
 8006d0a:	3724      	adds	r7, #36	; 0x24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b095      	sub	sp, #84	; 0x54
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e6      	bne.n	8006d1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3308      	adds	r3, #8
 8006d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f023 0301 	bic.w	r3, r3, #1
 8006d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3308      	adds	r3, #8
 8006d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e5      	bne.n	8006d4e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d118      	bne.n	8006dbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f023 0310 	bic.w	r3, r3, #16
 8006d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6979      	ldr	r1, [r7, #20]
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	613b      	str	r3, [r7, #16]
   return(result);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e6      	bne.n	8006d8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006dce:	bf00      	nop
 8006dd0:	3754      	adds	r7, #84	; 0x54
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b09c      	sub	sp, #112	; 0x70
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d170      	bne.n	8006ed8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8006df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e6      	bne.n	8006dfe <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3308      	adds	r3, #8
 8006e36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	e853 3f00 	ldrex	r3, [r3]
 8006e3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e42:	f023 0301 	bic.w	r3, r3, #1
 8006e46:	667b      	str	r3, [r7, #100]	; 0x64
 8006e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e50:	647a      	str	r2, [r7, #68]	; 0x44
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e5      	bne.n	8006e30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3308      	adds	r3, #8
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	623b      	str	r3, [r7, #32]
   return(result);
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3308      	adds	r3, #8
 8006e82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e84:	633a      	str	r2, [r7, #48]	; 0x30
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e5      	bne.n	8006e64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d118      	bne.n	8006ed8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0310 	bic.w	r3, r3, #16
 8006eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	69b9      	ldr	r1, [r7, #24]
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e6      	bne.n	8006ea6 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d107      	bne.n	8006ef0 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006eea:	f7ff f9d3 	bl	8006294 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eee:	e002      	b.n	8006ef6 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8006ef0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006ef2:	f7fb fc9f 	bl	8002834 <HAL_UART_RxCpltCallback>
}
 8006ef6:	bf00      	nop
 8006ef8:	3770      	adds	r7, #112	; 0x70
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d109      	bne.n	8006f28 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff f9b7 	bl	8006294 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f26:	e002      	b.n	8006f2e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff f99f 	bl	800626c <HAL_UART_RxHalfCpltCallback>
}
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b086      	sub	sp, #24
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f48:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b80      	cmp	r3, #128	; 0x80
 8006f5c:	d109      	bne.n	8006f72 <UART_DMAError+0x3c>
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b21      	cmp	r3, #33	; 0x21
 8006f62:	d106      	bne.n	8006f72 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006f6c:	6978      	ldr	r0, [r7, #20]
 8006f6e:	f7ff feab 	bl	8006cc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d109      	bne.n	8006f94 <UART_DMAError+0x5e>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b22      	cmp	r3, #34	; 0x22
 8006f84:	d106      	bne.n	8006f94 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006f8e:	6978      	ldr	r0, [r7, #20]
 8006f90:	f7ff fec0 	bl	8006d14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f9a:	f043 0210 	orr.w	r2, r3, #16
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa4:	6978      	ldr	r0, [r7, #20]
 8006fa6:	f7ff f96b 	bl	8006280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006faa:	bf00      	nop
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <__errno>:
 8006fb4:	4b01      	ldr	r3, [pc, #4]	; (8006fbc <__errno+0x8>)
 8006fb6:	6818      	ldr	r0, [r3, #0]
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000010 	.word	0x20000010

08006fc0 <__libc_init_array>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	4d0d      	ldr	r5, [pc, #52]	; (8006ff8 <__libc_init_array+0x38>)
 8006fc4:	4c0d      	ldr	r4, [pc, #52]	; (8006ffc <__libc_init_array+0x3c>)
 8006fc6:	1b64      	subs	r4, r4, r5
 8006fc8:	10a4      	asrs	r4, r4, #2
 8006fca:	2600      	movs	r6, #0
 8006fcc:	42a6      	cmp	r6, r4
 8006fce:	d109      	bne.n	8006fe4 <__libc_init_array+0x24>
 8006fd0:	4d0b      	ldr	r5, [pc, #44]	; (8007000 <__libc_init_array+0x40>)
 8006fd2:	4c0c      	ldr	r4, [pc, #48]	; (8007004 <__libc_init_array+0x44>)
 8006fd4:	f002 ff4c 	bl	8009e70 <_init>
 8006fd8:	1b64      	subs	r4, r4, r5
 8006fda:	10a4      	asrs	r4, r4, #2
 8006fdc:	2600      	movs	r6, #0
 8006fde:	42a6      	cmp	r6, r4
 8006fe0:	d105      	bne.n	8006fee <__libc_init_array+0x2e>
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe8:	4798      	blx	r3
 8006fea:	3601      	adds	r6, #1
 8006fec:	e7ee      	b.n	8006fcc <__libc_init_array+0xc>
 8006fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff2:	4798      	blx	r3
 8006ff4:	3601      	adds	r6, #1
 8006ff6:	e7f2      	b.n	8006fde <__libc_init_array+0x1e>
 8006ff8:	0800a4b4 	.word	0x0800a4b4
 8006ffc:	0800a4b4 	.word	0x0800a4b4
 8007000:	0800a4b4 	.word	0x0800a4b4
 8007004:	0800a4b8 	.word	0x0800a4b8

08007008 <memset>:
 8007008:	4402      	add	r2, r0
 800700a:	4603      	mov	r3, r0
 800700c:	4293      	cmp	r3, r2
 800700e:	d100      	bne.n	8007012 <memset+0xa>
 8007010:	4770      	bx	lr
 8007012:	f803 1b01 	strb.w	r1, [r3], #1
 8007016:	e7f9      	b.n	800700c <memset+0x4>

08007018 <__cvt>:
 8007018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800701c:	ec55 4b10 	vmov	r4, r5, d0
 8007020:	2d00      	cmp	r5, #0
 8007022:	460e      	mov	r6, r1
 8007024:	4619      	mov	r1, r3
 8007026:	462b      	mov	r3, r5
 8007028:	bfbb      	ittet	lt
 800702a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800702e:	461d      	movlt	r5, r3
 8007030:	2300      	movge	r3, #0
 8007032:	232d      	movlt	r3, #45	; 0x2d
 8007034:	700b      	strb	r3, [r1, #0]
 8007036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007038:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800703c:	4691      	mov	r9, r2
 800703e:	f023 0820 	bic.w	r8, r3, #32
 8007042:	bfbc      	itt	lt
 8007044:	4622      	movlt	r2, r4
 8007046:	4614      	movlt	r4, r2
 8007048:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800704c:	d005      	beq.n	800705a <__cvt+0x42>
 800704e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007052:	d100      	bne.n	8007056 <__cvt+0x3e>
 8007054:	3601      	adds	r6, #1
 8007056:	2102      	movs	r1, #2
 8007058:	e000      	b.n	800705c <__cvt+0x44>
 800705a:	2103      	movs	r1, #3
 800705c:	ab03      	add	r3, sp, #12
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	ab02      	add	r3, sp, #8
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	ec45 4b10 	vmov	d0, r4, r5
 8007068:	4653      	mov	r3, sl
 800706a:	4632      	mov	r2, r6
 800706c:	f000 fd34 	bl	8007ad8 <_dtoa_r>
 8007070:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007074:	4607      	mov	r7, r0
 8007076:	d102      	bne.n	800707e <__cvt+0x66>
 8007078:	f019 0f01 	tst.w	r9, #1
 800707c:	d022      	beq.n	80070c4 <__cvt+0xac>
 800707e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007082:	eb07 0906 	add.w	r9, r7, r6
 8007086:	d110      	bne.n	80070aa <__cvt+0x92>
 8007088:	783b      	ldrb	r3, [r7, #0]
 800708a:	2b30      	cmp	r3, #48	; 0x30
 800708c:	d10a      	bne.n	80070a4 <__cvt+0x8c>
 800708e:	2200      	movs	r2, #0
 8007090:	2300      	movs	r3, #0
 8007092:	4620      	mov	r0, r4
 8007094:	4629      	mov	r1, r5
 8007096:	f7f9 fd17 	bl	8000ac8 <__aeabi_dcmpeq>
 800709a:	b918      	cbnz	r0, 80070a4 <__cvt+0x8c>
 800709c:	f1c6 0601 	rsb	r6, r6, #1
 80070a0:	f8ca 6000 	str.w	r6, [sl]
 80070a4:	f8da 3000 	ldr.w	r3, [sl]
 80070a8:	4499      	add	r9, r3
 80070aa:	2200      	movs	r2, #0
 80070ac:	2300      	movs	r3, #0
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7f9 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80070b6:	b108      	cbz	r0, 80070bc <__cvt+0xa4>
 80070b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80070bc:	2230      	movs	r2, #48	; 0x30
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	454b      	cmp	r3, r9
 80070c2:	d307      	bcc.n	80070d4 <__cvt+0xbc>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070c8:	1bdb      	subs	r3, r3, r7
 80070ca:	4638      	mov	r0, r7
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	b004      	add	sp, #16
 80070d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d4:	1c59      	adds	r1, r3, #1
 80070d6:	9103      	str	r1, [sp, #12]
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	e7f0      	b.n	80070be <__cvt+0xa6>

080070dc <__exponent>:
 80070dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070de:	4603      	mov	r3, r0
 80070e0:	2900      	cmp	r1, #0
 80070e2:	bfb8      	it	lt
 80070e4:	4249      	neglt	r1, r1
 80070e6:	f803 2b02 	strb.w	r2, [r3], #2
 80070ea:	bfb4      	ite	lt
 80070ec:	222d      	movlt	r2, #45	; 0x2d
 80070ee:	222b      	movge	r2, #43	; 0x2b
 80070f0:	2909      	cmp	r1, #9
 80070f2:	7042      	strb	r2, [r0, #1]
 80070f4:	dd2a      	ble.n	800714c <__exponent+0x70>
 80070f6:	f10d 0407 	add.w	r4, sp, #7
 80070fa:	46a4      	mov	ip, r4
 80070fc:	270a      	movs	r7, #10
 80070fe:	46a6      	mov	lr, r4
 8007100:	460a      	mov	r2, r1
 8007102:	fb91 f6f7 	sdiv	r6, r1, r7
 8007106:	fb07 1516 	mls	r5, r7, r6, r1
 800710a:	3530      	adds	r5, #48	; 0x30
 800710c:	2a63      	cmp	r2, #99	; 0x63
 800710e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007112:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007116:	4631      	mov	r1, r6
 8007118:	dcf1      	bgt.n	80070fe <__exponent+0x22>
 800711a:	3130      	adds	r1, #48	; 0x30
 800711c:	f1ae 0502 	sub.w	r5, lr, #2
 8007120:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007124:	1c44      	adds	r4, r0, #1
 8007126:	4629      	mov	r1, r5
 8007128:	4561      	cmp	r1, ip
 800712a:	d30a      	bcc.n	8007142 <__exponent+0x66>
 800712c:	f10d 0209 	add.w	r2, sp, #9
 8007130:	eba2 020e 	sub.w	r2, r2, lr
 8007134:	4565      	cmp	r5, ip
 8007136:	bf88      	it	hi
 8007138:	2200      	movhi	r2, #0
 800713a:	4413      	add	r3, r2
 800713c:	1a18      	subs	r0, r3, r0
 800713e:	b003      	add	sp, #12
 8007140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007146:	f804 2f01 	strb.w	r2, [r4, #1]!
 800714a:	e7ed      	b.n	8007128 <__exponent+0x4c>
 800714c:	2330      	movs	r3, #48	; 0x30
 800714e:	3130      	adds	r1, #48	; 0x30
 8007150:	7083      	strb	r3, [r0, #2]
 8007152:	70c1      	strb	r1, [r0, #3]
 8007154:	1d03      	adds	r3, r0, #4
 8007156:	e7f1      	b.n	800713c <__exponent+0x60>

08007158 <_printf_float>:
 8007158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	ed2d 8b02 	vpush	{d8}
 8007160:	b08d      	sub	sp, #52	; 0x34
 8007162:	460c      	mov	r4, r1
 8007164:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007168:	4616      	mov	r6, r2
 800716a:	461f      	mov	r7, r3
 800716c:	4605      	mov	r5, r0
 800716e:	f001 faa1 	bl	80086b4 <_localeconv_r>
 8007172:	f8d0 a000 	ldr.w	sl, [r0]
 8007176:	4650      	mov	r0, sl
 8007178:	f7f9 f82a 	bl	80001d0 <strlen>
 800717c:	2300      	movs	r3, #0
 800717e:	930a      	str	r3, [sp, #40]	; 0x28
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	f8d8 3000 	ldr.w	r3, [r8]
 8007188:	f894 b018 	ldrb.w	fp, [r4, #24]
 800718c:	3307      	adds	r3, #7
 800718e:	f023 0307 	bic.w	r3, r3, #7
 8007192:	f103 0208 	add.w	r2, r3, #8
 8007196:	f8c8 2000 	str.w	r2, [r8]
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071aa:	9307      	str	r3, [sp, #28]
 80071ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80071b0:	ee08 0a10 	vmov	s16, r0
 80071b4:	4b9f      	ldr	r3, [pc, #636]	; (8007434 <_printf_float+0x2dc>)
 80071b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295
 80071be:	f7f9 fcb5 	bl	8000b2c <__aeabi_dcmpun>
 80071c2:	bb88      	cbnz	r0, 8007228 <_printf_float+0xd0>
 80071c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071c8:	4b9a      	ldr	r3, [pc, #616]	; (8007434 <_printf_float+0x2dc>)
 80071ca:	f04f 32ff 	mov.w	r2, #4294967295
 80071ce:	f7f9 fc8f 	bl	8000af0 <__aeabi_dcmple>
 80071d2:	bb48      	cbnz	r0, 8007228 <_printf_float+0xd0>
 80071d4:	2200      	movs	r2, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	4640      	mov	r0, r8
 80071da:	4649      	mov	r1, r9
 80071dc:	f7f9 fc7e 	bl	8000adc <__aeabi_dcmplt>
 80071e0:	b110      	cbz	r0, 80071e8 <_printf_float+0x90>
 80071e2:	232d      	movs	r3, #45	; 0x2d
 80071e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071e8:	4b93      	ldr	r3, [pc, #588]	; (8007438 <_printf_float+0x2e0>)
 80071ea:	4894      	ldr	r0, [pc, #592]	; (800743c <_printf_float+0x2e4>)
 80071ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071f0:	bf94      	ite	ls
 80071f2:	4698      	movls	r8, r3
 80071f4:	4680      	movhi	r8, r0
 80071f6:	2303      	movs	r3, #3
 80071f8:	6123      	str	r3, [r4, #16]
 80071fa:	9b05      	ldr	r3, [sp, #20]
 80071fc:	f023 0204 	bic.w	r2, r3, #4
 8007200:	6022      	str	r2, [r4, #0]
 8007202:	f04f 0900 	mov.w	r9, #0
 8007206:	9700      	str	r7, [sp, #0]
 8007208:	4633      	mov	r3, r6
 800720a:	aa0b      	add	r2, sp, #44	; 0x2c
 800720c:	4621      	mov	r1, r4
 800720e:	4628      	mov	r0, r5
 8007210:	f000 f9d8 	bl	80075c4 <_printf_common>
 8007214:	3001      	adds	r0, #1
 8007216:	f040 8090 	bne.w	800733a <_printf_float+0x1e2>
 800721a:	f04f 30ff 	mov.w	r0, #4294967295
 800721e:	b00d      	add	sp, #52	; 0x34
 8007220:	ecbd 8b02 	vpop	{d8}
 8007224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007228:	4642      	mov	r2, r8
 800722a:	464b      	mov	r3, r9
 800722c:	4640      	mov	r0, r8
 800722e:	4649      	mov	r1, r9
 8007230:	f7f9 fc7c 	bl	8000b2c <__aeabi_dcmpun>
 8007234:	b140      	cbz	r0, 8007248 <_printf_float+0xf0>
 8007236:	464b      	mov	r3, r9
 8007238:	2b00      	cmp	r3, #0
 800723a:	bfbc      	itt	lt
 800723c:	232d      	movlt	r3, #45	; 0x2d
 800723e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007242:	487f      	ldr	r0, [pc, #508]	; (8007440 <_printf_float+0x2e8>)
 8007244:	4b7f      	ldr	r3, [pc, #508]	; (8007444 <_printf_float+0x2ec>)
 8007246:	e7d1      	b.n	80071ec <_printf_float+0x94>
 8007248:	6863      	ldr	r3, [r4, #4]
 800724a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800724e:	9206      	str	r2, [sp, #24]
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	d13f      	bne.n	80072d4 <_printf_float+0x17c>
 8007254:	2306      	movs	r3, #6
 8007256:	6063      	str	r3, [r4, #4]
 8007258:	9b05      	ldr	r3, [sp, #20]
 800725a:	6861      	ldr	r1, [r4, #4]
 800725c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007260:	2300      	movs	r3, #0
 8007262:	9303      	str	r3, [sp, #12]
 8007264:	ab0a      	add	r3, sp, #40	; 0x28
 8007266:	e9cd b301 	strd	fp, r3, [sp, #4]
 800726a:	ab09      	add	r3, sp, #36	; 0x24
 800726c:	ec49 8b10 	vmov	d0, r8, r9
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	6022      	str	r2, [r4, #0]
 8007274:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007278:	4628      	mov	r0, r5
 800727a:	f7ff fecd 	bl	8007018 <__cvt>
 800727e:	9b06      	ldr	r3, [sp, #24]
 8007280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007282:	2b47      	cmp	r3, #71	; 0x47
 8007284:	4680      	mov	r8, r0
 8007286:	d108      	bne.n	800729a <_printf_float+0x142>
 8007288:	1cc8      	adds	r0, r1, #3
 800728a:	db02      	blt.n	8007292 <_printf_float+0x13a>
 800728c:	6863      	ldr	r3, [r4, #4]
 800728e:	4299      	cmp	r1, r3
 8007290:	dd41      	ble.n	8007316 <_printf_float+0x1be>
 8007292:	f1ab 0b02 	sub.w	fp, fp, #2
 8007296:	fa5f fb8b 	uxtb.w	fp, fp
 800729a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800729e:	d820      	bhi.n	80072e2 <_printf_float+0x18a>
 80072a0:	3901      	subs	r1, #1
 80072a2:	465a      	mov	r2, fp
 80072a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072a8:	9109      	str	r1, [sp, #36]	; 0x24
 80072aa:	f7ff ff17 	bl	80070dc <__exponent>
 80072ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072b0:	1813      	adds	r3, r2, r0
 80072b2:	2a01      	cmp	r2, #1
 80072b4:	4681      	mov	r9, r0
 80072b6:	6123      	str	r3, [r4, #16]
 80072b8:	dc02      	bgt.n	80072c0 <_printf_float+0x168>
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	07d2      	lsls	r2, r2, #31
 80072be:	d501      	bpl.n	80072c4 <_printf_float+0x16c>
 80072c0:	3301      	adds	r3, #1
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d09c      	beq.n	8007206 <_printf_float+0xae>
 80072cc:	232d      	movs	r3, #45	; 0x2d
 80072ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d2:	e798      	b.n	8007206 <_printf_float+0xae>
 80072d4:	9a06      	ldr	r2, [sp, #24]
 80072d6:	2a47      	cmp	r2, #71	; 0x47
 80072d8:	d1be      	bne.n	8007258 <_printf_float+0x100>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1bc      	bne.n	8007258 <_printf_float+0x100>
 80072de:	2301      	movs	r3, #1
 80072e0:	e7b9      	b.n	8007256 <_printf_float+0xfe>
 80072e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072e6:	d118      	bne.n	800731a <_printf_float+0x1c2>
 80072e8:	2900      	cmp	r1, #0
 80072ea:	6863      	ldr	r3, [r4, #4]
 80072ec:	dd0b      	ble.n	8007306 <_printf_float+0x1ae>
 80072ee:	6121      	str	r1, [r4, #16]
 80072f0:	b913      	cbnz	r3, 80072f8 <_printf_float+0x1a0>
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	07d0      	lsls	r0, r2, #31
 80072f6:	d502      	bpl.n	80072fe <_printf_float+0x1a6>
 80072f8:	3301      	adds	r3, #1
 80072fa:	440b      	add	r3, r1
 80072fc:	6123      	str	r3, [r4, #16]
 80072fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007300:	f04f 0900 	mov.w	r9, #0
 8007304:	e7de      	b.n	80072c4 <_printf_float+0x16c>
 8007306:	b913      	cbnz	r3, 800730e <_printf_float+0x1b6>
 8007308:	6822      	ldr	r2, [r4, #0]
 800730a:	07d2      	lsls	r2, r2, #31
 800730c:	d501      	bpl.n	8007312 <_printf_float+0x1ba>
 800730e:	3302      	adds	r3, #2
 8007310:	e7f4      	b.n	80072fc <_printf_float+0x1a4>
 8007312:	2301      	movs	r3, #1
 8007314:	e7f2      	b.n	80072fc <_printf_float+0x1a4>
 8007316:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800731a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800731c:	4299      	cmp	r1, r3
 800731e:	db05      	blt.n	800732c <_printf_float+0x1d4>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	6121      	str	r1, [r4, #16]
 8007324:	07d8      	lsls	r0, r3, #31
 8007326:	d5ea      	bpl.n	80072fe <_printf_float+0x1a6>
 8007328:	1c4b      	adds	r3, r1, #1
 800732a:	e7e7      	b.n	80072fc <_printf_float+0x1a4>
 800732c:	2900      	cmp	r1, #0
 800732e:	bfd4      	ite	le
 8007330:	f1c1 0202 	rsble	r2, r1, #2
 8007334:	2201      	movgt	r2, #1
 8007336:	4413      	add	r3, r2
 8007338:	e7e0      	b.n	80072fc <_printf_float+0x1a4>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	055a      	lsls	r2, r3, #21
 800733e:	d407      	bmi.n	8007350 <_printf_float+0x1f8>
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	4642      	mov	r2, r8
 8007344:	4631      	mov	r1, r6
 8007346:	4628      	mov	r0, r5
 8007348:	47b8      	blx	r7
 800734a:	3001      	adds	r0, #1
 800734c:	d12c      	bne.n	80073a8 <_printf_float+0x250>
 800734e:	e764      	b.n	800721a <_printf_float+0xc2>
 8007350:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007354:	f240 80e0 	bls.w	8007518 <_printf_float+0x3c0>
 8007358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	f7f9 fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007364:	2800      	cmp	r0, #0
 8007366:	d034      	beq.n	80073d2 <_printf_float+0x27a>
 8007368:	4a37      	ldr	r2, [pc, #220]	; (8007448 <_printf_float+0x2f0>)
 800736a:	2301      	movs	r3, #1
 800736c:	4631      	mov	r1, r6
 800736e:	4628      	mov	r0, r5
 8007370:	47b8      	blx	r7
 8007372:	3001      	adds	r0, #1
 8007374:	f43f af51 	beq.w	800721a <_printf_float+0xc2>
 8007378:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800737c:	429a      	cmp	r2, r3
 800737e:	db02      	blt.n	8007386 <_printf_float+0x22e>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	07d8      	lsls	r0, r3, #31
 8007384:	d510      	bpl.n	80073a8 <_printf_float+0x250>
 8007386:	ee18 3a10 	vmov	r3, s16
 800738a:	4652      	mov	r2, sl
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	f43f af41 	beq.w	800721a <_printf_float+0xc2>
 8007398:	f04f 0800 	mov.w	r8, #0
 800739c:	f104 091a 	add.w	r9, r4, #26
 80073a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a2:	3b01      	subs	r3, #1
 80073a4:	4543      	cmp	r3, r8
 80073a6:	dc09      	bgt.n	80073bc <_printf_float+0x264>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	079b      	lsls	r3, r3, #30
 80073ac:	f100 8105 	bmi.w	80075ba <_printf_float+0x462>
 80073b0:	68e0      	ldr	r0, [r4, #12]
 80073b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073b4:	4298      	cmp	r0, r3
 80073b6:	bfb8      	it	lt
 80073b8:	4618      	movlt	r0, r3
 80073ba:	e730      	b.n	800721e <_printf_float+0xc6>
 80073bc:	2301      	movs	r3, #1
 80073be:	464a      	mov	r2, r9
 80073c0:	4631      	mov	r1, r6
 80073c2:	4628      	mov	r0, r5
 80073c4:	47b8      	blx	r7
 80073c6:	3001      	adds	r0, #1
 80073c8:	f43f af27 	beq.w	800721a <_printf_float+0xc2>
 80073cc:	f108 0801 	add.w	r8, r8, #1
 80073d0:	e7e6      	b.n	80073a0 <_printf_float+0x248>
 80073d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	dc39      	bgt.n	800744c <_printf_float+0x2f4>
 80073d8:	4a1b      	ldr	r2, [pc, #108]	; (8007448 <_printf_float+0x2f0>)
 80073da:	2301      	movs	r3, #1
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f af19 	beq.w	800721a <_printf_float+0xc2>
 80073e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ec:	4313      	orrs	r3, r2
 80073ee:	d102      	bne.n	80073f6 <_printf_float+0x29e>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	07d9      	lsls	r1, r3, #31
 80073f4:	d5d8      	bpl.n	80073a8 <_printf_float+0x250>
 80073f6:	ee18 3a10 	vmov	r3, s16
 80073fa:	4652      	mov	r2, sl
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f af09 	beq.w	800721a <_printf_float+0xc2>
 8007408:	f04f 0900 	mov.w	r9, #0
 800740c:	f104 0a1a 	add.w	sl, r4, #26
 8007410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007412:	425b      	negs	r3, r3
 8007414:	454b      	cmp	r3, r9
 8007416:	dc01      	bgt.n	800741c <_printf_float+0x2c4>
 8007418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741a:	e792      	b.n	8007342 <_printf_float+0x1ea>
 800741c:	2301      	movs	r3, #1
 800741e:	4652      	mov	r2, sl
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	47b8      	blx	r7
 8007426:	3001      	adds	r0, #1
 8007428:	f43f aef7 	beq.w	800721a <_printf_float+0xc2>
 800742c:	f109 0901 	add.w	r9, r9, #1
 8007430:	e7ee      	b.n	8007410 <_printf_float+0x2b8>
 8007432:	bf00      	nop
 8007434:	7fefffff 	.word	0x7fefffff
 8007438:	0800a0d8 	.word	0x0800a0d8
 800743c:	0800a0dc 	.word	0x0800a0dc
 8007440:	0800a0e4 	.word	0x0800a0e4
 8007444:	0800a0e0 	.word	0x0800a0e0
 8007448:	0800a0e8 	.word	0x0800a0e8
 800744c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800744e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007450:	429a      	cmp	r2, r3
 8007452:	bfa8      	it	ge
 8007454:	461a      	movge	r2, r3
 8007456:	2a00      	cmp	r2, #0
 8007458:	4691      	mov	r9, r2
 800745a:	dc37      	bgt.n	80074cc <_printf_float+0x374>
 800745c:	f04f 0b00 	mov.w	fp, #0
 8007460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007464:	f104 021a 	add.w	r2, r4, #26
 8007468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800746a:	9305      	str	r3, [sp, #20]
 800746c:	eba3 0309 	sub.w	r3, r3, r9
 8007470:	455b      	cmp	r3, fp
 8007472:	dc33      	bgt.n	80074dc <_printf_float+0x384>
 8007474:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007478:	429a      	cmp	r2, r3
 800747a:	db3b      	blt.n	80074f4 <_printf_float+0x39c>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	07da      	lsls	r2, r3, #31
 8007480:	d438      	bmi.n	80074f4 <_printf_float+0x39c>
 8007482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007484:	9a05      	ldr	r2, [sp, #20]
 8007486:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007488:	1a9a      	subs	r2, r3, r2
 800748a:	eba3 0901 	sub.w	r9, r3, r1
 800748e:	4591      	cmp	r9, r2
 8007490:	bfa8      	it	ge
 8007492:	4691      	movge	r9, r2
 8007494:	f1b9 0f00 	cmp.w	r9, #0
 8007498:	dc35      	bgt.n	8007506 <_printf_float+0x3ae>
 800749a:	f04f 0800 	mov.w	r8, #0
 800749e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074a2:	f104 0a1a 	add.w	sl, r4, #26
 80074a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074aa:	1a9b      	subs	r3, r3, r2
 80074ac:	eba3 0309 	sub.w	r3, r3, r9
 80074b0:	4543      	cmp	r3, r8
 80074b2:	f77f af79 	ble.w	80073a8 <_printf_float+0x250>
 80074b6:	2301      	movs	r3, #1
 80074b8:	4652      	mov	r2, sl
 80074ba:	4631      	mov	r1, r6
 80074bc:	4628      	mov	r0, r5
 80074be:	47b8      	blx	r7
 80074c0:	3001      	adds	r0, #1
 80074c2:	f43f aeaa 	beq.w	800721a <_printf_float+0xc2>
 80074c6:	f108 0801 	add.w	r8, r8, #1
 80074ca:	e7ec      	b.n	80074a6 <_printf_float+0x34e>
 80074cc:	4613      	mov	r3, r2
 80074ce:	4631      	mov	r1, r6
 80074d0:	4642      	mov	r2, r8
 80074d2:	4628      	mov	r0, r5
 80074d4:	47b8      	blx	r7
 80074d6:	3001      	adds	r0, #1
 80074d8:	d1c0      	bne.n	800745c <_printf_float+0x304>
 80074da:	e69e      	b.n	800721a <_printf_float+0xc2>
 80074dc:	2301      	movs	r3, #1
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	9205      	str	r2, [sp, #20]
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	f43f ae97 	beq.w	800721a <_printf_float+0xc2>
 80074ec:	9a05      	ldr	r2, [sp, #20]
 80074ee:	f10b 0b01 	add.w	fp, fp, #1
 80074f2:	e7b9      	b.n	8007468 <_printf_float+0x310>
 80074f4:	ee18 3a10 	vmov	r3, s16
 80074f8:	4652      	mov	r2, sl
 80074fa:	4631      	mov	r1, r6
 80074fc:	4628      	mov	r0, r5
 80074fe:	47b8      	blx	r7
 8007500:	3001      	adds	r0, #1
 8007502:	d1be      	bne.n	8007482 <_printf_float+0x32a>
 8007504:	e689      	b.n	800721a <_printf_float+0xc2>
 8007506:	9a05      	ldr	r2, [sp, #20]
 8007508:	464b      	mov	r3, r9
 800750a:	4442      	add	r2, r8
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	d1c1      	bne.n	800749a <_printf_float+0x342>
 8007516:	e680      	b.n	800721a <_printf_float+0xc2>
 8007518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800751a:	2a01      	cmp	r2, #1
 800751c:	dc01      	bgt.n	8007522 <_printf_float+0x3ca>
 800751e:	07db      	lsls	r3, r3, #31
 8007520:	d538      	bpl.n	8007594 <_printf_float+0x43c>
 8007522:	2301      	movs	r3, #1
 8007524:	4642      	mov	r2, r8
 8007526:	4631      	mov	r1, r6
 8007528:	4628      	mov	r0, r5
 800752a:	47b8      	blx	r7
 800752c:	3001      	adds	r0, #1
 800752e:	f43f ae74 	beq.w	800721a <_printf_float+0xc2>
 8007532:	ee18 3a10 	vmov	r3, s16
 8007536:	4652      	mov	r2, sl
 8007538:	4631      	mov	r1, r6
 800753a:	4628      	mov	r0, r5
 800753c:	47b8      	blx	r7
 800753e:	3001      	adds	r0, #1
 8007540:	f43f ae6b 	beq.w	800721a <_printf_float+0xc2>
 8007544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007548:	2200      	movs	r2, #0
 800754a:	2300      	movs	r3, #0
 800754c:	f7f9 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007550:	b9d8      	cbnz	r0, 800758a <_printf_float+0x432>
 8007552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007554:	f108 0201 	add.w	r2, r8, #1
 8007558:	3b01      	subs	r3, #1
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	d10e      	bne.n	8007582 <_printf_float+0x42a>
 8007564:	e659      	b.n	800721a <_printf_float+0xc2>
 8007566:	2301      	movs	r3, #1
 8007568:	4652      	mov	r2, sl
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	47b8      	blx	r7
 8007570:	3001      	adds	r0, #1
 8007572:	f43f ae52 	beq.w	800721a <_printf_float+0xc2>
 8007576:	f108 0801 	add.w	r8, r8, #1
 800757a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800757c:	3b01      	subs	r3, #1
 800757e:	4543      	cmp	r3, r8
 8007580:	dcf1      	bgt.n	8007566 <_printf_float+0x40e>
 8007582:	464b      	mov	r3, r9
 8007584:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007588:	e6dc      	b.n	8007344 <_printf_float+0x1ec>
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	f104 0a1a 	add.w	sl, r4, #26
 8007592:	e7f2      	b.n	800757a <_printf_float+0x422>
 8007594:	2301      	movs	r3, #1
 8007596:	4642      	mov	r2, r8
 8007598:	e7df      	b.n	800755a <_printf_float+0x402>
 800759a:	2301      	movs	r3, #1
 800759c:	464a      	mov	r2, r9
 800759e:	4631      	mov	r1, r6
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b8      	blx	r7
 80075a4:	3001      	adds	r0, #1
 80075a6:	f43f ae38 	beq.w	800721a <_printf_float+0xc2>
 80075aa:	f108 0801 	add.w	r8, r8, #1
 80075ae:	68e3      	ldr	r3, [r4, #12]
 80075b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075b2:	1a5b      	subs	r3, r3, r1
 80075b4:	4543      	cmp	r3, r8
 80075b6:	dcf0      	bgt.n	800759a <_printf_float+0x442>
 80075b8:	e6fa      	b.n	80073b0 <_printf_float+0x258>
 80075ba:	f04f 0800 	mov.w	r8, #0
 80075be:	f104 0919 	add.w	r9, r4, #25
 80075c2:	e7f4      	b.n	80075ae <_printf_float+0x456>

080075c4 <_printf_common>:
 80075c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	4616      	mov	r6, r2
 80075ca:	4699      	mov	r9, r3
 80075cc:	688a      	ldr	r2, [r1, #8]
 80075ce:	690b      	ldr	r3, [r1, #16]
 80075d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075d4:	4293      	cmp	r3, r2
 80075d6:	bfb8      	it	lt
 80075d8:	4613      	movlt	r3, r2
 80075da:	6033      	str	r3, [r6, #0]
 80075dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075e0:	4607      	mov	r7, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	b10a      	cbz	r2, 80075ea <_printf_common+0x26>
 80075e6:	3301      	adds	r3, #1
 80075e8:	6033      	str	r3, [r6, #0]
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	0699      	lsls	r1, r3, #26
 80075ee:	bf42      	ittt	mi
 80075f0:	6833      	ldrmi	r3, [r6, #0]
 80075f2:	3302      	addmi	r3, #2
 80075f4:	6033      	strmi	r3, [r6, #0]
 80075f6:	6825      	ldr	r5, [r4, #0]
 80075f8:	f015 0506 	ands.w	r5, r5, #6
 80075fc:	d106      	bne.n	800760c <_printf_common+0x48>
 80075fe:	f104 0a19 	add.w	sl, r4, #25
 8007602:	68e3      	ldr	r3, [r4, #12]
 8007604:	6832      	ldr	r2, [r6, #0]
 8007606:	1a9b      	subs	r3, r3, r2
 8007608:	42ab      	cmp	r3, r5
 800760a:	dc26      	bgt.n	800765a <_printf_common+0x96>
 800760c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007610:	1e13      	subs	r3, r2, #0
 8007612:	6822      	ldr	r2, [r4, #0]
 8007614:	bf18      	it	ne
 8007616:	2301      	movne	r3, #1
 8007618:	0692      	lsls	r2, r2, #26
 800761a:	d42b      	bmi.n	8007674 <_printf_common+0xb0>
 800761c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007620:	4649      	mov	r1, r9
 8007622:	4638      	mov	r0, r7
 8007624:	47c0      	blx	r8
 8007626:	3001      	adds	r0, #1
 8007628:	d01e      	beq.n	8007668 <_printf_common+0xa4>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	68e5      	ldr	r5, [r4, #12]
 800762e:	6832      	ldr	r2, [r6, #0]
 8007630:	f003 0306 	and.w	r3, r3, #6
 8007634:	2b04      	cmp	r3, #4
 8007636:	bf08      	it	eq
 8007638:	1aad      	subeq	r5, r5, r2
 800763a:	68a3      	ldr	r3, [r4, #8]
 800763c:	6922      	ldr	r2, [r4, #16]
 800763e:	bf0c      	ite	eq
 8007640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007644:	2500      	movne	r5, #0
 8007646:	4293      	cmp	r3, r2
 8007648:	bfc4      	itt	gt
 800764a:	1a9b      	subgt	r3, r3, r2
 800764c:	18ed      	addgt	r5, r5, r3
 800764e:	2600      	movs	r6, #0
 8007650:	341a      	adds	r4, #26
 8007652:	42b5      	cmp	r5, r6
 8007654:	d11a      	bne.n	800768c <_printf_common+0xc8>
 8007656:	2000      	movs	r0, #0
 8007658:	e008      	b.n	800766c <_printf_common+0xa8>
 800765a:	2301      	movs	r3, #1
 800765c:	4652      	mov	r2, sl
 800765e:	4649      	mov	r1, r9
 8007660:	4638      	mov	r0, r7
 8007662:	47c0      	blx	r8
 8007664:	3001      	adds	r0, #1
 8007666:	d103      	bne.n	8007670 <_printf_common+0xac>
 8007668:	f04f 30ff 	mov.w	r0, #4294967295
 800766c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007670:	3501      	adds	r5, #1
 8007672:	e7c6      	b.n	8007602 <_printf_common+0x3e>
 8007674:	18e1      	adds	r1, r4, r3
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	2030      	movs	r0, #48	; 0x30
 800767a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800767e:	4422      	add	r2, r4
 8007680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007688:	3302      	adds	r3, #2
 800768a:	e7c7      	b.n	800761c <_printf_common+0x58>
 800768c:	2301      	movs	r3, #1
 800768e:	4622      	mov	r2, r4
 8007690:	4649      	mov	r1, r9
 8007692:	4638      	mov	r0, r7
 8007694:	47c0      	blx	r8
 8007696:	3001      	adds	r0, #1
 8007698:	d0e6      	beq.n	8007668 <_printf_common+0xa4>
 800769a:	3601      	adds	r6, #1
 800769c:	e7d9      	b.n	8007652 <_printf_common+0x8e>
	...

080076a0 <_printf_i>:
 80076a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a4:	7e0f      	ldrb	r7, [r1, #24]
 80076a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076a8:	2f78      	cmp	r7, #120	; 0x78
 80076aa:	4691      	mov	r9, r2
 80076ac:	4680      	mov	r8, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	469a      	mov	sl, r3
 80076b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076b6:	d807      	bhi.n	80076c8 <_printf_i+0x28>
 80076b8:	2f62      	cmp	r7, #98	; 0x62
 80076ba:	d80a      	bhi.n	80076d2 <_printf_i+0x32>
 80076bc:	2f00      	cmp	r7, #0
 80076be:	f000 80d8 	beq.w	8007872 <_printf_i+0x1d2>
 80076c2:	2f58      	cmp	r7, #88	; 0x58
 80076c4:	f000 80a3 	beq.w	800780e <_printf_i+0x16e>
 80076c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076d0:	e03a      	b.n	8007748 <_printf_i+0xa8>
 80076d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076d6:	2b15      	cmp	r3, #21
 80076d8:	d8f6      	bhi.n	80076c8 <_printf_i+0x28>
 80076da:	a101      	add	r1, pc, #4	; (adr r1, 80076e0 <_printf_i+0x40>)
 80076dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076e0:	08007739 	.word	0x08007739
 80076e4:	0800774d 	.word	0x0800774d
 80076e8:	080076c9 	.word	0x080076c9
 80076ec:	080076c9 	.word	0x080076c9
 80076f0:	080076c9 	.word	0x080076c9
 80076f4:	080076c9 	.word	0x080076c9
 80076f8:	0800774d 	.word	0x0800774d
 80076fc:	080076c9 	.word	0x080076c9
 8007700:	080076c9 	.word	0x080076c9
 8007704:	080076c9 	.word	0x080076c9
 8007708:	080076c9 	.word	0x080076c9
 800770c:	08007859 	.word	0x08007859
 8007710:	0800777d 	.word	0x0800777d
 8007714:	0800783b 	.word	0x0800783b
 8007718:	080076c9 	.word	0x080076c9
 800771c:	080076c9 	.word	0x080076c9
 8007720:	0800787b 	.word	0x0800787b
 8007724:	080076c9 	.word	0x080076c9
 8007728:	0800777d 	.word	0x0800777d
 800772c:	080076c9 	.word	0x080076c9
 8007730:	080076c9 	.word	0x080076c9
 8007734:	08007843 	.word	0x08007843
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	602a      	str	r2, [r5, #0]
 8007740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007748:	2301      	movs	r3, #1
 800774a:	e0a3      	b.n	8007894 <_printf_i+0x1f4>
 800774c:	6820      	ldr	r0, [r4, #0]
 800774e:	6829      	ldr	r1, [r5, #0]
 8007750:	0606      	lsls	r6, r0, #24
 8007752:	f101 0304 	add.w	r3, r1, #4
 8007756:	d50a      	bpl.n	800776e <_printf_i+0xce>
 8007758:	680e      	ldr	r6, [r1, #0]
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	2e00      	cmp	r6, #0
 800775e:	da03      	bge.n	8007768 <_printf_i+0xc8>
 8007760:	232d      	movs	r3, #45	; 0x2d
 8007762:	4276      	negs	r6, r6
 8007764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007768:	485e      	ldr	r0, [pc, #376]	; (80078e4 <_printf_i+0x244>)
 800776a:	230a      	movs	r3, #10
 800776c:	e019      	b.n	80077a2 <_printf_i+0x102>
 800776e:	680e      	ldr	r6, [r1, #0]
 8007770:	602b      	str	r3, [r5, #0]
 8007772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007776:	bf18      	it	ne
 8007778:	b236      	sxthne	r6, r6
 800777a:	e7ef      	b.n	800775c <_printf_i+0xbc>
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	6820      	ldr	r0, [r4, #0]
 8007780:	1d19      	adds	r1, r3, #4
 8007782:	6029      	str	r1, [r5, #0]
 8007784:	0601      	lsls	r1, r0, #24
 8007786:	d501      	bpl.n	800778c <_printf_i+0xec>
 8007788:	681e      	ldr	r6, [r3, #0]
 800778a:	e002      	b.n	8007792 <_printf_i+0xf2>
 800778c:	0646      	lsls	r6, r0, #25
 800778e:	d5fb      	bpl.n	8007788 <_printf_i+0xe8>
 8007790:	881e      	ldrh	r6, [r3, #0]
 8007792:	4854      	ldr	r0, [pc, #336]	; (80078e4 <_printf_i+0x244>)
 8007794:	2f6f      	cmp	r7, #111	; 0x6f
 8007796:	bf0c      	ite	eq
 8007798:	2308      	moveq	r3, #8
 800779a:	230a      	movne	r3, #10
 800779c:	2100      	movs	r1, #0
 800779e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077a2:	6865      	ldr	r5, [r4, #4]
 80077a4:	60a5      	str	r5, [r4, #8]
 80077a6:	2d00      	cmp	r5, #0
 80077a8:	bfa2      	ittt	ge
 80077aa:	6821      	ldrge	r1, [r4, #0]
 80077ac:	f021 0104 	bicge.w	r1, r1, #4
 80077b0:	6021      	strge	r1, [r4, #0]
 80077b2:	b90e      	cbnz	r6, 80077b8 <_printf_i+0x118>
 80077b4:	2d00      	cmp	r5, #0
 80077b6:	d04d      	beq.n	8007854 <_printf_i+0x1b4>
 80077b8:	4615      	mov	r5, r2
 80077ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80077be:	fb03 6711 	mls	r7, r3, r1, r6
 80077c2:	5dc7      	ldrb	r7, [r0, r7]
 80077c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077c8:	4637      	mov	r7, r6
 80077ca:	42bb      	cmp	r3, r7
 80077cc:	460e      	mov	r6, r1
 80077ce:	d9f4      	bls.n	80077ba <_printf_i+0x11a>
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d10b      	bne.n	80077ec <_printf_i+0x14c>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	07de      	lsls	r6, r3, #31
 80077d8:	d508      	bpl.n	80077ec <_printf_i+0x14c>
 80077da:	6923      	ldr	r3, [r4, #16]
 80077dc:	6861      	ldr	r1, [r4, #4]
 80077de:	4299      	cmp	r1, r3
 80077e0:	bfde      	ittt	le
 80077e2:	2330      	movle	r3, #48	; 0x30
 80077e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077ec:	1b52      	subs	r2, r2, r5
 80077ee:	6122      	str	r2, [r4, #16]
 80077f0:	f8cd a000 	str.w	sl, [sp]
 80077f4:	464b      	mov	r3, r9
 80077f6:	aa03      	add	r2, sp, #12
 80077f8:	4621      	mov	r1, r4
 80077fa:	4640      	mov	r0, r8
 80077fc:	f7ff fee2 	bl	80075c4 <_printf_common>
 8007800:	3001      	adds	r0, #1
 8007802:	d14c      	bne.n	800789e <_printf_i+0x1fe>
 8007804:	f04f 30ff 	mov.w	r0, #4294967295
 8007808:	b004      	add	sp, #16
 800780a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780e:	4835      	ldr	r0, [pc, #212]	; (80078e4 <_printf_i+0x244>)
 8007810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007814:	6829      	ldr	r1, [r5, #0]
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	f851 6b04 	ldr.w	r6, [r1], #4
 800781c:	6029      	str	r1, [r5, #0]
 800781e:	061d      	lsls	r5, r3, #24
 8007820:	d514      	bpl.n	800784c <_printf_i+0x1ac>
 8007822:	07df      	lsls	r7, r3, #31
 8007824:	bf44      	itt	mi
 8007826:	f043 0320 	orrmi.w	r3, r3, #32
 800782a:	6023      	strmi	r3, [r4, #0]
 800782c:	b91e      	cbnz	r6, 8007836 <_printf_i+0x196>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	f023 0320 	bic.w	r3, r3, #32
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	2310      	movs	r3, #16
 8007838:	e7b0      	b.n	800779c <_printf_i+0xfc>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	f043 0320 	orr.w	r3, r3, #32
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	2378      	movs	r3, #120	; 0x78
 8007844:	4828      	ldr	r0, [pc, #160]	; (80078e8 <_printf_i+0x248>)
 8007846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800784a:	e7e3      	b.n	8007814 <_printf_i+0x174>
 800784c:	0659      	lsls	r1, r3, #25
 800784e:	bf48      	it	mi
 8007850:	b2b6      	uxthmi	r6, r6
 8007852:	e7e6      	b.n	8007822 <_printf_i+0x182>
 8007854:	4615      	mov	r5, r2
 8007856:	e7bb      	b.n	80077d0 <_printf_i+0x130>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	6826      	ldr	r6, [r4, #0]
 800785c:	6961      	ldr	r1, [r4, #20]
 800785e:	1d18      	adds	r0, r3, #4
 8007860:	6028      	str	r0, [r5, #0]
 8007862:	0635      	lsls	r5, r6, #24
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	d501      	bpl.n	800786c <_printf_i+0x1cc>
 8007868:	6019      	str	r1, [r3, #0]
 800786a:	e002      	b.n	8007872 <_printf_i+0x1d2>
 800786c:	0670      	lsls	r0, r6, #25
 800786e:	d5fb      	bpl.n	8007868 <_printf_i+0x1c8>
 8007870:	8019      	strh	r1, [r3, #0]
 8007872:	2300      	movs	r3, #0
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	4615      	mov	r5, r2
 8007878:	e7ba      	b.n	80077f0 <_printf_i+0x150>
 800787a:	682b      	ldr	r3, [r5, #0]
 800787c:	1d1a      	adds	r2, r3, #4
 800787e:	602a      	str	r2, [r5, #0]
 8007880:	681d      	ldr	r5, [r3, #0]
 8007882:	6862      	ldr	r2, [r4, #4]
 8007884:	2100      	movs	r1, #0
 8007886:	4628      	mov	r0, r5
 8007888:	f7f8 fcaa 	bl	80001e0 <memchr>
 800788c:	b108      	cbz	r0, 8007892 <_printf_i+0x1f2>
 800788e:	1b40      	subs	r0, r0, r5
 8007890:	6060      	str	r0, [r4, #4]
 8007892:	6863      	ldr	r3, [r4, #4]
 8007894:	6123      	str	r3, [r4, #16]
 8007896:	2300      	movs	r3, #0
 8007898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800789c:	e7a8      	b.n	80077f0 <_printf_i+0x150>
 800789e:	6923      	ldr	r3, [r4, #16]
 80078a0:	462a      	mov	r2, r5
 80078a2:	4649      	mov	r1, r9
 80078a4:	4640      	mov	r0, r8
 80078a6:	47d0      	blx	sl
 80078a8:	3001      	adds	r0, #1
 80078aa:	d0ab      	beq.n	8007804 <_printf_i+0x164>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	079b      	lsls	r3, r3, #30
 80078b0:	d413      	bmi.n	80078da <_printf_i+0x23a>
 80078b2:	68e0      	ldr	r0, [r4, #12]
 80078b4:	9b03      	ldr	r3, [sp, #12]
 80078b6:	4298      	cmp	r0, r3
 80078b8:	bfb8      	it	lt
 80078ba:	4618      	movlt	r0, r3
 80078bc:	e7a4      	b.n	8007808 <_printf_i+0x168>
 80078be:	2301      	movs	r3, #1
 80078c0:	4632      	mov	r2, r6
 80078c2:	4649      	mov	r1, r9
 80078c4:	4640      	mov	r0, r8
 80078c6:	47d0      	blx	sl
 80078c8:	3001      	adds	r0, #1
 80078ca:	d09b      	beq.n	8007804 <_printf_i+0x164>
 80078cc:	3501      	adds	r5, #1
 80078ce:	68e3      	ldr	r3, [r4, #12]
 80078d0:	9903      	ldr	r1, [sp, #12]
 80078d2:	1a5b      	subs	r3, r3, r1
 80078d4:	42ab      	cmp	r3, r5
 80078d6:	dcf2      	bgt.n	80078be <_printf_i+0x21e>
 80078d8:	e7eb      	b.n	80078b2 <_printf_i+0x212>
 80078da:	2500      	movs	r5, #0
 80078dc:	f104 0619 	add.w	r6, r4, #25
 80078e0:	e7f5      	b.n	80078ce <_printf_i+0x22e>
 80078e2:	bf00      	nop
 80078e4:	0800a0ea 	.word	0x0800a0ea
 80078e8:	0800a0fb 	.word	0x0800a0fb

080078ec <sniprintf>:
 80078ec:	b40c      	push	{r2, r3}
 80078ee:	b530      	push	{r4, r5, lr}
 80078f0:	4b17      	ldr	r3, [pc, #92]	; (8007950 <sniprintf+0x64>)
 80078f2:	1e0c      	subs	r4, r1, #0
 80078f4:	681d      	ldr	r5, [r3, #0]
 80078f6:	b09d      	sub	sp, #116	; 0x74
 80078f8:	da08      	bge.n	800790c <sniprintf+0x20>
 80078fa:	238b      	movs	r3, #139	; 0x8b
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007902:	b01d      	add	sp, #116	; 0x74
 8007904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007908:	b002      	add	sp, #8
 800790a:	4770      	bx	lr
 800790c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007910:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007914:	bf14      	ite	ne
 8007916:	f104 33ff 	addne.w	r3, r4, #4294967295
 800791a:	4623      	moveq	r3, r4
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	9307      	str	r3, [sp, #28]
 8007920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007924:	9002      	str	r0, [sp, #8]
 8007926:	9006      	str	r0, [sp, #24]
 8007928:	f8ad 3016 	strh.w	r3, [sp, #22]
 800792c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800792e:	ab21      	add	r3, sp, #132	; 0x84
 8007930:	a902      	add	r1, sp, #8
 8007932:	4628      	mov	r0, r5
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	f001 fbad 	bl	8009094 <_svfiprintf_r>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	bfbc      	itt	lt
 800793e:	238b      	movlt	r3, #139	; 0x8b
 8007940:	602b      	strlt	r3, [r5, #0]
 8007942:	2c00      	cmp	r4, #0
 8007944:	d0dd      	beq.n	8007902 <sniprintf+0x16>
 8007946:	9b02      	ldr	r3, [sp, #8]
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
 800794c:	e7d9      	b.n	8007902 <sniprintf+0x16>
 800794e:	bf00      	nop
 8007950:	20000010 	.word	0x20000010

08007954 <siprintf>:
 8007954:	b40e      	push	{r1, r2, r3}
 8007956:	b500      	push	{lr}
 8007958:	b09c      	sub	sp, #112	; 0x70
 800795a:	ab1d      	add	r3, sp, #116	; 0x74
 800795c:	9002      	str	r0, [sp, #8]
 800795e:	9006      	str	r0, [sp, #24]
 8007960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007964:	4809      	ldr	r0, [pc, #36]	; (800798c <siprintf+0x38>)
 8007966:	9107      	str	r1, [sp, #28]
 8007968:	9104      	str	r1, [sp, #16]
 800796a:	4909      	ldr	r1, [pc, #36]	; (8007990 <siprintf+0x3c>)
 800796c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007970:	9105      	str	r1, [sp, #20]
 8007972:	6800      	ldr	r0, [r0, #0]
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	a902      	add	r1, sp, #8
 8007978:	f001 fb8c 	bl	8009094 <_svfiprintf_r>
 800797c:	9b02      	ldr	r3, [sp, #8]
 800797e:	2200      	movs	r2, #0
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	b01c      	add	sp, #112	; 0x70
 8007984:	f85d eb04 	ldr.w	lr, [sp], #4
 8007988:	b003      	add	sp, #12
 800798a:	4770      	bx	lr
 800798c:	20000010 	.word	0x20000010
 8007990:	ffff0208 	.word	0xffff0208

08007994 <strstr>:
 8007994:	780a      	ldrb	r2, [r1, #0]
 8007996:	b570      	push	{r4, r5, r6, lr}
 8007998:	b96a      	cbnz	r2, 80079b6 <strstr+0x22>
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	429a      	cmp	r2, r3
 800799e:	d109      	bne.n	80079b4 <strstr+0x20>
 80079a0:	460c      	mov	r4, r1
 80079a2:	4605      	mov	r5, r0
 80079a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0f6      	beq.n	800799a <strstr+0x6>
 80079ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80079b0:	429e      	cmp	r6, r3
 80079b2:	d0f7      	beq.n	80079a4 <strstr+0x10>
 80079b4:	3001      	adds	r0, #1
 80079b6:	7803      	ldrb	r3, [r0, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1ef      	bne.n	800799c <strstr+0x8>
 80079bc:	4618      	mov	r0, r3
 80079be:	e7ec      	b.n	800799a <strstr+0x6>

080079c0 <quorem>:
 80079c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	6903      	ldr	r3, [r0, #16]
 80079c6:	690c      	ldr	r4, [r1, #16]
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	4607      	mov	r7, r0
 80079cc:	f2c0 8081 	blt.w	8007ad2 <quorem+0x112>
 80079d0:	3c01      	subs	r4, #1
 80079d2:	f101 0814 	add.w	r8, r1, #20
 80079d6:	f100 0514 	add.w	r5, r0, #20
 80079da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079e8:	3301      	adds	r3, #1
 80079ea:	429a      	cmp	r2, r3
 80079ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80079f8:	d331      	bcc.n	8007a5e <quorem+0x9e>
 80079fa:	f04f 0e00 	mov.w	lr, #0
 80079fe:	4640      	mov	r0, r8
 8007a00:	46ac      	mov	ip, r5
 8007a02:	46f2      	mov	sl, lr
 8007a04:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a08:	b293      	uxth	r3, r2
 8007a0a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	ebaa 0303 	sub.w	r3, sl, r3
 8007a18:	f8dc a000 	ldr.w	sl, [ip]
 8007a1c:	0c12      	lsrs	r2, r2, #16
 8007a1e:	fa13 f38a 	uxtah	r3, r3, sl
 8007a22:	fb06 e202 	mla	r2, r6, r2, lr
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	9b00      	ldr	r3, [sp, #0]
 8007a2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a38:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a3c:	4581      	cmp	r9, r0
 8007a3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a42:	f84c 3b04 	str.w	r3, [ip], #4
 8007a46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a4a:	d2db      	bcs.n	8007a04 <quorem+0x44>
 8007a4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a50:	b92b      	cbnz	r3, 8007a5e <quorem+0x9e>
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	3b04      	subs	r3, #4
 8007a56:	429d      	cmp	r5, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	d32e      	bcc.n	8007aba <quorem+0xfa>
 8007a5c:	613c      	str	r4, [r7, #16]
 8007a5e:	4638      	mov	r0, r7
 8007a60:	f001 f8c4 	bl	8008bec <__mcmp>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	db24      	blt.n	8007ab2 <quorem+0xf2>
 8007a68:	3601      	adds	r6, #1
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f04f 0c00 	mov.w	ip, #0
 8007a70:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a74:	f8d0 e000 	ldr.w	lr, [r0]
 8007a78:	b293      	uxth	r3, r2
 8007a7a:	ebac 0303 	sub.w	r3, ip, r3
 8007a7e:	0c12      	lsrs	r2, r2, #16
 8007a80:	fa13 f38e 	uxtah	r3, r3, lr
 8007a84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a92:	45c1      	cmp	r9, r8
 8007a94:	f840 3b04 	str.w	r3, [r0], #4
 8007a98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a9c:	d2e8      	bcs.n	8007a70 <quorem+0xb0>
 8007a9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aa6:	b922      	cbnz	r2, 8007ab2 <quorem+0xf2>
 8007aa8:	3b04      	subs	r3, #4
 8007aaa:	429d      	cmp	r5, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	d30a      	bcc.n	8007ac6 <quorem+0x106>
 8007ab0:	613c      	str	r4, [r7, #16]
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	b003      	add	sp, #12
 8007ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aba:	6812      	ldr	r2, [r2, #0]
 8007abc:	3b04      	subs	r3, #4
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d1cc      	bne.n	8007a5c <quorem+0x9c>
 8007ac2:	3c01      	subs	r4, #1
 8007ac4:	e7c7      	b.n	8007a56 <quorem+0x96>
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	3b04      	subs	r3, #4
 8007aca:	2a00      	cmp	r2, #0
 8007acc:	d1f0      	bne.n	8007ab0 <quorem+0xf0>
 8007ace:	3c01      	subs	r4, #1
 8007ad0:	e7eb      	b.n	8007aaa <quorem+0xea>
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e7ee      	b.n	8007ab4 <quorem+0xf4>
	...

08007ad8 <_dtoa_r>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	ed2d 8b04 	vpush	{d8-d9}
 8007ae0:	ec57 6b10 	vmov	r6, r7, d0
 8007ae4:	b093      	sub	sp, #76	; 0x4c
 8007ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ae8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007aec:	9106      	str	r1, [sp, #24]
 8007aee:	ee10 aa10 	vmov	sl, s0
 8007af2:	4604      	mov	r4, r0
 8007af4:	9209      	str	r2, [sp, #36]	; 0x24
 8007af6:	930c      	str	r3, [sp, #48]	; 0x30
 8007af8:	46bb      	mov	fp, r7
 8007afa:	b975      	cbnz	r5, 8007b1a <_dtoa_r+0x42>
 8007afc:	2010      	movs	r0, #16
 8007afe:	f000 fddd 	bl	80086bc <malloc>
 8007b02:	4602      	mov	r2, r0
 8007b04:	6260      	str	r0, [r4, #36]	; 0x24
 8007b06:	b920      	cbnz	r0, 8007b12 <_dtoa_r+0x3a>
 8007b08:	4ba7      	ldr	r3, [pc, #668]	; (8007da8 <_dtoa_r+0x2d0>)
 8007b0a:	21ea      	movs	r1, #234	; 0xea
 8007b0c:	48a7      	ldr	r0, [pc, #668]	; (8007dac <_dtoa_r+0x2d4>)
 8007b0e:	f001 fbd1 	bl	80092b4 <__assert_func>
 8007b12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b16:	6005      	str	r5, [r0, #0]
 8007b18:	60c5      	str	r5, [r0, #12]
 8007b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b1c:	6819      	ldr	r1, [r3, #0]
 8007b1e:	b151      	cbz	r1, 8007b36 <_dtoa_r+0x5e>
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	604a      	str	r2, [r1, #4]
 8007b24:	2301      	movs	r3, #1
 8007b26:	4093      	lsls	r3, r2
 8007b28:	608b      	str	r3, [r1, #8]
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fe1c 	bl	8008768 <_Bfree>
 8007b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	1e3b      	subs	r3, r7, #0
 8007b38:	bfaa      	itet	ge
 8007b3a:	2300      	movge	r3, #0
 8007b3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007b40:	f8c8 3000 	strge.w	r3, [r8]
 8007b44:	4b9a      	ldr	r3, [pc, #616]	; (8007db0 <_dtoa_r+0x2d8>)
 8007b46:	bfbc      	itt	lt
 8007b48:	2201      	movlt	r2, #1
 8007b4a:	f8c8 2000 	strlt.w	r2, [r8]
 8007b4e:	ea33 030b 	bics.w	r3, r3, fp
 8007b52:	d11b      	bne.n	8007b8c <_dtoa_r+0xb4>
 8007b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b56:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b5a:	6013      	str	r3, [r2, #0]
 8007b5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b60:	4333      	orrs	r3, r6
 8007b62:	f000 8592 	beq.w	800868a <_dtoa_r+0xbb2>
 8007b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b68:	b963      	cbnz	r3, 8007b84 <_dtoa_r+0xac>
 8007b6a:	4b92      	ldr	r3, [pc, #584]	; (8007db4 <_dtoa_r+0x2dc>)
 8007b6c:	e022      	b.n	8007bb4 <_dtoa_r+0xdc>
 8007b6e:	4b92      	ldr	r3, [pc, #584]	; (8007db8 <_dtoa_r+0x2e0>)
 8007b70:	9301      	str	r3, [sp, #4]
 8007b72:	3308      	adds	r3, #8
 8007b74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	9801      	ldr	r0, [sp, #4]
 8007b7a:	b013      	add	sp, #76	; 0x4c
 8007b7c:	ecbd 8b04 	vpop	{d8-d9}
 8007b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b84:	4b8b      	ldr	r3, [pc, #556]	; (8007db4 <_dtoa_r+0x2dc>)
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	3303      	adds	r3, #3
 8007b8a:	e7f3      	b.n	8007b74 <_dtoa_r+0x9c>
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4650      	mov	r0, sl
 8007b92:	4659      	mov	r1, fp
 8007b94:	f7f8 ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b98:	ec4b ab19 	vmov	d9, sl, fp
 8007b9c:	4680      	mov	r8, r0
 8007b9e:	b158      	cbz	r0, 8007bb8 <_dtoa_r+0xe0>
 8007ba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 856b 	beq.w	8008684 <_dtoa_r+0xbac>
 8007bae:	4883      	ldr	r0, [pc, #524]	; (8007dbc <_dtoa_r+0x2e4>)
 8007bb0:	6018      	str	r0, [r3, #0]
 8007bb2:	1e43      	subs	r3, r0, #1
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	e7df      	b.n	8007b78 <_dtoa_r+0xa0>
 8007bb8:	ec4b ab10 	vmov	d0, sl, fp
 8007bbc:	aa10      	add	r2, sp, #64	; 0x40
 8007bbe:	a911      	add	r1, sp, #68	; 0x44
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f001 f8b9 	bl	8008d38 <__d2b>
 8007bc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007bca:	ee08 0a10 	vmov	s16, r0
 8007bce:	2d00      	cmp	r5, #0
 8007bd0:	f000 8084 	beq.w	8007cdc <_dtoa_r+0x204>
 8007bd4:	ee19 3a90 	vmov	r3, s19
 8007bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007be0:	4656      	mov	r6, sl
 8007be2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007be6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007bee:	4b74      	ldr	r3, [pc, #464]	; (8007dc0 <_dtoa_r+0x2e8>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	f7f8 fb47 	bl	8000288 <__aeabi_dsub>
 8007bfa:	a365      	add	r3, pc, #404	; (adr r3, 8007d90 <_dtoa_r+0x2b8>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fcfa 	bl	80005f8 <__aeabi_dmul>
 8007c04:	a364      	add	r3, pc, #400	; (adr r3, 8007d98 <_dtoa_r+0x2c0>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 fb3f 	bl	800028c <__adddf3>
 8007c0e:	4606      	mov	r6, r0
 8007c10:	4628      	mov	r0, r5
 8007c12:	460f      	mov	r7, r1
 8007c14:	f7f8 fc86 	bl	8000524 <__aeabi_i2d>
 8007c18:	a361      	add	r3, pc, #388	; (adr r3, 8007da0 <_dtoa_r+0x2c8>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fceb 	bl	80005f8 <__aeabi_dmul>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4630      	mov	r0, r6
 8007c28:	4639      	mov	r1, r7
 8007c2a:	f7f8 fb2f 	bl	800028c <__adddf3>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	460f      	mov	r7, r1
 8007c32:	f7f8 ff91 	bl	8000b58 <__aeabi_d2iz>
 8007c36:	2200      	movs	r2, #0
 8007c38:	9000      	str	r0, [sp, #0]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f8 ff4c 	bl	8000adc <__aeabi_dcmplt>
 8007c44:	b150      	cbz	r0, 8007c5c <_dtoa_r+0x184>
 8007c46:	9800      	ldr	r0, [sp, #0]
 8007c48:	f7f8 fc6c 	bl	8000524 <__aeabi_i2d>
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	463b      	mov	r3, r7
 8007c50:	f7f8 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c54:	b910      	cbnz	r0, 8007c5c <_dtoa_r+0x184>
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	9b00      	ldr	r3, [sp, #0]
 8007c5e:	2b16      	cmp	r3, #22
 8007c60:	d85a      	bhi.n	8007d18 <_dtoa_r+0x240>
 8007c62:	9a00      	ldr	r2, [sp, #0]
 8007c64:	4b57      	ldr	r3, [pc, #348]	; (8007dc4 <_dtoa_r+0x2ec>)
 8007c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	ec51 0b19 	vmov	r0, r1, d9
 8007c72:	f7f8 ff33 	bl	8000adc <__aeabi_dcmplt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d050      	beq.n	8007d1c <_dtoa_r+0x244>
 8007c7a:	9b00      	ldr	r3, [sp, #0]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	2300      	movs	r3, #0
 8007c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c86:	1b5d      	subs	r5, r3, r5
 8007c88:	1e6b      	subs	r3, r5, #1
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	bf45      	ittet	mi
 8007c8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007c92:	9304      	strmi	r3, [sp, #16]
 8007c94:	2300      	movpl	r3, #0
 8007c96:	2300      	movmi	r3, #0
 8007c98:	bf4c      	ite	mi
 8007c9a:	9305      	strmi	r3, [sp, #20]
 8007c9c:	9304      	strpl	r3, [sp, #16]
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db3d      	blt.n	8007d20 <_dtoa_r+0x248>
 8007ca4:	9b05      	ldr	r3, [sp, #20]
 8007ca6:	9a00      	ldr	r2, [sp, #0]
 8007ca8:	920a      	str	r2, [sp, #40]	; 0x28
 8007caa:	4413      	add	r3, r2
 8007cac:	9305      	str	r3, [sp, #20]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9307      	str	r3, [sp, #28]
 8007cb2:	9b06      	ldr	r3, [sp, #24]
 8007cb4:	2b09      	cmp	r3, #9
 8007cb6:	f200 8089 	bhi.w	8007dcc <_dtoa_r+0x2f4>
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	bfc4      	itt	gt
 8007cbe:	3b04      	subgt	r3, #4
 8007cc0:	9306      	strgt	r3, [sp, #24]
 8007cc2:	9b06      	ldr	r3, [sp, #24]
 8007cc4:	f1a3 0302 	sub.w	r3, r3, #2
 8007cc8:	bfcc      	ite	gt
 8007cca:	2500      	movgt	r5, #0
 8007ccc:	2501      	movle	r5, #1
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	f200 8087 	bhi.w	8007de2 <_dtoa_r+0x30a>
 8007cd4:	e8df f003 	tbb	[pc, r3]
 8007cd8:	59383a2d 	.word	0x59383a2d
 8007cdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007ce0:	441d      	add	r5, r3
 8007ce2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	bfc1      	itttt	gt
 8007cea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007cf2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007cf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cfa:	bfda      	itte	le
 8007cfc:	f1c3 0320 	rsble	r3, r3, #32
 8007d00:	fa06 f003 	lslle.w	r0, r6, r3
 8007d04:	4318      	orrgt	r0, r3
 8007d06:	f7f8 fbfd 	bl	8000504 <__aeabi_ui2d>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d12:	3d01      	subs	r5, #1
 8007d14:	930e      	str	r3, [sp, #56]	; 0x38
 8007d16:	e76a      	b.n	8007bee <_dtoa_r+0x116>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e7b2      	b.n	8007c82 <_dtoa_r+0x1aa>
 8007d1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d1e:	e7b1      	b.n	8007c84 <_dtoa_r+0x1ac>
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	9a00      	ldr	r2, [sp, #0]
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	9304      	str	r3, [sp, #16]
 8007d28:	4253      	negs	r3, r2
 8007d2a:	9307      	str	r3, [sp, #28]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d30:	e7bf      	b.n	8007cb2 <_dtoa_r+0x1da>
 8007d32:	2300      	movs	r3, #0
 8007d34:	9308      	str	r3, [sp, #32]
 8007d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	dc55      	bgt.n	8007de8 <_dtoa_r+0x310>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d42:	461a      	mov	r2, r3
 8007d44:	9209      	str	r2, [sp, #36]	; 0x24
 8007d46:	e00c      	b.n	8007d62 <_dtoa_r+0x28a>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e7f3      	b.n	8007d34 <_dtoa_r+0x25c>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d50:	9308      	str	r3, [sp, #32]
 8007d52:	9b00      	ldr	r3, [sp, #0]
 8007d54:	4413      	add	r3, r2
 8007d56:	9302      	str	r3, [sp, #8]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	9303      	str	r3, [sp, #12]
 8007d5e:	bfb8      	it	lt
 8007d60:	2301      	movlt	r3, #1
 8007d62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d64:	2200      	movs	r2, #0
 8007d66:	6042      	str	r2, [r0, #4]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	f102 0614 	add.w	r6, r2, #20
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	6841      	ldr	r1, [r0, #4]
 8007d72:	d93d      	bls.n	8007df0 <_dtoa_r+0x318>
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fcb7 	bl	80086e8 <_Balloc>
 8007d7a:	9001      	str	r0, [sp, #4]
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d13b      	bne.n	8007df8 <_dtoa_r+0x320>
 8007d80:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <_dtoa_r+0x2f0>)
 8007d82:	4602      	mov	r2, r0
 8007d84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d88:	e6c0      	b.n	8007b0c <_dtoa_r+0x34>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e7df      	b.n	8007d4e <_dtoa_r+0x276>
 8007d8e:	bf00      	nop
 8007d90:	636f4361 	.word	0x636f4361
 8007d94:	3fd287a7 	.word	0x3fd287a7
 8007d98:	8b60c8b3 	.word	0x8b60c8b3
 8007d9c:	3fc68a28 	.word	0x3fc68a28
 8007da0:	509f79fb 	.word	0x509f79fb
 8007da4:	3fd34413 	.word	0x3fd34413
 8007da8:	0800a119 	.word	0x0800a119
 8007dac:	0800a130 	.word	0x0800a130
 8007db0:	7ff00000 	.word	0x7ff00000
 8007db4:	0800a115 	.word	0x0800a115
 8007db8:	0800a10c 	.word	0x0800a10c
 8007dbc:	0800a0e9 	.word	0x0800a0e9
 8007dc0:	3ff80000 	.word	0x3ff80000
 8007dc4:	0800a220 	.word	0x0800a220
 8007dc8:	0800a18b 	.word	0x0800a18b
 8007dcc:	2501      	movs	r5, #1
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9306      	str	r3, [sp, #24]
 8007dd2:	9508      	str	r5, [sp, #32]
 8007dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2312      	movs	r3, #18
 8007de0:	e7b0      	b.n	8007d44 <_dtoa_r+0x26c>
 8007de2:	2301      	movs	r3, #1
 8007de4:	9308      	str	r3, [sp, #32]
 8007de6:	e7f5      	b.n	8007dd4 <_dtoa_r+0x2fc>
 8007de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007dee:	e7b8      	b.n	8007d62 <_dtoa_r+0x28a>
 8007df0:	3101      	adds	r1, #1
 8007df2:	6041      	str	r1, [r0, #4]
 8007df4:	0052      	lsls	r2, r2, #1
 8007df6:	e7b8      	b.n	8007d6a <_dtoa_r+0x292>
 8007df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dfa:	9a01      	ldr	r2, [sp, #4]
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	2b0e      	cmp	r3, #14
 8007e02:	f200 809d 	bhi.w	8007f40 <_dtoa_r+0x468>
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	f000 809a 	beq.w	8007f40 <_dtoa_r+0x468>
 8007e0c:	9b00      	ldr	r3, [sp, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dd32      	ble.n	8007e78 <_dtoa_r+0x3a0>
 8007e12:	4ab7      	ldr	r2, [pc, #732]	; (80080f0 <_dtoa_r+0x618>)
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e20:	9b00      	ldr	r3, [sp, #0]
 8007e22:	05d8      	lsls	r0, r3, #23
 8007e24:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e28:	d516      	bpl.n	8007e58 <_dtoa_r+0x380>
 8007e2a:	4bb2      	ldr	r3, [pc, #712]	; (80080f4 <_dtoa_r+0x61c>)
 8007e2c:	ec51 0b19 	vmov	r0, r1, d9
 8007e30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e34:	f7f8 fd0a 	bl	800084c <__aeabi_ddiv>
 8007e38:	f007 070f 	and.w	r7, r7, #15
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	468b      	mov	fp, r1
 8007e40:	2503      	movs	r5, #3
 8007e42:	4eac      	ldr	r6, [pc, #688]	; (80080f4 <_dtoa_r+0x61c>)
 8007e44:	b957      	cbnz	r7, 8007e5c <_dtoa_r+0x384>
 8007e46:	4642      	mov	r2, r8
 8007e48:	464b      	mov	r3, r9
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	f7f8 fcfd 	bl	800084c <__aeabi_ddiv>
 8007e52:	4682      	mov	sl, r0
 8007e54:	468b      	mov	fp, r1
 8007e56:	e028      	b.n	8007eaa <_dtoa_r+0x3d2>
 8007e58:	2502      	movs	r5, #2
 8007e5a:	e7f2      	b.n	8007e42 <_dtoa_r+0x36a>
 8007e5c:	07f9      	lsls	r1, r7, #31
 8007e5e:	d508      	bpl.n	8007e72 <_dtoa_r+0x39a>
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e68:	f7f8 fbc6 	bl	80005f8 <__aeabi_dmul>
 8007e6c:	3501      	adds	r5, #1
 8007e6e:	4680      	mov	r8, r0
 8007e70:	4689      	mov	r9, r1
 8007e72:	107f      	asrs	r7, r7, #1
 8007e74:	3608      	adds	r6, #8
 8007e76:	e7e5      	b.n	8007e44 <_dtoa_r+0x36c>
 8007e78:	f000 809b 	beq.w	8007fb2 <_dtoa_r+0x4da>
 8007e7c:	9b00      	ldr	r3, [sp, #0]
 8007e7e:	4f9d      	ldr	r7, [pc, #628]	; (80080f4 <_dtoa_r+0x61c>)
 8007e80:	425e      	negs	r6, r3
 8007e82:	4b9b      	ldr	r3, [pc, #620]	; (80080f0 <_dtoa_r+0x618>)
 8007e84:	f006 020f 	and.w	r2, r6, #15
 8007e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	ec51 0b19 	vmov	r0, r1, d9
 8007e94:	f7f8 fbb0 	bl	80005f8 <__aeabi_dmul>
 8007e98:	1136      	asrs	r6, r6, #4
 8007e9a:	4682      	mov	sl, r0
 8007e9c:	468b      	mov	fp, r1
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2502      	movs	r5, #2
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d17a      	bne.n	8007f9c <_dtoa_r+0x4c4>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1d3      	bne.n	8007e52 <_dtoa_r+0x37a>
 8007eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8082 	beq.w	8007fb6 <_dtoa_r+0x4de>
 8007eb2:	4b91      	ldr	r3, [pc, #580]	; (80080f8 <_dtoa_r+0x620>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	4659      	mov	r1, fp
 8007eba:	f7f8 fe0f 	bl	8000adc <__aeabi_dcmplt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d079      	beq.n	8007fb6 <_dtoa_r+0x4de>
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d076      	beq.n	8007fb6 <_dtoa_r+0x4de>
 8007ec8:	9b02      	ldr	r3, [sp, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dd36      	ble.n	8007f3c <_dtoa_r+0x464>
 8007ece:	9b00      	ldr	r3, [sp, #0]
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	4659      	mov	r1, fp
 8007ed4:	1e5f      	subs	r7, r3, #1
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4b88      	ldr	r3, [pc, #544]	; (80080fc <_dtoa_r+0x624>)
 8007eda:	f7f8 fb8d 	bl	80005f8 <__aeabi_dmul>
 8007ede:	9e02      	ldr	r6, [sp, #8]
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	468b      	mov	fp, r1
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f7f8 fb1c 	bl	8000524 <__aeabi_i2d>
 8007eec:	4652      	mov	r2, sl
 8007eee:	465b      	mov	r3, fp
 8007ef0:	f7f8 fb82 	bl	80005f8 <__aeabi_dmul>
 8007ef4:	4b82      	ldr	r3, [pc, #520]	; (8008100 <_dtoa_r+0x628>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f7f8 f9c8 	bl	800028c <__adddf3>
 8007efc:	46d0      	mov	r8, sl
 8007efe:	46d9      	mov	r9, fp
 8007f00:	4682      	mov	sl, r0
 8007f02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	d158      	bne.n	8007fbc <_dtoa_r+0x4e4>
 8007f0a:	4b7e      	ldr	r3, [pc, #504]	; (8008104 <_dtoa_r+0x62c>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	4640      	mov	r0, r8
 8007f10:	4649      	mov	r1, r9
 8007f12:	f7f8 f9b9 	bl	8000288 <__aeabi_dsub>
 8007f16:	4652      	mov	r2, sl
 8007f18:	465b      	mov	r3, fp
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	4689      	mov	r9, r1
 8007f1e:	f7f8 fdfb 	bl	8000b18 <__aeabi_dcmpgt>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f040 8295 	bne.w	8008452 <_dtoa_r+0x97a>
 8007f28:	4652      	mov	r2, sl
 8007f2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f2e:	4640      	mov	r0, r8
 8007f30:	4649      	mov	r1, r9
 8007f32:	f7f8 fdd3 	bl	8000adc <__aeabi_dcmplt>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f040 8289 	bne.w	800844e <_dtoa_r+0x976>
 8007f3c:	ec5b ab19 	vmov	sl, fp, d9
 8007f40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f2c0 8148 	blt.w	80081d8 <_dtoa_r+0x700>
 8007f48:	9a00      	ldr	r2, [sp, #0]
 8007f4a:	2a0e      	cmp	r2, #14
 8007f4c:	f300 8144 	bgt.w	80081d8 <_dtoa_r+0x700>
 8007f50:	4b67      	ldr	r3, [pc, #412]	; (80080f0 <_dtoa_r+0x618>)
 8007f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f280 80d5 	bge.w	800810c <_dtoa_r+0x634>
 8007f62:	9b03      	ldr	r3, [sp, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f300 80d1 	bgt.w	800810c <_dtoa_r+0x634>
 8007f6a:	f040 826f 	bne.w	800844c <_dtoa_r+0x974>
 8007f6e:	4b65      	ldr	r3, [pc, #404]	; (8008104 <_dtoa_r+0x62c>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 fb3f 	bl	80005f8 <__aeabi_dmul>
 8007f7a:	4652      	mov	r2, sl
 8007f7c:	465b      	mov	r3, fp
 8007f7e:	f7f8 fdc1 	bl	8000b04 <__aeabi_dcmpge>
 8007f82:	9e03      	ldr	r6, [sp, #12]
 8007f84:	4637      	mov	r7, r6
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f040 8245 	bne.w	8008416 <_dtoa_r+0x93e>
 8007f8c:	9d01      	ldr	r5, [sp, #4]
 8007f8e:	2331      	movs	r3, #49	; 0x31
 8007f90:	f805 3b01 	strb.w	r3, [r5], #1
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	3301      	adds	r3, #1
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	e240      	b.n	800841e <_dtoa_r+0x946>
 8007f9c:	07f2      	lsls	r2, r6, #31
 8007f9e:	d505      	bpl.n	8007fac <_dtoa_r+0x4d4>
 8007fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa4:	f7f8 fb28 	bl	80005f8 <__aeabi_dmul>
 8007fa8:	3501      	adds	r5, #1
 8007faa:	2301      	movs	r3, #1
 8007fac:	1076      	asrs	r6, r6, #1
 8007fae:	3708      	adds	r7, #8
 8007fb0:	e777      	b.n	8007ea2 <_dtoa_r+0x3ca>
 8007fb2:	2502      	movs	r5, #2
 8007fb4:	e779      	b.n	8007eaa <_dtoa_r+0x3d2>
 8007fb6:	9f00      	ldr	r7, [sp, #0]
 8007fb8:	9e03      	ldr	r6, [sp, #12]
 8007fba:	e794      	b.n	8007ee6 <_dtoa_r+0x40e>
 8007fbc:	9901      	ldr	r1, [sp, #4]
 8007fbe:	4b4c      	ldr	r3, [pc, #304]	; (80080f0 <_dtoa_r+0x618>)
 8007fc0:	4431      	add	r1, r6
 8007fc2:	910d      	str	r1, [sp, #52]	; 0x34
 8007fc4:	9908      	ldr	r1, [sp, #32]
 8007fc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007fca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fce:	2900      	cmp	r1, #0
 8007fd0:	d043      	beq.n	800805a <_dtoa_r+0x582>
 8007fd2:	494d      	ldr	r1, [pc, #308]	; (8008108 <_dtoa_r+0x630>)
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f7f8 fc39 	bl	800084c <__aeabi_ddiv>
 8007fda:	4652      	mov	r2, sl
 8007fdc:	465b      	mov	r3, fp
 8007fde:	f7f8 f953 	bl	8000288 <__aeabi_dsub>
 8007fe2:	9d01      	ldr	r5, [sp, #4]
 8007fe4:	4682      	mov	sl, r0
 8007fe6:	468b      	mov	fp, r1
 8007fe8:	4649      	mov	r1, r9
 8007fea:	4640      	mov	r0, r8
 8007fec:	f7f8 fdb4 	bl	8000b58 <__aeabi_d2iz>
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	f7f8 fa97 	bl	8000524 <__aeabi_i2d>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	f7f8 f943 	bl	8000288 <__aeabi_dsub>
 8008002:	3630      	adds	r6, #48	; 0x30
 8008004:	f805 6b01 	strb.w	r6, [r5], #1
 8008008:	4652      	mov	r2, sl
 800800a:	465b      	mov	r3, fp
 800800c:	4680      	mov	r8, r0
 800800e:	4689      	mov	r9, r1
 8008010:	f7f8 fd64 	bl	8000adc <__aeabi_dcmplt>
 8008014:	2800      	cmp	r0, #0
 8008016:	d163      	bne.n	80080e0 <_dtoa_r+0x608>
 8008018:	4642      	mov	r2, r8
 800801a:	464b      	mov	r3, r9
 800801c:	4936      	ldr	r1, [pc, #216]	; (80080f8 <_dtoa_r+0x620>)
 800801e:	2000      	movs	r0, #0
 8008020:	f7f8 f932 	bl	8000288 <__aeabi_dsub>
 8008024:	4652      	mov	r2, sl
 8008026:	465b      	mov	r3, fp
 8008028:	f7f8 fd58 	bl	8000adc <__aeabi_dcmplt>
 800802c:	2800      	cmp	r0, #0
 800802e:	f040 80b5 	bne.w	800819c <_dtoa_r+0x6c4>
 8008032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008034:	429d      	cmp	r5, r3
 8008036:	d081      	beq.n	8007f3c <_dtoa_r+0x464>
 8008038:	4b30      	ldr	r3, [pc, #192]	; (80080fc <_dtoa_r+0x624>)
 800803a:	2200      	movs	r2, #0
 800803c:	4650      	mov	r0, sl
 800803e:	4659      	mov	r1, fp
 8008040:	f7f8 fada 	bl	80005f8 <__aeabi_dmul>
 8008044:	4b2d      	ldr	r3, [pc, #180]	; (80080fc <_dtoa_r+0x624>)
 8008046:	4682      	mov	sl, r0
 8008048:	468b      	mov	fp, r1
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	2200      	movs	r2, #0
 8008050:	f7f8 fad2 	bl	80005f8 <__aeabi_dmul>
 8008054:	4680      	mov	r8, r0
 8008056:	4689      	mov	r9, r1
 8008058:	e7c6      	b.n	8007fe8 <_dtoa_r+0x510>
 800805a:	4650      	mov	r0, sl
 800805c:	4659      	mov	r1, fp
 800805e:	f7f8 facb 	bl	80005f8 <__aeabi_dmul>
 8008062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008064:	9d01      	ldr	r5, [sp, #4]
 8008066:	930f      	str	r3, [sp, #60]	; 0x3c
 8008068:	4682      	mov	sl, r0
 800806a:	468b      	mov	fp, r1
 800806c:	4649      	mov	r1, r9
 800806e:	4640      	mov	r0, r8
 8008070:	f7f8 fd72 	bl	8000b58 <__aeabi_d2iz>
 8008074:	4606      	mov	r6, r0
 8008076:	f7f8 fa55 	bl	8000524 <__aeabi_i2d>
 800807a:	3630      	adds	r6, #48	; 0x30
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 f900 	bl	8000288 <__aeabi_dsub>
 8008088:	f805 6b01 	strb.w	r6, [r5], #1
 800808c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800808e:	429d      	cmp	r5, r3
 8008090:	4680      	mov	r8, r0
 8008092:	4689      	mov	r9, r1
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	d124      	bne.n	80080e4 <_dtoa_r+0x60c>
 800809a:	4b1b      	ldr	r3, [pc, #108]	; (8008108 <_dtoa_r+0x630>)
 800809c:	4650      	mov	r0, sl
 800809e:	4659      	mov	r1, fp
 80080a0:	f7f8 f8f4 	bl	800028c <__adddf3>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	4640      	mov	r0, r8
 80080aa:	4649      	mov	r1, r9
 80080ac:	f7f8 fd34 	bl	8000b18 <__aeabi_dcmpgt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d173      	bne.n	800819c <_dtoa_r+0x6c4>
 80080b4:	4652      	mov	r2, sl
 80080b6:	465b      	mov	r3, fp
 80080b8:	4913      	ldr	r1, [pc, #76]	; (8008108 <_dtoa_r+0x630>)
 80080ba:	2000      	movs	r0, #0
 80080bc:	f7f8 f8e4 	bl	8000288 <__aeabi_dsub>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4640      	mov	r0, r8
 80080c6:	4649      	mov	r1, r9
 80080c8:	f7f8 fd08 	bl	8000adc <__aeabi_dcmplt>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f43f af35 	beq.w	8007f3c <_dtoa_r+0x464>
 80080d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080d4:	1e6b      	subs	r3, r5, #1
 80080d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080dc:	2b30      	cmp	r3, #48	; 0x30
 80080de:	d0f8      	beq.n	80080d2 <_dtoa_r+0x5fa>
 80080e0:	9700      	str	r7, [sp, #0]
 80080e2:	e049      	b.n	8008178 <_dtoa_r+0x6a0>
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <_dtoa_r+0x624>)
 80080e6:	f7f8 fa87 	bl	80005f8 <__aeabi_dmul>
 80080ea:	4680      	mov	r8, r0
 80080ec:	4689      	mov	r9, r1
 80080ee:	e7bd      	b.n	800806c <_dtoa_r+0x594>
 80080f0:	0800a220 	.word	0x0800a220
 80080f4:	0800a1f8 	.word	0x0800a1f8
 80080f8:	3ff00000 	.word	0x3ff00000
 80080fc:	40240000 	.word	0x40240000
 8008100:	401c0000 	.word	0x401c0000
 8008104:	40140000 	.word	0x40140000
 8008108:	3fe00000 	.word	0x3fe00000
 800810c:	9d01      	ldr	r5, [sp, #4]
 800810e:	4656      	mov	r6, sl
 8008110:	465f      	mov	r7, fp
 8008112:	4642      	mov	r2, r8
 8008114:	464b      	mov	r3, r9
 8008116:	4630      	mov	r0, r6
 8008118:	4639      	mov	r1, r7
 800811a:	f7f8 fb97 	bl	800084c <__aeabi_ddiv>
 800811e:	f7f8 fd1b 	bl	8000b58 <__aeabi_d2iz>
 8008122:	4682      	mov	sl, r0
 8008124:	f7f8 f9fe 	bl	8000524 <__aeabi_i2d>
 8008128:	4642      	mov	r2, r8
 800812a:	464b      	mov	r3, r9
 800812c:	f7f8 fa64 	bl	80005f8 <__aeabi_dmul>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4630      	mov	r0, r6
 8008136:	4639      	mov	r1, r7
 8008138:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800813c:	f7f8 f8a4 	bl	8000288 <__aeabi_dsub>
 8008140:	f805 6b01 	strb.w	r6, [r5], #1
 8008144:	9e01      	ldr	r6, [sp, #4]
 8008146:	9f03      	ldr	r7, [sp, #12]
 8008148:	1bae      	subs	r6, r5, r6
 800814a:	42b7      	cmp	r7, r6
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	d135      	bne.n	80081be <_dtoa_r+0x6e6>
 8008152:	f7f8 f89b 	bl	800028c <__adddf3>
 8008156:	4642      	mov	r2, r8
 8008158:	464b      	mov	r3, r9
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	f7f8 fcdb 	bl	8000b18 <__aeabi_dcmpgt>
 8008162:	b9d0      	cbnz	r0, 800819a <_dtoa_r+0x6c2>
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	4630      	mov	r0, r6
 800816a:	4639      	mov	r1, r7
 800816c:	f7f8 fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008170:	b110      	cbz	r0, 8008178 <_dtoa_r+0x6a0>
 8008172:	f01a 0f01 	tst.w	sl, #1
 8008176:	d110      	bne.n	800819a <_dtoa_r+0x6c2>
 8008178:	4620      	mov	r0, r4
 800817a:	ee18 1a10 	vmov	r1, s16
 800817e:	f000 faf3 	bl	8008768 <_Bfree>
 8008182:	2300      	movs	r3, #0
 8008184:	9800      	ldr	r0, [sp, #0]
 8008186:	702b      	strb	r3, [r5, #0]
 8008188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800818a:	3001      	adds	r0, #1
 800818c:	6018      	str	r0, [r3, #0]
 800818e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008190:	2b00      	cmp	r3, #0
 8008192:	f43f acf1 	beq.w	8007b78 <_dtoa_r+0xa0>
 8008196:	601d      	str	r5, [r3, #0]
 8008198:	e4ee      	b.n	8007b78 <_dtoa_r+0xa0>
 800819a:	9f00      	ldr	r7, [sp, #0]
 800819c:	462b      	mov	r3, r5
 800819e:	461d      	mov	r5, r3
 80081a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081a4:	2a39      	cmp	r2, #57	; 0x39
 80081a6:	d106      	bne.n	80081b6 <_dtoa_r+0x6de>
 80081a8:	9a01      	ldr	r2, [sp, #4]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d1f7      	bne.n	800819e <_dtoa_r+0x6c6>
 80081ae:	9901      	ldr	r1, [sp, #4]
 80081b0:	2230      	movs	r2, #48	; 0x30
 80081b2:	3701      	adds	r7, #1
 80081b4:	700a      	strb	r2, [r1, #0]
 80081b6:	781a      	ldrb	r2, [r3, #0]
 80081b8:	3201      	adds	r2, #1
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	e790      	b.n	80080e0 <_dtoa_r+0x608>
 80081be:	4ba6      	ldr	r3, [pc, #664]	; (8008458 <_dtoa_r+0x980>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	f7f8 fa19 	bl	80005f8 <__aeabi_dmul>
 80081c6:	2200      	movs	r2, #0
 80081c8:	2300      	movs	r3, #0
 80081ca:	4606      	mov	r6, r0
 80081cc:	460f      	mov	r7, r1
 80081ce:	f7f8 fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d09d      	beq.n	8008112 <_dtoa_r+0x63a>
 80081d6:	e7cf      	b.n	8008178 <_dtoa_r+0x6a0>
 80081d8:	9a08      	ldr	r2, [sp, #32]
 80081da:	2a00      	cmp	r2, #0
 80081dc:	f000 80d7 	beq.w	800838e <_dtoa_r+0x8b6>
 80081e0:	9a06      	ldr	r2, [sp, #24]
 80081e2:	2a01      	cmp	r2, #1
 80081e4:	f300 80ba 	bgt.w	800835c <_dtoa_r+0x884>
 80081e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	f000 80b2 	beq.w	8008354 <_dtoa_r+0x87c>
 80081f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081f4:	9e07      	ldr	r6, [sp, #28]
 80081f6:	9d04      	ldr	r5, [sp, #16]
 80081f8:	9a04      	ldr	r2, [sp, #16]
 80081fa:	441a      	add	r2, r3
 80081fc:	9204      	str	r2, [sp, #16]
 80081fe:	9a05      	ldr	r2, [sp, #20]
 8008200:	2101      	movs	r1, #1
 8008202:	441a      	add	r2, r3
 8008204:	4620      	mov	r0, r4
 8008206:	9205      	str	r2, [sp, #20]
 8008208:	f000 fb66 	bl	80088d8 <__i2b>
 800820c:	4607      	mov	r7, r0
 800820e:	2d00      	cmp	r5, #0
 8008210:	dd0c      	ble.n	800822c <_dtoa_r+0x754>
 8008212:	9b05      	ldr	r3, [sp, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	dd09      	ble.n	800822c <_dtoa_r+0x754>
 8008218:	42ab      	cmp	r3, r5
 800821a:	9a04      	ldr	r2, [sp, #16]
 800821c:	bfa8      	it	ge
 800821e:	462b      	movge	r3, r5
 8008220:	1ad2      	subs	r2, r2, r3
 8008222:	9204      	str	r2, [sp, #16]
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	1aed      	subs	r5, r5, r3
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	9305      	str	r3, [sp, #20]
 800822c:	9b07      	ldr	r3, [sp, #28]
 800822e:	b31b      	cbz	r3, 8008278 <_dtoa_r+0x7a0>
 8008230:	9b08      	ldr	r3, [sp, #32]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 80af 	beq.w	8008396 <_dtoa_r+0x8be>
 8008238:	2e00      	cmp	r6, #0
 800823a:	dd13      	ble.n	8008264 <_dtoa_r+0x78c>
 800823c:	4639      	mov	r1, r7
 800823e:	4632      	mov	r2, r6
 8008240:	4620      	mov	r0, r4
 8008242:	f000 fc09 	bl	8008a58 <__pow5mult>
 8008246:	ee18 2a10 	vmov	r2, s16
 800824a:	4601      	mov	r1, r0
 800824c:	4607      	mov	r7, r0
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fb58 	bl	8008904 <__multiply>
 8008254:	ee18 1a10 	vmov	r1, s16
 8008258:	4680      	mov	r8, r0
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fa84 	bl	8008768 <_Bfree>
 8008260:	ee08 8a10 	vmov	s16, r8
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	1b9a      	subs	r2, r3, r6
 8008268:	d006      	beq.n	8008278 <_dtoa_r+0x7a0>
 800826a:	ee18 1a10 	vmov	r1, s16
 800826e:	4620      	mov	r0, r4
 8008270:	f000 fbf2 	bl	8008a58 <__pow5mult>
 8008274:	ee08 0a10 	vmov	s16, r0
 8008278:	2101      	movs	r1, #1
 800827a:	4620      	mov	r0, r4
 800827c:	f000 fb2c 	bl	80088d8 <__i2b>
 8008280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008282:	2b00      	cmp	r3, #0
 8008284:	4606      	mov	r6, r0
 8008286:	f340 8088 	ble.w	800839a <_dtoa_r+0x8c2>
 800828a:	461a      	mov	r2, r3
 800828c:	4601      	mov	r1, r0
 800828e:	4620      	mov	r0, r4
 8008290:	f000 fbe2 	bl	8008a58 <__pow5mult>
 8008294:	9b06      	ldr	r3, [sp, #24]
 8008296:	2b01      	cmp	r3, #1
 8008298:	4606      	mov	r6, r0
 800829a:	f340 8081 	ble.w	80083a0 <_dtoa_r+0x8c8>
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	6933      	ldr	r3, [r6, #16]
 80082a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80082a8:	6918      	ldr	r0, [r3, #16]
 80082aa:	f000 fac5 	bl	8008838 <__hi0bits>
 80082ae:	f1c0 0020 	rsb	r0, r0, #32
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	4418      	add	r0, r3
 80082b6:	f010 001f 	ands.w	r0, r0, #31
 80082ba:	f000 8092 	beq.w	80083e2 <_dtoa_r+0x90a>
 80082be:	f1c0 0320 	rsb	r3, r0, #32
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	f340 808a 	ble.w	80083dc <_dtoa_r+0x904>
 80082c8:	f1c0 001c 	rsb	r0, r0, #28
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	4403      	add	r3, r0
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	9b05      	ldr	r3, [sp, #20]
 80082d4:	4403      	add	r3, r0
 80082d6:	4405      	add	r5, r0
 80082d8:	9305      	str	r3, [sp, #20]
 80082da:	9b04      	ldr	r3, [sp, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dd07      	ble.n	80082f0 <_dtoa_r+0x818>
 80082e0:	ee18 1a10 	vmov	r1, s16
 80082e4:	461a      	mov	r2, r3
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 fc10 	bl	8008b0c <__lshift>
 80082ec:	ee08 0a10 	vmov	s16, r0
 80082f0:	9b05      	ldr	r3, [sp, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	dd05      	ble.n	8008302 <_dtoa_r+0x82a>
 80082f6:	4631      	mov	r1, r6
 80082f8:	461a      	mov	r2, r3
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fc06 	bl	8008b0c <__lshift>
 8008300:	4606      	mov	r6, r0
 8008302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d06e      	beq.n	80083e6 <_dtoa_r+0x90e>
 8008308:	ee18 0a10 	vmov	r0, s16
 800830c:	4631      	mov	r1, r6
 800830e:	f000 fc6d 	bl	8008bec <__mcmp>
 8008312:	2800      	cmp	r0, #0
 8008314:	da67      	bge.n	80083e6 <_dtoa_r+0x90e>
 8008316:	9b00      	ldr	r3, [sp, #0]
 8008318:	3b01      	subs	r3, #1
 800831a:	ee18 1a10 	vmov	r1, s16
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	220a      	movs	r2, #10
 8008322:	2300      	movs	r3, #0
 8008324:	4620      	mov	r0, r4
 8008326:	f000 fa41 	bl	80087ac <__multadd>
 800832a:	9b08      	ldr	r3, [sp, #32]
 800832c:	ee08 0a10 	vmov	s16, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 81b1 	beq.w	8008698 <_dtoa_r+0xbc0>
 8008336:	2300      	movs	r3, #0
 8008338:	4639      	mov	r1, r7
 800833a:	220a      	movs	r2, #10
 800833c:	4620      	mov	r0, r4
 800833e:	f000 fa35 	bl	80087ac <__multadd>
 8008342:	9b02      	ldr	r3, [sp, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	4607      	mov	r7, r0
 8008348:	f300 808e 	bgt.w	8008468 <_dtoa_r+0x990>
 800834c:	9b06      	ldr	r3, [sp, #24]
 800834e:	2b02      	cmp	r3, #2
 8008350:	dc51      	bgt.n	80083f6 <_dtoa_r+0x91e>
 8008352:	e089      	b.n	8008468 <_dtoa_r+0x990>
 8008354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800835a:	e74b      	b.n	80081f4 <_dtoa_r+0x71c>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	1e5e      	subs	r6, r3, #1
 8008360:	9b07      	ldr	r3, [sp, #28]
 8008362:	42b3      	cmp	r3, r6
 8008364:	bfbf      	itttt	lt
 8008366:	9b07      	ldrlt	r3, [sp, #28]
 8008368:	9607      	strlt	r6, [sp, #28]
 800836a:	1af2      	sublt	r2, r6, r3
 800836c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800836e:	bfb6      	itet	lt
 8008370:	189b      	addlt	r3, r3, r2
 8008372:	1b9e      	subge	r6, r3, r6
 8008374:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	bfb8      	it	lt
 800837a:	2600      	movlt	r6, #0
 800837c:	2b00      	cmp	r3, #0
 800837e:	bfb7      	itett	lt
 8008380:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008384:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008388:	1a9d      	sublt	r5, r3, r2
 800838a:	2300      	movlt	r3, #0
 800838c:	e734      	b.n	80081f8 <_dtoa_r+0x720>
 800838e:	9e07      	ldr	r6, [sp, #28]
 8008390:	9d04      	ldr	r5, [sp, #16]
 8008392:	9f08      	ldr	r7, [sp, #32]
 8008394:	e73b      	b.n	800820e <_dtoa_r+0x736>
 8008396:	9a07      	ldr	r2, [sp, #28]
 8008398:	e767      	b.n	800826a <_dtoa_r+0x792>
 800839a:	9b06      	ldr	r3, [sp, #24]
 800839c:	2b01      	cmp	r3, #1
 800839e:	dc18      	bgt.n	80083d2 <_dtoa_r+0x8fa>
 80083a0:	f1ba 0f00 	cmp.w	sl, #0
 80083a4:	d115      	bne.n	80083d2 <_dtoa_r+0x8fa>
 80083a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083aa:	b993      	cbnz	r3, 80083d2 <_dtoa_r+0x8fa>
 80083ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083b0:	0d1b      	lsrs	r3, r3, #20
 80083b2:	051b      	lsls	r3, r3, #20
 80083b4:	b183      	cbz	r3, 80083d8 <_dtoa_r+0x900>
 80083b6:	9b04      	ldr	r3, [sp, #16]
 80083b8:	3301      	adds	r3, #1
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	9b05      	ldr	r3, [sp, #20]
 80083be:	3301      	adds	r3, #1
 80083c0:	9305      	str	r3, [sp, #20]
 80083c2:	f04f 0801 	mov.w	r8, #1
 80083c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f47f af6a 	bne.w	80082a2 <_dtoa_r+0x7ca>
 80083ce:	2001      	movs	r0, #1
 80083d0:	e76f      	b.n	80082b2 <_dtoa_r+0x7da>
 80083d2:	f04f 0800 	mov.w	r8, #0
 80083d6:	e7f6      	b.n	80083c6 <_dtoa_r+0x8ee>
 80083d8:	4698      	mov	r8, r3
 80083da:	e7f4      	b.n	80083c6 <_dtoa_r+0x8ee>
 80083dc:	f43f af7d 	beq.w	80082da <_dtoa_r+0x802>
 80083e0:	4618      	mov	r0, r3
 80083e2:	301c      	adds	r0, #28
 80083e4:	e772      	b.n	80082cc <_dtoa_r+0x7f4>
 80083e6:	9b03      	ldr	r3, [sp, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	dc37      	bgt.n	800845c <_dtoa_r+0x984>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	dd34      	ble.n	800845c <_dtoa_r+0x984>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	9302      	str	r3, [sp, #8]
 80083f6:	9b02      	ldr	r3, [sp, #8]
 80083f8:	b96b      	cbnz	r3, 8008416 <_dtoa_r+0x93e>
 80083fa:	4631      	mov	r1, r6
 80083fc:	2205      	movs	r2, #5
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 f9d4 	bl	80087ac <__multadd>
 8008404:	4601      	mov	r1, r0
 8008406:	4606      	mov	r6, r0
 8008408:	ee18 0a10 	vmov	r0, s16
 800840c:	f000 fbee 	bl	8008bec <__mcmp>
 8008410:	2800      	cmp	r0, #0
 8008412:	f73f adbb 	bgt.w	8007f8c <_dtoa_r+0x4b4>
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	9d01      	ldr	r5, [sp, #4]
 800841a:	43db      	mvns	r3, r3
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	4631      	mov	r1, r6
 8008424:	4620      	mov	r0, r4
 8008426:	f000 f99f 	bl	8008768 <_Bfree>
 800842a:	2f00      	cmp	r7, #0
 800842c:	f43f aea4 	beq.w	8008178 <_dtoa_r+0x6a0>
 8008430:	f1b8 0f00 	cmp.w	r8, #0
 8008434:	d005      	beq.n	8008442 <_dtoa_r+0x96a>
 8008436:	45b8      	cmp	r8, r7
 8008438:	d003      	beq.n	8008442 <_dtoa_r+0x96a>
 800843a:	4641      	mov	r1, r8
 800843c:	4620      	mov	r0, r4
 800843e:	f000 f993 	bl	8008768 <_Bfree>
 8008442:	4639      	mov	r1, r7
 8008444:	4620      	mov	r0, r4
 8008446:	f000 f98f 	bl	8008768 <_Bfree>
 800844a:	e695      	b.n	8008178 <_dtoa_r+0x6a0>
 800844c:	2600      	movs	r6, #0
 800844e:	4637      	mov	r7, r6
 8008450:	e7e1      	b.n	8008416 <_dtoa_r+0x93e>
 8008452:	9700      	str	r7, [sp, #0]
 8008454:	4637      	mov	r7, r6
 8008456:	e599      	b.n	8007f8c <_dtoa_r+0x4b4>
 8008458:	40240000 	.word	0x40240000
 800845c:	9b08      	ldr	r3, [sp, #32]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 80ca 	beq.w	80085f8 <_dtoa_r+0xb20>
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	2d00      	cmp	r5, #0
 800846a:	dd05      	ble.n	8008478 <_dtoa_r+0x9a0>
 800846c:	4639      	mov	r1, r7
 800846e:	462a      	mov	r2, r5
 8008470:	4620      	mov	r0, r4
 8008472:	f000 fb4b 	bl	8008b0c <__lshift>
 8008476:	4607      	mov	r7, r0
 8008478:	f1b8 0f00 	cmp.w	r8, #0
 800847c:	d05b      	beq.n	8008536 <_dtoa_r+0xa5e>
 800847e:	6879      	ldr	r1, [r7, #4]
 8008480:	4620      	mov	r0, r4
 8008482:	f000 f931 	bl	80086e8 <_Balloc>
 8008486:	4605      	mov	r5, r0
 8008488:	b928      	cbnz	r0, 8008496 <_dtoa_r+0x9be>
 800848a:	4b87      	ldr	r3, [pc, #540]	; (80086a8 <_dtoa_r+0xbd0>)
 800848c:	4602      	mov	r2, r0
 800848e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008492:	f7ff bb3b 	b.w	8007b0c <_dtoa_r+0x34>
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	3202      	adds	r2, #2
 800849a:	0092      	lsls	r2, r2, #2
 800849c:	f107 010c 	add.w	r1, r7, #12
 80084a0:	300c      	adds	r0, #12
 80084a2:	f000 f913 	bl	80086cc <memcpy>
 80084a6:	2201      	movs	r2, #1
 80084a8:	4629      	mov	r1, r5
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 fb2e 	bl	8008b0c <__lshift>
 80084b0:	9b01      	ldr	r3, [sp, #4]
 80084b2:	f103 0901 	add.w	r9, r3, #1
 80084b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80084ba:	4413      	add	r3, r2
 80084bc:	9305      	str	r3, [sp, #20]
 80084be:	f00a 0301 	and.w	r3, sl, #1
 80084c2:	46b8      	mov	r8, r7
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	4607      	mov	r7, r0
 80084c8:	4631      	mov	r1, r6
 80084ca:	ee18 0a10 	vmov	r0, s16
 80084ce:	f7ff fa77 	bl	80079c0 <quorem>
 80084d2:	4641      	mov	r1, r8
 80084d4:	9002      	str	r0, [sp, #8]
 80084d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80084da:	ee18 0a10 	vmov	r0, s16
 80084de:	f000 fb85 	bl	8008bec <__mcmp>
 80084e2:	463a      	mov	r2, r7
 80084e4:	9003      	str	r0, [sp, #12]
 80084e6:	4631      	mov	r1, r6
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fb9b 	bl	8008c24 <__mdiff>
 80084ee:	68c2      	ldr	r2, [r0, #12]
 80084f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80084f4:	4605      	mov	r5, r0
 80084f6:	bb02      	cbnz	r2, 800853a <_dtoa_r+0xa62>
 80084f8:	4601      	mov	r1, r0
 80084fa:	ee18 0a10 	vmov	r0, s16
 80084fe:	f000 fb75 	bl	8008bec <__mcmp>
 8008502:	4602      	mov	r2, r0
 8008504:	4629      	mov	r1, r5
 8008506:	4620      	mov	r0, r4
 8008508:	9207      	str	r2, [sp, #28]
 800850a:	f000 f92d 	bl	8008768 <_Bfree>
 800850e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008512:	ea43 0102 	orr.w	r1, r3, r2
 8008516:	9b04      	ldr	r3, [sp, #16]
 8008518:	430b      	orrs	r3, r1
 800851a:	464d      	mov	r5, r9
 800851c:	d10f      	bne.n	800853e <_dtoa_r+0xa66>
 800851e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008522:	d02a      	beq.n	800857a <_dtoa_r+0xaa2>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	dd02      	ble.n	8008530 <_dtoa_r+0xa58>
 800852a:	9b02      	ldr	r3, [sp, #8]
 800852c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008530:	f88b a000 	strb.w	sl, [fp]
 8008534:	e775      	b.n	8008422 <_dtoa_r+0x94a>
 8008536:	4638      	mov	r0, r7
 8008538:	e7ba      	b.n	80084b0 <_dtoa_r+0x9d8>
 800853a:	2201      	movs	r2, #1
 800853c:	e7e2      	b.n	8008504 <_dtoa_r+0xa2c>
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	db04      	blt.n	800854e <_dtoa_r+0xa76>
 8008544:	9906      	ldr	r1, [sp, #24]
 8008546:	430b      	orrs	r3, r1
 8008548:	9904      	ldr	r1, [sp, #16]
 800854a:	430b      	orrs	r3, r1
 800854c:	d122      	bne.n	8008594 <_dtoa_r+0xabc>
 800854e:	2a00      	cmp	r2, #0
 8008550:	ddee      	ble.n	8008530 <_dtoa_r+0xa58>
 8008552:	ee18 1a10 	vmov	r1, s16
 8008556:	2201      	movs	r2, #1
 8008558:	4620      	mov	r0, r4
 800855a:	f000 fad7 	bl	8008b0c <__lshift>
 800855e:	4631      	mov	r1, r6
 8008560:	ee08 0a10 	vmov	s16, r0
 8008564:	f000 fb42 	bl	8008bec <__mcmp>
 8008568:	2800      	cmp	r0, #0
 800856a:	dc03      	bgt.n	8008574 <_dtoa_r+0xa9c>
 800856c:	d1e0      	bne.n	8008530 <_dtoa_r+0xa58>
 800856e:	f01a 0f01 	tst.w	sl, #1
 8008572:	d0dd      	beq.n	8008530 <_dtoa_r+0xa58>
 8008574:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008578:	d1d7      	bne.n	800852a <_dtoa_r+0xa52>
 800857a:	2339      	movs	r3, #57	; 0x39
 800857c:	f88b 3000 	strb.w	r3, [fp]
 8008580:	462b      	mov	r3, r5
 8008582:	461d      	mov	r5, r3
 8008584:	3b01      	subs	r3, #1
 8008586:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800858a:	2a39      	cmp	r2, #57	; 0x39
 800858c:	d071      	beq.n	8008672 <_dtoa_r+0xb9a>
 800858e:	3201      	adds	r2, #1
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	e746      	b.n	8008422 <_dtoa_r+0x94a>
 8008594:	2a00      	cmp	r2, #0
 8008596:	dd07      	ble.n	80085a8 <_dtoa_r+0xad0>
 8008598:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800859c:	d0ed      	beq.n	800857a <_dtoa_r+0xaa2>
 800859e:	f10a 0301 	add.w	r3, sl, #1
 80085a2:	f88b 3000 	strb.w	r3, [fp]
 80085a6:	e73c      	b.n	8008422 <_dtoa_r+0x94a>
 80085a8:	9b05      	ldr	r3, [sp, #20]
 80085aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80085ae:	4599      	cmp	r9, r3
 80085b0:	d047      	beq.n	8008642 <_dtoa_r+0xb6a>
 80085b2:	ee18 1a10 	vmov	r1, s16
 80085b6:	2300      	movs	r3, #0
 80085b8:	220a      	movs	r2, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 f8f6 	bl	80087ac <__multadd>
 80085c0:	45b8      	cmp	r8, r7
 80085c2:	ee08 0a10 	vmov	s16, r0
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	f04f 020a 	mov.w	r2, #10
 80085ce:	4641      	mov	r1, r8
 80085d0:	4620      	mov	r0, r4
 80085d2:	d106      	bne.n	80085e2 <_dtoa_r+0xb0a>
 80085d4:	f000 f8ea 	bl	80087ac <__multadd>
 80085d8:	4680      	mov	r8, r0
 80085da:	4607      	mov	r7, r0
 80085dc:	f109 0901 	add.w	r9, r9, #1
 80085e0:	e772      	b.n	80084c8 <_dtoa_r+0x9f0>
 80085e2:	f000 f8e3 	bl	80087ac <__multadd>
 80085e6:	4639      	mov	r1, r7
 80085e8:	4680      	mov	r8, r0
 80085ea:	2300      	movs	r3, #0
 80085ec:	220a      	movs	r2, #10
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 f8dc 	bl	80087ac <__multadd>
 80085f4:	4607      	mov	r7, r0
 80085f6:	e7f1      	b.n	80085dc <_dtoa_r+0xb04>
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	9302      	str	r3, [sp, #8]
 80085fc:	9d01      	ldr	r5, [sp, #4]
 80085fe:	ee18 0a10 	vmov	r0, s16
 8008602:	4631      	mov	r1, r6
 8008604:	f7ff f9dc 	bl	80079c0 <quorem>
 8008608:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	f805 ab01 	strb.w	sl, [r5], #1
 8008612:	1aea      	subs	r2, r5, r3
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	4293      	cmp	r3, r2
 8008618:	dd09      	ble.n	800862e <_dtoa_r+0xb56>
 800861a:	ee18 1a10 	vmov	r1, s16
 800861e:	2300      	movs	r3, #0
 8008620:	220a      	movs	r2, #10
 8008622:	4620      	mov	r0, r4
 8008624:	f000 f8c2 	bl	80087ac <__multadd>
 8008628:	ee08 0a10 	vmov	s16, r0
 800862c:	e7e7      	b.n	80085fe <_dtoa_r+0xb26>
 800862e:	9b02      	ldr	r3, [sp, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	bfc8      	it	gt
 8008634:	461d      	movgt	r5, r3
 8008636:	9b01      	ldr	r3, [sp, #4]
 8008638:	bfd8      	it	le
 800863a:	2501      	movle	r5, #1
 800863c:	441d      	add	r5, r3
 800863e:	f04f 0800 	mov.w	r8, #0
 8008642:	ee18 1a10 	vmov	r1, s16
 8008646:	2201      	movs	r2, #1
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fa5f 	bl	8008b0c <__lshift>
 800864e:	4631      	mov	r1, r6
 8008650:	ee08 0a10 	vmov	s16, r0
 8008654:	f000 faca 	bl	8008bec <__mcmp>
 8008658:	2800      	cmp	r0, #0
 800865a:	dc91      	bgt.n	8008580 <_dtoa_r+0xaa8>
 800865c:	d102      	bne.n	8008664 <_dtoa_r+0xb8c>
 800865e:	f01a 0f01 	tst.w	sl, #1
 8008662:	d18d      	bne.n	8008580 <_dtoa_r+0xaa8>
 8008664:	462b      	mov	r3, r5
 8008666:	461d      	mov	r5, r3
 8008668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800866c:	2a30      	cmp	r2, #48	; 0x30
 800866e:	d0fa      	beq.n	8008666 <_dtoa_r+0xb8e>
 8008670:	e6d7      	b.n	8008422 <_dtoa_r+0x94a>
 8008672:	9a01      	ldr	r2, [sp, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d184      	bne.n	8008582 <_dtoa_r+0xaaa>
 8008678:	9b00      	ldr	r3, [sp, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	2331      	movs	r3, #49	; 0x31
 8008680:	7013      	strb	r3, [r2, #0]
 8008682:	e6ce      	b.n	8008422 <_dtoa_r+0x94a>
 8008684:	4b09      	ldr	r3, [pc, #36]	; (80086ac <_dtoa_r+0xbd4>)
 8008686:	f7ff ba95 	b.w	8007bb4 <_dtoa_r+0xdc>
 800868a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800868c:	2b00      	cmp	r3, #0
 800868e:	f47f aa6e 	bne.w	8007b6e <_dtoa_r+0x96>
 8008692:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <_dtoa_r+0xbd8>)
 8008694:	f7ff ba8e 	b.w	8007bb4 <_dtoa_r+0xdc>
 8008698:	9b02      	ldr	r3, [sp, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	dcae      	bgt.n	80085fc <_dtoa_r+0xb24>
 800869e:	9b06      	ldr	r3, [sp, #24]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	f73f aea8 	bgt.w	80083f6 <_dtoa_r+0x91e>
 80086a6:	e7a9      	b.n	80085fc <_dtoa_r+0xb24>
 80086a8:	0800a18b 	.word	0x0800a18b
 80086ac:	0800a0e8 	.word	0x0800a0e8
 80086b0:	0800a10c 	.word	0x0800a10c

080086b4 <_localeconv_r>:
 80086b4:	4800      	ldr	r0, [pc, #0]	; (80086b8 <_localeconv_r+0x4>)
 80086b6:	4770      	bx	lr
 80086b8:	20000164 	.word	0x20000164

080086bc <malloc>:
 80086bc:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <malloc+0xc>)
 80086be:	4601      	mov	r1, r0
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	f000 bc17 	b.w	8008ef4 <_malloc_r>
 80086c6:	bf00      	nop
 80086c8:	20000010 	.word	0x20000010

080086cc <memcpy>:
 80086cc:	440a      	add	r2, r1
 80086ce:	4291      	cmp	r1, r2
 80086d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086d4:	d100      	bne.n	80086d8 <memcpy+0xc>
 80086d6:	4770      	bx	lr
 80086d8:	b510      	push	{r4, lr}
 80086da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086e2:	4291      	cmp	r1, r2
 80086e4:	d1f9      	bne.n	80086da <memcpy+0xe>
 80086e6:	bd10      	pop	{r4, pc}

080086e8 <_Balloc>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086ec:	4604      	mov	r4, r0
 80086ee:	460d      	mov	r5, r1
 80086f0:	b976      	cbnz	r6, 8008710 <_Balloc+0x28>
 80086f2:	2010      	movs	r0, #16
 80086f4:	f7ff ffe2 	bl	80086bc <malloc>
 80086f8:	4602      	mov	r2, r0
 80086fa:	6260      	str	r0, [r4, #36]	; 0x24
 80086fc:	b920      	cbnz	r0, 8008708 <_Balloc+0x20>
 80086fe:	4b18      	ldr	r3, [pc, #96]	; (8008760 <_Balloc+0x78>)
 8008700:	4818      	ldr	r0, [pc, #96]	; (8008764 <_Balloc+0x7c>)
 8008702:	2166      	movs	r1, #102	; 0x66
 8008704:	f000 fdd6 	bl	80092b4 <__assert_func>
 8008708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800870c:	6006      	str	r6, [r0, #0]
 800870e:	60c6      	str	r6, [r0, #12]
 8008710:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008712:	68f3      	ldr	r3, [r6, #12]
 8008714:	b183      	cbz	r3, 8008738 <_Balloc+0x50>
 8008716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800871e:	b9b8      	cbnz	r0, 8008750 <_Balloc+0x68>
 8008720:	2101      	movs	r1, #1
 8008722:	fa01 f605 	lsl.w	r6, r1, r5
 8008726:	1d72      	adds	r2, r6, #5
 8008728:	0092      	lsls	r2, r2, #2
 800872a:	4620      	mov	r0, r4
 800872c:	f000 fb60 	bl	8008df0 <_calloc_r>
 8008730:	b160      	cbz	r0, 800874c <_Balloc+0x64>
 8008732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008736:	e00e      	b.n	8008756 <_Balloc+0x6e>
 8008738:	2221      	movs	r2, #33	; 0x21
 800873a:	2104      	movs	r1, #4
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fb57 	bl	8008df0 <_calloc_r>
 8008742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008744:	60f0      	str	r0, [r6, #12]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e4      	bne.n	8008716 <_Balloc+0x2e>
 800874c:	2000      	movs	r0, #0
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	6802      	ldr	r2, [r0, #0]
 8008752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008756:	2300      	movs	r3, #0
 8008758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800875c:	e7f7      	b.n	800874e <_Balloc+0x66>
 800875e:	bf00      	nop
 8008760:	0800a119 	.word	0x0800a119
 8008764:	0800a19c 	.word	0x0800a19c

08008768 <_Bfree>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800876c:	4605      	mov	r5, r0
 800876e:	460c      	mov	r4, r1
 8008770:	b976      	cbnz	r6, 8008790 <_Bfree+0x28>
 8008772:	2010      	movs	r0, #16
 8008774:	f7ff ffa2 	bl	80086bc <malloc>
 8008778:	4602      	mov	r2, r0
 800877a:	6268      	str	r0, [r5, #36]	; 0x24
 800877c:	b920      	cbnz	r0, 8008788 <_Bfree+0x20>
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <_Bfree+0x3c>)
 8008780:	4809      	ldr	r0, [pc, #36]	; (80087a8 <_Bfree+0x40>)
 8008782:	218a      	movs	r1, #138	; 0x8a
 8008784:	f000 fd96 	bl	80092b4 <__assert_func>
 8008788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800878c:	6006      	str	r6, [r0, #0]
 800878e:	60c6      	str	r6, [r0, #12]
 8008790:	b13c      	cbz	r4, 80087a2 <_Bfree+0x3a>
 8008792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008794:	6862      	ldr	r2, [r4, #4]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800879c:	6021      	str	r1, [r4, #0]
 800879e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	0800a119 	.word	0x0800a119
 80087a8:	0800a19c 	.word	0x0800a19c

080087ac <__multadd>:
 80087ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b0:	690d      	ldr	r5, [r1, #16]
 80087b2:	4607      	mov	r7, r0
 80087b4:	460c      	mov	r4, r1
 80087b6:	461e      	mov	r6, r3
 80087b8:	f101 0c14 	add.w	ip, r1, #20
 80087bc:	2000      	movs	r0, #0
 80087be:	f8dc 3000 	ldr.w	r3, [ip]
 80087c2:	b299      	uxth	r1, r3
 80087c4:	fb02 6101 	mla	r1, r2, r1, r6
 80087c8:	0c1e      	lsrs	r6, r3, #16
 80087ca:	0c0b      	lsrs	r3, r1, #16
 80087cc:	fb02 3306 	mla	r3, r2, r6, r3
 80087d0:	b289      	uxth	r1, r1
 80087d2:	3001      	adds	r0, #1
 80087d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087d8:	4285      	cmp	r5, r0
 80087da:	f84c 1b04 	str.w	r1, [ip], #4
 80087de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087e2:	dcec      	bgt.n	80087be <__multadd+0x12>
 80087e4:	b30e      	cbz	r6, 800882a <__multadd+0x7e>
 80087e6:	68a3      	ldr	r3, [r4, #8]
 80087e8:	42ab      	cmp	r3, r5
 80087ea:	dc19      	bgt.n	8008820 <__multadd+0x74>
 80087ec:	6861      	ldr	r1, [r4, #4]
 80087ee:	4638      	mov	r0, r7
 80087f0:	3101      	adds	r1, #1
 80087f2:	f7ff ff79 	bl	80086e8 <_Balloc>
 80087f6:	4680      	mov	r8, r0
 80087f8:	b928      	cbnz	r0, 8008806 <__multadd+0x5a>
 80087fa:	4602      	mov	r2, r0
 80087fc:	4b0c      	ldr	r3, [pc, #48]	; (8008830 <__multadd+0x84>)
 80087fe:	480d      	ldr	r0, [pc, #52]	; (8008834 <__multadd+0x88>)
 8008800:	21b5      	movs	r1, #181	; 0xb5
 8008802:	f000 fd57 	bl	80092b4 <__assert_func>
 8008806:	6922      	ldr	r2, [r4, #16]
 8008808:	3202      	adds	r2, #2
 800880a:	f104 010c 	add.w	r1, r4, #12
 800880e:	0092      	lsls	r2, r2, #2
 8008810:	300c      	adds	r0, #12
 8008812:	f7ff ff5b 	bl	80086cc <memcpy>
 8008816:	4621      	mov	r1, r4
 8008818:	4638      	mov	r0, r7
 800881a:	f7ff ffa5 	bl	8008768 <_Bfree>
 800881e:	4644      	mov	r4, r8
 8008820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008824:	3501      	adds	r5, #1
 8008826:	615e      	str	r6, [r3, #20]
 8008828:	6125      	str	r5, [r4, #16]
 800882a:	4620      	mov	r0, r4
 800882c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008830:	0800a18b 	.word	0x0800a18b
 8008834:	0800a19c 	.word	0x0800a19c

08008838 <__hi0bits>:
 8008838:	0c03      	lsrs	r3, r0, #16
 800883a:	041b      	lsls	r3, r3, #16
 800883c:	b9d3      	cbnz	r3, 8008874 <__hi0bits+0x3c>
 800883e:	0400      	lsls	r0, r0, #16
 8008840:	2310      	movs	r3, #16
 8008842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008846:	bf04      	itt	eq
 8008848:	0200      	lsleq	r0, r0, #8
 800884a:	3308      	addeq	r3, #8
 800884c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008850:	bf04      	itt	eq
 8008852:	0100      	lsleq	r0, r0, #4
 8008854:	3304      	addeq	r3, #4
 8008856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800885a:	bf04      	itt	eq
 800885c:	0080      	lsleq	r0, r0, #2
 800885e:	3302      	addeq	r3, #2
 8008860:	2800      	cmp	r0, #0
 8008862:	db05      	blt.n	8008870 <__hi0bits+0x38>
 8008864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008868:	f103 0301 	add.w	r3, r3, #1
 800886c:	bf08      	it	eq
 800886e:	2320      	moveq	r3, #32
 8008870:	4618      	mov	r0, r3
 8008872:	4770      	bx	lr
 8008874:	2300      	movs	r3, #0
 8008876:	e7e4      	b.n	8008842 <__hi0bits+0xa>

08008878 <__lo0bits>:
 8008878:	6803      	ldr	r3, [r0, #0]
 800887a:	f013 0207 	ands.w	r2, r3, #7
 800887e:	4601      	mov	r1, r0
 8008880:	d00b      	beq.n	800889a <__lo0bits+0x22>
 8008882:	07da      	lsls	r2, r3, #31
 8008884:	d423      	bmi.n	80088ce <__lo0bits+0x56>
 8008886:	0798      	lsls	r0, r3, #30
 8008888:	bf49      	itett	mi
 800888a:	085b      	lsrmi	r3, r3, #1
 800888c:	089b      	lsrpl	r3, r3, #2
 800888e:	2001      	movmi	r0, #1
 8008890:	600b      	strmi	r3, [r1, #0]
 8008892:	bf5c      	itt	pl
 8008894:	600b      	strpl	r3, [r1, #0]
 8008896:	2002      	movpl	r0, #2
 8008898:	4770      	bx	lr
 800889a:	b298      	uxth	r0, r3
 800889c:	b9a8      	cbnz	r0, 80088ca <__lo0bits+0x52>
 800889e:	0c1b      	lsrs	r3, r3, #16
 80088a0:	2010      	movs	r0, #16
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	b90a      	cbnz	r2, 80088aa <__lo0bits+0x32>
 80088a6:	3008      	adds	r0, #8
 80088a8:	0a1b      	lsrs	r3, r3, #8
 80088aa:	071a      	lsls	r2, r3, #28
 80088ac:	bf04      	itt	eq
 80088ae:	091b      	lsreq	r3, r3, #4
 80088b0:	3004      	addeq	r0, #4
 80088b2:	079a      	lsls	r2, r3, #30
 80088b4:	bf04      	itt	eq
 80088b6:	089b      	lsreq	r3, r3, #2
 80088b8:	3002      	addeq	r0, #2
 80088ba:	07da      	lsls	r2, r3, #31
 80088bc:	d403      	bmi.n	80088c6 <__lo0bits+0x4e>
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	f100 0001 	add.w	r0, r0, #1
 80088c4:	d005      	beq.n	80088d2 <__lo0bits+0x5a>
 80088c6:	600b      	str	r3, [r1, #0]
 80088c8:	4770      	bx	lr
 80088ca:	4610      	mov	r0, r2
 80088cc:	e7e9      	b.n	80088a2 <__lo0bits+0x2a>
 80088ce:	2000      	movs	r0, #0
 80088d0:	4770      	bx	lr
 80088d2:	2020      	movs	r0, #32
 80088d4:	4770      	bx	lr
	...

080088d8 <__i2b>:
 80088d8:	b510      	push	{r4, lr}
 80088da:	460c      	mov	r4, r1
 80088dc:	2101      	movs	r1, #1
 80088de:	f7ff ff03 	bl	80086e8 <_Balloc>
 80088e2:	4602      	mov	r2, r0
 80088e4:	b928      	cbnz	r0, 80088f2 <__i2b+0x1a>
 80088e6:	4b05      	ldr	r3, [pc, #20]	; (80088fc <__i2b+0x24>)
 80088e8:	4805      	ldr	r0, [pc, #20]	; (8008900 <__i2b+0x28>)
 80088ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088ee:	f000 fce1 	bl	80092b4 <__assert_func>
 80088f2:	2301      	movs	r3, #1
 80088f4:	6144      	str	r4, [r0, #20]
 80088f6:	6103      	str	r3, [r0, #16]
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	bf00      	nop
 80088fc:	0800a18b 	.word	0x0800a18b
 8008900:	0800a19c 	.word	0x0800a19c

08008904 <__multiply>:
 8008904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008908:	4691      	mov	r9, r2
 800890a:	690a      	ldr	r2, [r1, #16]
 800890c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008910:	429a      	cmp	r2, r3
 8008912:	bfb8      	it	lt
 8008914:	460b      	movlt	r3, r1
 8008916:	460c      	mov	r4, r1
 8008918:	bfbc      	itt	lt
 800891a:	464c      	movlt	r4, r9
 800891c:	4699      	movlt	r9, r3
 800891e:	6927      	ldr	r7, [r4, #16]
 8008920:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	6861      	ldr	r1, [r4, #4]
 8008928:	eb07 060a 	add.w	r6, r7, sl
 800892c:	42b3      	cmp	r3, r6
 800892e:	b085      	sub	sp, #20
 8008930:	bfb8      	it	lt
 8008932:	3101      	addlt	r1, #1
 8008934:	f7ff fed8 	bl	80086e8 <_Balloc>
 8008938:	b930      	cbnz	r0, 8008948 <__multiply+0x44>
 800893a:	4602      	mov	r2, r0
 800893c:	4b44      	ldr	r3, [pc, #272]	; (8008a50 <__multiply+0x14c>)
 800893e:	4845      	ldr	r0, [pc, #276]	; (8008a54 <__multiply+0x150>)
 8008940:	f240 115d 	movw	r1, #349	; 0x15d
 8008944:	f000 fcb6 	bl	80092b4 <__assert_func>
 8008948:	f100 0514 	add.w	r5, r0, #20
 800894c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008950:	462b      	mov	r3, r5
 8008952:	2200      	movs	r2, #0
 8008954:	4543      	cmp	r3, r8
 8008956:	d321      	bcc.n	800899c <__multiply+0x98>
 8008958:	f104 0314 	add.w	r3, r4, #20
 800895c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008960:	f109 0314 	add.w	r3, r9, #20
 8008964:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008968:	9202      	str	r2, [sp, #8]
 800896a:	1b3a      	subs	r2, r7, r4
 800896c:	3a15      	subs	r2, #21
 800896e:	f022 0203 	bic.w	r2, r2, #3
 8008972:	3204      	adds	r2, #4
 8008974:	f104 0115 	add.w	r1, r4, #21
 8008978:	428f      	cmp	r7, r1
 800897a:	bf38      	it	cc
 800897c:	2204      	movcc	r2, #4
 800897e:	9201      	str	r2, [sp, #4]
 8008980:	9a02      	ldr	r2, [sp, #8]
 8008982:	9303      	str	r3, [sp, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d80c      	bhi.n	80089a2 <__multiply+0x9e>
 8008988:	2e00      	cmp	r6, #0
 800898a:	dd03      	ble.n	8008994 <__multiply+0x90>
 800898c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008990:	2b00      	cmp	r3, #0
 8008992:	d05a      	beq.n	8008a4a <__multiply+0x146>
 8008994:	6106      	str	r6, [r0, #16]
 8008996:	b005      	add	sp, #20
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	f843 2b04 	str.w	r2, [r3], #4
 80089a0:	e7d8      	b.n	8008954 <__multiply+0x50>
 80089a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80089a6:	f1ba 0f00 	cmp.w	sl, #0
 80089aa:	d024      	beq.n	80089f6 <__multiply+0xf2>
 80089ac:	f104 0e14 	add.w	lr, r4, #20
 80089b0:	46a9      	mov	r9, r5
 80089b2:	f04f 0c00 	mov.w	ip, #0
 80089b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80089ba:	f8d9 1000 	ldr.w	r1, [r9]
 80089be:	fa1f fb82 	uxth.w	fp, r2
 80089c2:	b289      	uxth	r1, r1
 80089c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80089c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089cc:	f8d9 2000 	ldr.w	r2, [r9]
 80089d0:	4461      	add	r1, ip
 80089d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80089da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089de:	b289      	uxth	r1, r1
 80089e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80089e4:	4577      	cmp	r7, lr
 80089e6:	f849 1b04 	str.w	r1, [r9], #4
 80089ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089ee:	d8e2      	bhi.n	80089b6 <__multiply+0xb2>
 80089f0:	9a01      	ldr	r2, [sp, #4]
 80089f2:	f845 c002 	str.w	ip, [r5, r2]
 80089f6:	9a03      	ldr	r2, [sp, #12]
 80089f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089fc:	3304      	adds	r3, #4
 80089fe:	f1b9 0f00 	cmp.w	r9, #0
 8008a02:	d020      	beq.n	8008a46 <__multiply+0x142>
 8008a04:	6829      	ldr	r1, [r5, #0]
 8008a06:	f104 0c14 	add.w	ip, r4, #20
 8008a0a:	46ae      	mov	lr, r5
 8008a0c:	f04f 0a00 	mov.w	sl, #0
 8008a10:	f8bc b000 	ldrh.w	fp, [ip]
 8008a14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a18:	fb09 220b 	mla	r2, r9, fp, r2
 8008a1c:	4492      	add	sl, r2
 8008a1e:	b289      	uxth	r1, r1
 8008a20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a24:	f84e 1b04 	str.w	r1, [lr], #4
 8008a28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a2c:	f8be 1000 	ldrh.w	r1, [lr]
 8008a30:	0c12      	lsrs	r2, r2, #16
 8008a32:	fb09 1102 	mla	r1, r9, r2, r1
 8008a36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a3a:	4567      	cmp	r7, ip
 8008a3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a40:	d8e6      	bhi.n	8008a10 <__multiply+0x10c>
 8008a42:	9a01      	ldr	r2, [sp, #4]
 8008a44:	50a9      	str	r1, [r5, r2]
 8008a46:	3504      	adds	r5, #4
 8008a48:	e79a      	b.n	8008980 <__multiply+0x7c>
 8008a4a:	3e01      	subs	r6, #1
 8008a4c:	e79c      	b.n	8008988 <__multiply+0x84>
 8008a4e:	bf00      	nop
 8008a50:	0800a18b 	.word	0x0800a18b
 8008a54:	0800a19c 	.word	0x0800a19c

08008a58 <__pow5mult>:
 8008a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a5c:	4615      	mov	r5, r2
 8008a5e:	f012 0203 	ands.w	r2, r2, #3
 8008a62:	4606      	mov	r6, r0
 8008a64:	460f      	mov	r7, r1
 8008a66:	d007      	beq.n	8008a78 <__pow5mult+0x20>
 8008a68:	4c25      	ldr	r4, [pc, #148]	; (8008b00 <__pow5mult+0xa8>)
 8008a6a:	3a01      	subs	r2, #1
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a72:	f7ff fe9b 	bl	80087ac <__multadd>
 8008a76:	4607      	mov	r7, r0
 8008a78:	10ad      	asrs	r5, r5, #2
 8008a7a:	d03d      	beq.n	8008af8 <__pow5mult+0xa0>
 8008a7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a7e:	b97c      	cbnz	r4, 8008aa0 <__pow5mult+0x48>
 8008a80:	2010      	movs	r0, #16
 8008a82:	f7ff fe1b 	bl	80086bc <malloc>
 8008a86:	4602      	mov	r2, r0
 8008a88:	6270      	str	r0, [r6, #36]	; 0x24
 8008a8a:	b928      	cbnz	r0, 8008a98 <__pow5mult+0x40>
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	; (8008b04 <__pow5mult+0xac>)
 8008a8e:	481e      	ldr	r0, [pc, #120]	; (8008b08 <__pow5mult+0xb0>)
 8008a90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a94:	f000 fc0e 	bl	80092b4 <__assert_func>
 8008a98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a9c:	6004      	str	r4, [r0, #0]
 8008a9e:	60c4      	str	r4, [r0, #12]
 8008aa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008aa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008aa8:	b94c      	cbnz	r4, 8008abe <__pow5mult+0x66>
 8008aaa:	f240 2171 	movw	r1, #625	; 0x271
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff ff12 	bl	80088d8 <__i2b>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008aba:	4604      	mov	r4, r0
 8008abc:	6003      	str	r3, [r0, #0]
 8008abe:	f04f 0900 	mov.w	r9, #0
 8008ac2:	07eb      	lsls	r3, r5, #31
 8008ac4:	d50a      	bpl.n	8008adc <__pow5mult+0x84>
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	4622      	mov	r2, r4
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff ff1a 	bl	8008904 <__multiply>
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	4680      	mov	r8, r0
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7ff fe47 	bl	8008768 <_Bfree>
 8008ada:	4647      	mov	r7, r8
 8008adc:	106d      	asrs	r5, r5, #1
 8008ade:	d00b      	beq.n	8008af8 <__pow5mult+0xa0>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	b938      	cbnz	r0, 8008af4 <__pow5mult+0x9c>
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f7ff ff0b 	bl	8008904 <__multiply>
 8008aee:	6020      	str	r0, [r4, #0]
 8008af0:	f8c0 9000 	str.w	r9, [r0]
 8008af4:	4604      	mov	r4, r0
 8008af6:	e7e4      	b.n	8008ac2 <__pow5mult+0x6a>
 8008af8:	4638      	mov	r0, r7
 8008afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008afe:	bf00      	nop
 8008b00:	0800a2e8 	.word	0x0800a2e8
 8008b04:	0800a119 	.word	0x0800a119
 8008b08:	0800a19c 	.word	0x0800a19c

08008b0c <__lshift>:
 8008b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b10:	460c      	mov	r4, r1
 8008b12:	6849      	ldr	r1, [r1, #4]
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b1a:	68a3      	ldr	r3, [r4, #8]
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	4691      	mov	r9, r2
 8008b20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b24:	f108 0601 	add.w	r6, r8, #1
 8008b28:	42b3      	cmp	r3, r6
 8008b2a:	db0b      	blt.n	8008b44 <__lshift+0x38>
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f7ff fddb 	bl	80086e8 <_Balloc>
 8008b32:	4605      	mov	r5, r0
 8008b34:	b948      	cbnz	r0, 8008b4a <__lshift+0x3e>
 8008b36:	4602      	mov	r2, r0
 8008b38:	4b2a      	ldr	r3, [pc, #168]	; (8008be4 <__lshift+0xd8>)
 8008b3a:	482b      	ldr	r0, [pc, #172]	; (8008be8 <__lshift+0xdc>)
 8008b3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b40:	f000 fbb8 	bl	80092b4 <__assert_func>
 8008b44:	3101      	adds	r1, #1
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	e7ee      	b.n	8008b28 <__lshift+0x1c>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f100 0114 	add.w	r1, r0, #20
 8008b50:	f100 0210 	add.w	r2, r0, #16
 8008b54:	4618      	mov	r0, r3
 8008b56:	4553      	cmp	r3, sl
 8008b58:	db37      	blt.n	8008bca <__lshift+0xbe>
 8008b5a:	6920      	ldr	r0, [r4, #16]
 8008b5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b60:	f104 0314 	add.w	r3, r4, #20
 8008b64:	f019 091f 	ands.w	r9, r9, #31
 8008b68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b70:	d02f      	beq.n	8008bd2 <__lshift+0xc6>
 8008b72:	f1c9 0e20 	rsb	lr, r9, #32
 8008b76:	468a      	mov	sl, r1
 8008b78:	f04f 0c00 	mov.w	ip, #0
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	fa02 f209 	lsl.w	r2, r2, r9
 8008b82:	ea42 020c 	orr.w	r2, r2, ip
 8008b86:	f84a 2b04 	str.w	r2, [sl], #4
 8008b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b8e:	4298      	cmp	r0, r3
 8008b90:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b94:	d8f2      	bhi.n	8008b7c <__lshift+0x70>
 8008b96:	1b03      	subs	r3, r0, r4
 8008b98:	3b15      	subs	r3, #21
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	f104 0215 	add.w	r2, r4, #21
 8008ba4:	4290      	cmp	r0, r2
 8008ba6:	bf38      	it	cc
 8008ba8:	2304      	movcc	r3, #4
 8008baa:	f841 c003 	str.w	ip, [r1, r3]
 8008bae:	f1bc 0f00 	cmp.w	ip, #0
 8008bb2:	d001      	beq.n	8008bb8 <__lshift+0xac>
 8008bb4:	f108 0602 	add.w	r6, r8, #2
 8008bb8:	3e01      	subs	r6, #1
 8008bba:	4638      	mov	r0, r7
 8008bbc:	612e      	str	r6, [r5, #16]
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	f7ff fdd2 	bl	8008768 <_Bfree>
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bca:	f842 0f04 	str.w	r0, [r2, #4]!
 8008bce:	3301      	adds	r3, #1
 8008bd0:	e7c1      	b.n	8008b56 <__lshift+0x4a>
 8008bd2:	3904      	subs	r1, #4
 8008bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bdc:	4298      	cmp	r0, r3
 8008bde:	d8f9      	bhi.n	8008bd4 <__lshift+0xc8>
 8008be0:	e7ea      	b.n	8008bb8 <__lshift+0xac>
 8008be2:	bf00      	nop
 8008be4:	0800a18b 	.word	0x0800a18b
 8008be8:	0800a19c 	.word	0x0800a19c

08008bec <__mcmp>:
 8008bec:	b530      	push	{r4, r5, lr}
 8008bee:	6902      	ldr	r2, [r0, #16]
 8008bf0:	690c      	ldr	r4, [r1, #16]
 8008bf2:	1b12      	subs	r2, r2, r4
 8008bf4:	d10e      	bne.n	8008c14 <__mcmp+0x28>
 8008bf6:	f100 0314 	add.w	r3, r0, #20
 8008bfa:	3114      	adds	r1, #20
 8008bfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c0c:	42a5      	cmp	r5, r4
 8008c0e:	d003      	beq.n	8008c18 <__mcmp+0x2c>
 8008c10:	d305      	bcc.n	8008c1e <__mcmp+0x32>
 8008c12:	2201      	movs	r2, #1
 8008c14:	4610      	mov	r0, r2
 8008c16:	bd30      	pop	{r4, r5, pc}
 8008c18:	4283      	cmp	r3, r0
 8008c1a:	d3f3      	bcc.n	8008c04 <__mcmp+0x18>
 8008c1c:	e7fa      	b.n	8008c14 <__mcmp+0x28>
 8008c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c22:	e7f7      	b.n	8008c14 <__mcmp+0x28>

08008c24 <__mdiff>:
 8008c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	460c      	mov	r4, r1
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4620      	mov	r0, r4
 8008c30:	4690      	mov	r8, r2
 8008c32:	f7ff ffdb 	bl	8008bec <__mcmp>
 8008c36:	1e05      	subs	r5, r0, #0
 8008c38:	d110      	bne.n	8008c5c <__mdiff+0x38>
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f7ff fd53 	bl	80086e8 <_Balloc>
 8008c42:	b930      	cbnz	r0, 8008c52 <__mdiff+0x2e>
 8008c44:	4b3a      	ldr	r3, [pc, #232]	; (8008d30 <__mdiff+0x10c>)
 8008c46:	4602      	mov	r2, r0
 8008c48:	f240 2132 	movw	r1, #562	; 0x232
 8008c4c:	4839      	ldr	r0, [pc, #228]	; (8008d34 <__mdiff+0x110>)
 8008c4e:	f000 fb31 	bl	80092b4 <__assert_func>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5c:	bfa4      	itt	ge
 8008c5e:	4643      	movge	r3, r8
 8008c60:	46a0      	movge	r8, r4
 8008c62:	4630      	mov	r0, r6
 8008c64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c68:	bfa6      	itte	ge
 8008c6a:	461c      	movge	r4, r3
 8008c6c:	2500      	movge	r5, #0
 8008c6e:	2501      	movlt	r5, #1
 8008c70:	f7ff fd3a 	bl	80086e8 <_Balloc>
 8008c74:	b920      	cbnz	r0, 8008c80 <__mdiff+0x5c>
 8008c76:	4b2e      	ldr	r3, [pc, #184]	; (8008d30 <__mdiff+0x10c>)
 8008c78:	4602      	mov	r2, r0
 8008c7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c7e:	e7e5      	b.n	8008c4c <__mdiff+0x28>
 8008c80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c84:	6926      	ldr	r6, [r4, #16]
 8008c86:	60c5      	str	r5, [r0, #12]
 8008c88:	f104 0914 	add.w	r9, r4, #20
 8008c8c:	f108 0514 	add.w	r5, r8, #20
 8008c90:	f100 0e14 	add.w	lr, r0, #20
 8008c94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c9c:	f108 0210 	add.w	r2, r8, #16
 8008ca0:	46f2      	mov	sl, lr
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ca8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008cac:	fa1f f883 	uxth.w	r8, r3
 8008cb0:	fa11 f18b 	uxtah	r1, r1, fp
 8008cb4:	0c1b      	lsrs	r3, r3, #16
 8008cb6:	eba1 0808 	sub.w	r8, r1, r8
 8008cba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008cc2:	fa1f f888 	uxth.w	r8, r8
 8008cc6:	1419      	asrs	r1, r3, #16
 8008cc8:	454e      	cmp	r6, r9
 8008cca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008cce:	f84a 3b04 	str.w	r3, [sl], #4
 8008cd2:	d8e7      	bhi.n	8008ca4 <__mdiff+0x80>
 8008cd4:	1b33      	subs	r3, r6, r4
 8008cd6:	3b15      	subs	r3, #21
 8008cd8:	f023 0303 	bic.w	r3, r3, #3
 8008cdc:	3304      	adds	r3, #4
 8008cde:	3415      	adds	r4, #21
 8008ce0:	42a6      	cmp	r6, r4
 8008ce2:	bf38      	it	cc
 8008ce4:	2304      	movcc	r3, #4
 8008ce6:	441d      	add	r5, r3
 8008ce8:	4473      	add	r3, lr
 8008cea:	469e      	mov	lr, r3
 8008cec:	462e      	mov	r6, r5
 8008cee:	4566      	cmp	r6, ip
 8008cf0:	d30e      	bcc.n	8008d10 <__mdiff+0xec>
 8008cf2:	f10c 0203 	add.w	r2, ip, #3
 8008cf6:	1b52      	subs	r2, r2, r5
 8008cf8:	f022 0203 	bic.w	r2, r2, #3
 8008cfc:	3d03      	subs	r5, #3
 8008cfe:	45ac      	cmp	ip, r5
 8008d00:	bf38      	it	cc
 8008d02:	2200      	movcc	r2, #0
 8008d04:	441a      	add	r2, r3
 8008d06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d0a:	b17b      	cbz	r3, 8008d2c <__mdiff+0x108>
 8008d0c:	6107      	str	r7, [r0, #16]
 8008d0e:	e7a3      	b.n	8008c58 <__mdiff+0x34>
 8008d10:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d14:	fa11 f288 	uxtah	r2, r1, r8
 8008d18:	1414      	asrs	r4, r2, #16
 8008d1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d1e:	b292      	uxth	r2, r2
 8008d20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d24:	f84e 2b04 	str.w	r2, [lr], #4
 8008d28:	1421      	asrs	r1, r4, #16
 8008d2a:	e7e0      	b.n	8008cee <__mdiff+0xca>
 8008d2c:	3f01      	subs	r7, #1
 8008d2e:	e7ea      	b.n	8008d06 <__mdiff+0xe2>
 8008d30:	0800a18b 	.word	0x0800a18b
 8008d34:	0800a19c 	.word	0x0800a19c

08008d38 <__d2b>:
 8008d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	4689      	mov	r9, r1
 8008d3e:	2101      	movs	r1, #1
 8008d40:	ec57 6b10 	vmov	r6, r7, d0
 8008d44:	4690      	mov	r8, r2
 8008d46:	f7ff fccf 	bl	80086e8 <_Balloc>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	b930      	cbnz	r0, 8008d5c <__d2b+0x24>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	4b25      	ldr	r3, [pc, #148]	; (8008de8 <__d2b+0xb0>)
 8008d52:	4826      	ldr	r0, [pc, #152]	; (8008dec <__d2b+0xb4>)
 8008d54:	f240 310a 	movw	r1, #778	; 0x30a
 8008d58:	f000 faac 	bl	80092b4 <__assert_func>
 8008d5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d64:	bb35      	cbnz	r5, 8008db4 <__d2b+0x7c>
 8008d66:	2e00      	cmp	r6, #0
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	d028      	beq.n	8008dbe <__d2b+0x86>
 8008d6c:	4668      	mov	r0, sp
 8008d6e:	9600      	str	r6, [sp, #0]
 8008d70:	f7ff fd82 	bl	8008878 <__lo0bits>
 8008d74:	9900      	ldr	r1, [sp, #0]
 8008d76:	b300      	cbz	r0, 8008dba <__d2b+0x82>
 8008d78:	9a01      	ldr	r2, [sp, #4]
 8008d7a:	f1c0 0320 	rsb	r3, r0, #32
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	430b      	orrs	r3, r1
 8008d84:	40c2      	lsrs	r2, r0
 8008d86:	6163      	str	r3, [r4, #20]
 8008d88:	9201      	str	r2, [sp, #4]
 8008d8a:	9b01      	ldr	r3, [sp, #4]
 8008d8c:	61a3      	str	r3, [r4, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bf14      	ite	ne
 8008d92:	2202      	movne	r2, #2
 8008d94:	2201      	moveq	r2, #1
 8008d96:	6122      	str	r2, [r4, #16]
 8008d98:	b1d5      	cbz	r5, 8008dd0 <__d2b+0x98>
 8008d9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d9e:	4405      	add	r5, r0
 8008da0:	f8c9 5000 	str.w	r5, [r9]
 8008da4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008da8:	f8c8 0000 	str.w	r0, [r8]
 8008dac:	4620      	mov	r0, r4
 8008dae:	b003      	add	sp, #12
 8008db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008db8:	e7d5      	b.n	8008d66 <__d2b+0x2e>
 8008dba:	6161      	str	r1, [r4, #20]
 8008dbc:	e7e5      	b.n	8008d8a <__d2b+0x52>
 8008dbe:	a801      	add	r0, sp, #4
 8008dc0:	f7ff fd5a 	bl	8008878 <__lo0bits>
 8008dc4:	9b01      	ldr	r3, [sp, #4]
 8008dc6:	6163      	str	r3, [r4, #20]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	6122      	str	r2, [r4, #16]
 8008dcc:	3020      	adds	r0, #32
 8008dce:	e7e3      	b.n	8008d98 <__d2b+0x60>
 8008dd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dd8:	f8c9 0000 	str.w	r0, [r9]
 8008ddc:	6918      	ldr	r0, [r3, #16]
 8008dde:	f7ff fd2b 	bl	8008838 <__hi0bits>
 8008de2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008de6:	e7df      	b.n	8008da8 <__d2b+0x70>
 8008de8:	0800a18b 	.word	0x0800a18b
 8008dec:	0800a19c 	.word	0x0800a19c

08008df0 <_calloc_r>:
 8008df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df2:	fba1 2402 	umull	r2, r4, r1, r2
 8008df6:	b94c      	cbnz	r4, 8008e0c <_calloc_r+0x1c>
 8008df8:	4611      	mov	r1, r2
 8008dfa:	9201      	str	r2, [sp, #4]
 8008dfc:	f000 f87a 	bl	8008ef4 <_malloc_r>
 8008e00:	9a01      	ldr	r2, [sp, #4]
 8008e02:	4605      	mov	r5, r0
 8008e04:	b930      	cbnz	r0, 8008e14 <_calloc_r+0x24>
 8008e06:	4628      	mov	r0, r5
 8008e08:	b003      	add	sp, #12
 8008e0a:	bd30      	pop	{r4, r5, pc}
 8008e0c:	220c      	movs	r2, #12
 8008e0e:	6002      	str	r2, [r0, #0]
 8008e10:	2500      	movs	r5, #0
 8008e12:	e7f8      	b.n	8008e06 <_calloc_r+0x16>
 8008e14:	4621      	mov	r1, r4
 8008e16:	f7fe f8f7 	bl	8007008 <memset>
 8008e1a:	e7f4      	b.n	8008e06 <_calloc_r+0x16>

08008e1c <_free_r>:
 8008e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d044      	beq.n	8008eac <_free_r+0x90>
 8008e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e26:	9001      	str	r0, [sp, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e2e:	bfb8      	it	lt
 8008e30:	18e4      	addlt	r4, r4, r3
 8008e32:	f000 fa9b 	bl	800936c <__malloc_lock>
 8008e36:	4a1e      	ldr	r2, [pc, #120]	; (8008eb0 <_free_r+0x94>)
 8008e38:	9801      	ldr	r0, [sp, #4]
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	b933      	cbnz	r3, 8008e4c <_free_r+0x30>
 8008e3e:	6063      	str	r3, [r4, #4]
 8008e40:	6014      	str	r4, [r2, #0]
 8008e42:	b003      	add	sp, #12
 8008e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e48:	f000 ba96 	b.w	8009378 <__malloc_unlock>
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	d908      	bls.n	8008e62 <_free_r+0x46>
 8008e50:	6825      	ldr	r5, [r4, #0]
 8008e52:	1961      	adds	r1, r4, r5
 8008e54:	428b      	cmp	r3, r1
 8008e56:	bf01      	itttt	eq
 8008e58:	6819      	ldreq	r1, [r3, #0]
 8008e5a:	685b      	ldreq	r3, [r3, #4]
 8008e5c:	1949      	addeq	r1, r1, r5
 8008e5e:	6021      	streq	r1, [r4, #0]
 8008e60:	e7ed      	b.n	8008e3e <_free_r+0x22>
 8008e62:	461a      	mov	r2, r3
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	b10b      	cbz	r3, 8008e6c <_free_r+0x50>
 8008e68:	42a3      	cmp	r3, r4
 8008e6a:	d9fa      	bls.n	8008e62 <_free_r+0x46>
 8008e6c:	6811      	ldr	r1, [r2, #0]
 8008e6e:	1855      	adds	r5, r2, r1
 8008e70:	42a5      	cmp	r5, r4
 8008e72:	d10b      	bne.n	8008e8c <_free_r+0x70>
 8008e74:	6824      	ldr	r4, [r4, #0]
 8008e76:	4421      	add	r1, r4
 8008e78:	1854      	adds	r4, r2, r1
 8008e7a:	42a3      	cmp	r3, r4
 8008e7c:	6011      	str	r1, [r2, #0]
 8008e7e:	d1e0      	bne.n	8008e42 <_free_r+0x26>
 8008e80:	681c      	ldr	r4, [r3, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	6053      	str	r3, [r2, #4]
 8008e86:	4421      	add	r1, r4
 8008e88:	6011      	str	r1, [r2, #0]
 8008e8a:	e7da      	b.n	8008e42 <_free_r+0x26>
 8008e8c:	d902      	bls.n	8008e94 <_free_r+0x78>
 8008e8e:	230c      	movs	r3, #12
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	e7d6      	b.n	8008e42 <_free_r+0x26>
 8008e94:	6825      	ldr	r5, [r4, #0]
 8008e96:	1961      	adds	r1, r4, r5
 8008e98:	428b      	cmp	r3, r1
 8008e9a:	bf04      	itt	eq
 8008e9c:	6819      	ldreq	r1, [r3, #0]
 8008e9e:	685b      	ldreq	r3, [r3, #4]
 8008ea0:	6063      	str	r3, [r4, #4]
 8008ea2:	bf04      	itt	eq
 8008ea4:	1949      	addeq	r1, r1, r5
 8008ea6:	6021      	streq	r1, [r4, #0]
 8008ea8:	6054      	str	r4, [r2, #4]
 8008eaa:	e7ca      	b.n	8008e42 <_free_r+0x26>
 8008eac:	b003      	add	sp, #12
 8008eae:	bd30      	pop	{r4, r5, pc}
 8008eb0:	20000344 	.word	0x20000344

08008eb4 <sbrk_aligned>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	4e0e      	ldr	r6, [pc, #56]	; (8008ef0 <sbrk_aligned+0x3c>)
 8008eb8:	460c      	mov	r4, r1
 8008eba:	6831      	ldr	r1, [r6, #0]
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	b911      	cbnz	r1, 8008ec6 <sbrk_aligned+0x12>
 8008ec0:	f000 f9e8 	bl	8009294 <_sbrk_r>
 8008ec4:	6030      	str	r0, [r6, #0]
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 f9e3 	bl	8009294 <_sbrk_r>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	d00a      	beq.n	8008ee8 <sbrk_aligned+0x34>
 8008ed2:	1cc4      	adds	r4, r0, #3
 8008ed4:	f024 0403 	bic.w	r4, r4, #3
 8008ed8:	42a0      	cmp	r0, r4
 8008eda:	d007      	beq.n	8008eec <sbrk_aligned+0x38>
 8008edc:	1a21      	subs	r1, r4, r0
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f000 f9d8 	bl	8009294 <_sbrk_r>
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d101      	bne.n	8008eec <sbrk_aligned+0x38>
 8008ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8008eec:	4620      	mov	r0, r4
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	20000348 	.word	0x20000348

08008ef4 <_malloc_r>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	1ccd      	adds	r5, r1, #3
 8008efa:	f025 0503 	bic.w	r5, r5, #3
 8008efe:	3508      	adds	r5, #8
 8008f00:	2d0c      	cmp	r5, #12
 8008f02:	bf38      	it	cc
 8008f04:	250c      	movcc	r5, #12
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	4607      	mov	r7, r0
 8008f0a:	db01      	blt.n	8008f10 <_malloc_r+0x1c>
 8008f0c:	42a9      	cmp	r1, r5
 8008f0e:	d905      	bls.n	8008f1c <_malloc_r+0x28>
 8008f10:	230c      	movs	r3, #12
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	2600      	movs	r6, #0
 8008f16:	4630      	mov	r0, r6
 8008f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f1c:	4e2e      	ldr	r6, [pc, #184]	; (8008fd8 <_malloc_r+0xe4>)
 8008f1e:	f000 fa25 	bl	800936c <__malloc_lock>
 8008f22:	6833      	ldr	r3, [r6, #0]
 8008f24:	461c      	mov	r4, r3
 8008f26:	bb34      	cbnz	r4, 8008f76 <_malloc_r+0x82>
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	f7ff ffc2 	bl	8008eb4 <sbrk_aligned>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	4604      	mov	r4, r0
 8008f34:	d14d      	bne.n	8008fd2 <_malloc_r+0xde>
 8008f36:	6834      	ldr	r4, [r6, #0]
 8008f38:	4626      	mov	r6, r4
 8008f3a:	2e00      	cmp	r6, #0
 8008f3c:	d140      	bne.n	8008fc0 <_malloc_r+0xcc>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	4631      	mov	r1, r6
 8008f42:	4638      	mov	r0, r7
 8008f44:	eb04 0803 	add.w	r8, r4, r3
 8008f48:	f000 f9a4 	bl	8009294 <_sbrk_r>
 8008f4c:	4580      	cmp	r8, r0
 8008f4e:	d13a      	bne.n	8008fc6 <_malloc_r+0xd2>
 8008f50:	6821      	ldr	r1, [r4, #0]
 8008f52:	3503      	adds	r5, #3
 8008f54:	1a6d      	subs	r5, r5, r1
 8008f56:	f025 0503 	bic.w	r5, r5, #3
 8008f5a:	3508      	adds	r5, #8
 8008f5c:	2d0c      	cmp	r5, #12
 8008f5e:	bf38      	it	cc
 8008f60:	250c      	movcc	r5, #12
 8008f62:	4629      	mov	r1, r5
 8008f64:	4638      	mov	r0, r7
 8008f66:	f7ff ffa5 	bl	8008eb4 <sbrk_aligned>
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d02b      	beq.n	8008fc6 <_malloc_r+0xd2>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	442b      	add	r3, r5
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	e00e      	b.n	8008f94 <_malloc_r+0xa0>
 8008f76:	6822      	ldr	r2, [r4, #0]
 8008f78:	1b52      	subs	r2, r2, r5
 8008f7a:	d41e      	bmi.n	8008fba <_malloc_r+0xc6>
 8008f7c:	2a0b      	cmp	r2, #11
 8008f7e:	d916      	bls.n	8008fae <_malloc_r+0xba>
 8008f80:	1961      	adds	r1, r4, r5
 8008f82:	42a3      	cmp	r3, r4
 8008f84:	6025      	str	r5, [r4, #0]
 8008f86:	bf18      	it	ne
 8008f88:	6059      	strne	r1, [r3, #4]
 8008f8a:	6863      	ldr	r3, [r4, #4]
 8008f8c:	bf08      	it	eq
 8008f8e:	6031      	streq	r1, [r6, #0]
 8008f90:	5162      	str	r2, [r4, r5]
 8008f92:	604b      	str	r3, [r1, #4]
 8008f94:	4638      	mov	r0, r7
 8008f96:	f104 060b 	add.w	r6, r4, #11
 8008f9a:	f000 f9ed 	bl	8009378 <__malloc_unlock>
 8008f9e:	f026 0607 	bic.w	r6, r6, #7
 8008fa2:	1d23      	adds	r3, r4, #4
 8008fa4:	1af2      	subs	r2, r6, r3
 8008fa6:	d0b6      	beq.n	8008f16 <_malloc_r+0x22>
 8008fa8:	1b9b      	subs	r3, r3, r6
 8008faa:	50a3      	str	r3, [r4, r2]
 8008fac:	e7b3      	b.n	8008f16 <_malloc_r+0x22>
 8008fae:	6862      	ldr	r2, [r4, #4]
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	bf0c      	ite	eq
 8008fb4:	6032      	streq	r2, [r6, #0]
 8008fb6:	605a      	strne	r2, [r3, #4]
 8008fb8:	e7ec      	b.n	8008f94 <_malloc_r+0xa0>
 8008fba:	4623      	mov	r3, r4
 8008fbc:	6864      	ldr	r4, [r4, #4]
 8008fbe:	e7b2      	b.n	8008f26 <_malloc_r+0x32>
 8008fc0:	4634      	mov	r4, r6
 8008fc2:	6876      	ldr	r6, [r6, #4]
 8008fc4:	e7b9      	b.n	8008f3a <_malloc_r+0x46>
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	603b      	str	r3, [r7, #0]
 8008fca:	4638      	mov	r0, r7
 8008fcc:	f000 f9d4 	bl	8009378 <__malloc_unlock>
 8008fd0:	e7a1      	b.n	8008f16 <_malloc_r+0x22>
 8008fd2:	6025      	str	r5, [r4, #0]
 8008fd4:	e7de      	b.n	8008f94 <_malloc_r+0xa0>
 8008fd6:	bf00      	nop
 8008fd8:	20000344 	.word	0x20000344

08008fdc <__ssputs_r>:
 8008fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fe0:	688e      	ldr	r6, [r1, #8]
 8008fe2:	429e      	cmp	r6, r3
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	4690      	mov	r8, r2
 8008fea:	461f      	mov	r7, r3
 8008fec:	d838      	bhi.n	8009060 <__ssputs_r+0x84>
 8008fee:	898a      	ldrh	r2, [r1, #12]
 8008ff0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ff4:	d032      	beq.n	800905c <__ssputs_r+0x80>
 8008ff6:	6825      	ldr	r5, [r4, #0]
 8008ff8:	6909      	ldr	r1, [r1, #16]
 8008ffa:	eba5 0901 	sub.w	r9, r5, r1
 8008ffe:	6965      	ldr	r5, [r4, #20]
 8009000:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009008:	3301      	adds	r3, #1
 800900a:	444b      	add	r3, r9
 800900c:	106d      	asrs	r5, r5, #1
 800900e:	429d      	cmp	r5, r3
 8009010:	bf38      	it	cc
 8009012:	461d      	movcc	r5, r3
 8009014:	0553      	lsls	r3, r2, #21
 8009016:	d531      	bpl.n	800907c <__ssputs_r+0xa0>
 8009018:	4629      	mov	r1, r5
 800901a:	f7ff ff6b 	bl	8008ef4 <_malloc_r>
 800901e:	4606      	mov	r6, r0
 8009020:	b950      	cbnz	r0, 8009038 <__ssputs_r+0x5c>
 8009022:	230c      	movs	r3, #12
 8009024:	f8ca 3000 	str.w	r3, [sl]
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009038:	6921      	ldr	r1, [r4, #16]
 800903a:	464a      	mov	r2, r9
 800903c:	f7ff fb46 	bl	80086cc <memcpy>
 8009040:	89a3      	ldrh	r3, [r4, #12]
 8009042:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	6126      	str	r6, [r4, #16]
 800904e:	6165      	str	r5, [r4, #20]
 8009050:	444e      	add	r6, r9
 8009052:	eba5 0509 	sub.w	r5, r5, r9
 8009056:	6026      	str	r6, [r4, #0]
 8009058:	60a5      	str	r5, [r4, #8]
 800905a:	463e      	mov	r6, r7
 800905c:	42be      	cmp	r6, r7
 800905e:	d900      	bls.n	8009062 <__ssputs_r+0x86>
 8009060:	463e      	mov	r6, r7
 8009062:	6820      	ldr	r0, [r4, #0]
 8009064:	4632      	mov	r2, r6
 8009066:	4641      	mov	r1, r8
 8009068:	f000 f966 	bl	8009338 <memmove>
 800906c:	68a3      	ldr	r3, [r4, #8]
 800906e:	1b9b      	subs	r3, r3, r6
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	4433      	add	r3, r6
 8009076:	6023      	str	r3, [r4, #0]
 8009078:	2000      	movs	r0, #0
 800907a:	e7db      	b.n	8009034 <__ssputs_r+0x58>
 800907c:	462a      	mov	r2, r5
 800907e:	f000 f981 	bl	8009384 <_realloc_r>
 8009082:	4606      	mov	r6, r0
 8009084:	2800      	cmp	r0, #0
 8009086:	d1e1      	bne.n	800904c <__ssputs_r+0x70>
 8009088:	6921      	ldr	r1, [r4, #16]
 800908a:	4650      	mov	r0, sl
 800908c:	f7ff fec6 	bl	8008e1c <_free_r>
 8009090:	e7c7      	b.n	8009022 <__ssputs_r+0x46>
	...

08009094 <_svfiprintf_r>:
 8009094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	4698      	mov	r8, r3
 800909a:	898b      	ldrh	r3, [r1, #12]
 800909c:	061b      	lsls	r3, r3, #24
 800909e:	b09d      	sub	sp, #116	; 0x74
 80090a0:	4607      	mov	r7, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	4614      	mov	r4, r2
 80090a6:	d50e      	bpl.n	80090c6 <_svfiprintf_r+0x32>
 80090a8:	690b      	ldr	r3, [r1, #16]
 80090aa:	b963      	cbnz	r3, 80090c6 <_svfiprintf_r+0x32>
 80090ac:	2140      	movs	r1, #64	; 0x40
 80090ae:	f7ff ff21 	bl	8008ef4 <_malloc_r>
 80090b2:	6028      	str	r0, [r5, #0]
 80090b4:	6128      	str	r0, [r5, #16]
 80090b6:	b920      	cbnz	r0, 80090c2 <_svfiprintf_r+0x2e>
 80090b8:	230c      	movs	r3, #12
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	e0d1      	b.n	8009266 <_svfiprintf_r+0x1d2>
 80090c2:	2340      	movs	r3, #64	; 0x40
 80090c4:	616b      	str	r3, [r5, #20]
 80090c6:	2300      	movs	r3, #0
 80090c8:	9309      	str	r3, [sp, #36]	; 0x24
 80090ca:	2320      	movs	r3, #32
 80090cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090d4:	2330      	movs	r3, #48	; 0x30
 80090d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009280 <_svfiprintf_r+0x1ec>
 80090da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090de:	f04f 0901 	mov.w	r9, #1
 80090e2:	4623      	mov	r3, r4
 80090e4:	469a      	mov	sl, r3
 80090e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ea:	b10a      	cbz	r2, 80090f0 <_svfiprintf_r+0x5c>
 80090ec:	2a25      	cmp	r2, #37	; 0x25
 80090ee:	d1f9      	bne.n	80090e4 <_svfiprintf_r+0x50>
 80090f0:	ebba 0b04 	subs.w	fp, sl, r4
 80090f4:	d00b      	beq.n	800910e <_svfiprintf_r+0x7a>
 80090f6:	465b      	mov	r3, fp
 80090f8:	4622      	mov	r2, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	4638      	mov	r0, r7
 80090fe:	f7ff ff6d 	bl	8008fdc <__ssputs_r>
 8009102:	3001      	adds	r0, #1
 8009104:	f000 80aa 	beq.w	800925c <_svfiprintf_r+0x1c8>
 8009108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800910a:	445a      	add	r2, fp
 800910c:	9209      	str	r2, [sp, #36]	; 0x24
 800910e:	f89a 3000 	ldrb.w	r3, [sl]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 80a2 	beq.w	800925c <_svfiprintf_r+0x1c8>
 8009118:	2300      	movs	r3, #0
 800911a:	f04f 32ff 	mov.w	r2, #4294967295
 800911e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009122:	f10a 0a01 	add.w	sl, sl, #1
 8009126:	9304      	str	r3, [sp, #16]
 8009128:	9307      	str	r3, [sp, #28]
 800912a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800912e:	931a      	str	r3, [sp, #104]	; 0x68
 8009130:	4654      	mov	r4, sl
 8009132:	2205      	movs	r2, #5
 8009134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009138:	4851      	ldr	r0, [pc, #324]	; (8009280 <_svfiprintf_r+0x1ec>)
 800913a:	f7f7 f851 	bl	80001e0 <memchr>
 800913e:	9a04      	ldr	r2, [sp, #16]
 8009140:	b9d8      	cbnz	r0, 800917a <_svfiprintf_r+0xe6>
 8009142:	06d0      	lsls	r0, r2, #27
 8009144:	bf44      	itt	mi
 8009146:	2320      	movmi	r3, #32
 8009148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800914c:	0711      	lsls	r1, r2, #28
 800914e:	bf44      	itt	mi
 8009150:	232b      	movmi	r3, #43	; 0x2b
 8009152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009156:	f89a 3000 	ldrb.w	r3, [sl]
 800915a:	2b2a      	cmp	r3, #42	; 0x2a
 800915c:	d015      	beq.n	800918a <_svfiprintf_r+0xf6>
 800915e:	9a07      	ldr	r2, [sp, #28]
 8009160:	4654      	mov	r4, sl
 8009162:	2000      	movs	r0, #0
 8009164:	f04f 0c0a 	mov.w	ip, #10
 8009168:	4621      	mov	r1, r4
 800916a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800916e:	3b30      	subs	r3, #48	; 0x30
 8009170:	2b09      	cmp	r3, #9
 8009172:	d94e      	bls.n	8009212 <_svfiprintf_r+0x17e>
 8009174:	b1b0      	cbz	r0, 80091a4 <_svfiprintf_r+0x110>
 8009176:	9207      	str	r2, [sp, #28]
 8009178:	e014      	b.n	80091a4 <_svfiprintf_r+0x110>
 800917a:	eba0 0308 	sub.w	r3, r0, r8
 800917e:	fa09 f303 	lsl.w	r3, r9, r3
 8009182:	4313      	orrs	r3, r2
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	46a2      	mov	sl, r4
 8009188:	e7d2      	b.n	8009130 <_svfiprintf_r+0x9c>
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	1d19      	adds	r1, r3, #4
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	9103      	str	r1, [sp, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	bfbb      	ittet	lt
 8009196:	425b      	neglt	r3, r3
 8009198:	f042 0202 	orrlt.w	r2, r2, #2
 800919c:	9307      	strge	r3, [sp, #28]
 800919e:	9307      	strlt	r3, [sp, #28]
 80091a0:	bfb8      	it	lt
 80091a2:	9204      	strlt	r2, [sp, #16]
 80091a4:	7823      	ldrb	r3, [r4, #0]
 80091a6:	2b2e      	cmp	r3, #46	; 0x2e
 80091a8:	d10c      	bne.n	80091c4 <_svfiprintf_r+0x130>
 80091aa:	7863      	ldrb	r3, [r4, #1]
 80091ac:	2b2a      	cmp	r3, #42	; 0x2a
 80091ae:	d135      	bne.n	800921c <_svfiprintf_r+0x188>
 80091b0:	9b03      	ldr	r3, [sp, #12]
 80091b2:	1d1a      	adds	r2, r3, #4
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	9203      	str	r2, [sp, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfb8      	it	lt
 80091bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80091c0:	3402      	adds	r4, #2
 80091c2:	9305      	str	r3, [sp, #20]
 80091c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009290 <_svfiprintf_r+0x1fc>
 80091c8:	7821      	ldrb	r1, [r4, #0]
 80091ca:	2203      	movs	r2, #3
 80091cc:	4650      	mov	r0, sl
 80091ce:	f7f7 f807 	bl	80001e0 <memchr>
 80091d2:	b140      	cbz	r0, 80091e6 <_svfiprintf_r+0x152>
 80091d4:	2340      	movs	r3, #64	; 0x40
 80091d6:	eba0 000a 	sub.w	r0, r0, sl
 80091da:	fa03 f000 	lsl.w	r0, r3, r0
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	4303      	orrs	r3, r0
 80091e2:	3401      	adds	r4, #1
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ea:	4826      	ldr	r0, [pc, #152]	; (8009284 <_svfiprintf_r+0x1f0>)
 80091ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091f0:	2206      	movs	r2, #6
 80091f2:	f7f6 fff5 	bl	80001e0 <memchr>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d038      	beq.n	800926c <_svfiprintf_r+0x1d8>
 80091fa:	4b23      	ldr	r3, [pc, #140]	; (8009288 <_svfiprintf_r+0x1f4>)
 80091fc:	bb1b      	cbnz	r3, 8009246 <_svfiprintf_r+0x1b2>
 80091fe:	9b03      	ldr	r3, [sp, #12]
 8009200:	3307      	adds	r3, #7
 8009202:	f023 0307 	bic.w	r3, r3, #7
 8009206:	3308      	adds	r3, #8
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800920c:	4433      	add	r3, r6
 800920e:	9309      	str	r3, [sp, #36]	; 0x24
 8009210:	e767      	b.n	80090e2 <_svfiprintf_r+0x4e>
 8009212:	fb0c 3202 	mla	r2, ip, r2, r3
 8009216:	460c      	mov	r4, r1
 8009218:	2001      	movs	r0, #1
 800921a:	e7a5      	b.n	8009168 <_svfiprintf_r+0xd4>
 800921c:	2300      	movs	r3, #0
 800921e:	3401      	adds	r4, #1
 8009220:	9305      	str	r3, [sp, #20]
 8009222:	4619      	mov	r1, r3
 8009224:	f04f 0c0a 	mov.w	ip, #10
 8009228:	4620      	mov	r0, r4
 800922a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800922e:	3a30      	subs	r2, #48	; 0x30
 8009230:	2a09      	cmp	r2, #9
 8009232:	d903      	bls.n	800923c <_svfiprintf_r+0x1a8>
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0c5      	beq.n	80091c4 <_svfiprintf_r+0x130>
 8009238:	9105      	str	r1, [sp, #20]
 800923a:	e7c3      	b.n	80091c4 <_svfiprintf_r+0x130>
 800923c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009240:	4604      	mov	r4, r0
 8009242:	2301      	movs	r3, #1
 8009244:	e7f0      	b.n	8009228 <_svfiprintf_r+0x194>
 8009246:	ab03      	add	r3, sp, #12
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	462a      	mov	r2, r5
 800924c:	4b0f      	ldr	r3, [pc, #60]	; (800928c <_svfiprintf_r+0x1f8>)
 800924e:	a904      	add	r1, sp, #16
 8009250:	4638      	mov	r0, r7
 8009252:	f7fd ff81 	bl	8007158 <_printf_float>
 8009256:	1c42      	adds	r2, r0, #1
 8009258:	4606      	mov	r6, r0
 800925a:	d1d6      	bne.n	800920a <_svfiprintf_r+0x176>
 800925c:	89ab      	ldrh	r3, [r5, #12]
 800925e:	065b      	lsls	r3, r3, #25
 8009260:	f53f af2c 	bmi.w	80090bc <_svfiprintf_r+0x28>
 8009264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009266:	b01d      	add	sp, #116	; 0x74
 8009268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	ab03      	add	r3, sp, #12
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	462a      	mov	r2, r5
 8009272:	4b06      	ldr	r3, [pc, #24]	; (800928c <_svfiprintf_r+0x1f8>)
 8009274:	a904      	add	r1, sp, #16
 8009276:	4638      	mov	r0, r7
 8009278:	f7fe fa12 	bl	80076a0 <_printf_i>
 800927c:	e7eb      	b.n	8009256 <_svfiprintf_r+0x1c2>
 800927e:	bf00      	nop
 8009280:	0800a2f4 	.word	0x0800a2f4
 8009284:	0800a2fe 	.word	0x0800a2fe
 8009288:	08007159 	.word	0x08007159
 800928c:	08008fdd 	.word	0x08008fdd
 8009290:	0800a2fa 	.word	0x0800a2fa

08009294 <_sbrk_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4d06      	ldr	r5, [pc, #24]	; (80092b0 <_sbrk_r+0x1c>)
 8009298:	2300      	movs	r3, #0
 800929a:	4604      	mov	r4, r0
 800929c:	4608      	mov	r0, r1
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	f7f9 ff24 	bl	80030ec <_sbrk>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_sbrk_r+0x1a>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_sbrk_r+0x1a>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	2000034c 	.word	0x2000034c

080092b4 <__assert_func>:
 80092b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092b6:	4614      	mov	r4, r2
 80092b8:	461a      	mov	r2, r3
 80092ba:	4b09      	ldr	r3, [pc, #36]	; (80092e0 <__assert_func+0x2c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4605      	mov	r5, r0
 80092c0:	68d8      	ldr	r0, [r3, #12]
 80092c2:	b14c      	cbz	r4, 80092d8 <__assert_func+0x24>
 80092c4:	4b07      	ldr	r3, [pc, #28]	; (80092e4 <__assert_func+0x30>)
 80092c6:	9100      	str	r1, [sp, #0]
 80092c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092cc:	4906      	ldr	r1, [pc, #24]	; (80092e8 <__assert_func+0x34>)
 80092ce:	462b      	mov	r3, r5
 80092d0:	f000 f80e 	bl	80092f0 <fiprintf>
 80092d4:	f000 faac 	bl	8009830 <abort>
 80092d8:	4b04      	ldr	r3, [pc, #16]	; (80092ec <__assert_func+0x38>)
 80092da:	461c      	mov	r4, r3
 80092dc:	e7f3      	b.n	80092c6 <__assert_func+0x12>
 80092de:	bf00      	nop
 80092e0:	20000010 	.word	0x20000010
 80092e4:	0800a305 	.word	0x0800a305
 80092e8:	0800a312 	.word	0x0800a312
 80092ec:	0800a340 	.word	0x0800a340

080092f0 <fiprintf>:
 80092f0:	b40e      	push	{r1, r2, r3}
 80092f2:	b503      	push	{r0, r1, lr}
 80092f4:	4601      	mov	r1, r0
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	4805      	ldr	r0, [pc, #20]	; (8009310 <fiprintf+0x20>)
 80092fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fe:	6800      	ldr	r0, [r0, #0]
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	f000 f897 	bl	8009434 <_vfiprintf_r>
 8009306:	b002      	add	sp, #8
 8009308:	f85d eb04 	ldr.w	lr, [sp], #4
 800930c:	b003      	add	sp, #12
 800930e:	4770      	bx	lr
 8009310:	20000010 	.word	0x20000010

08009314 <__ascii_mbtowc>:
 8009314:	b082      	sub	sp, #8
 8009316:	b901      	cbnz	r1, 800931a <__ascii_mbtowc+0x6>
 8009318:	a901      	add	r1, sp, #4
 800931a:	b142      	cbz	r2, 800932e <__ascii_mbtowc+0x1a>
 800931c:	b14b      	cbz	r3, 8009332 <__ascii_mbtowc+0x1e>
 800931e:	7813      	ldrb	r3, [r2, #0]
 8009320:	600b      	str	r3, [r1, #0]
 8009322:	7812      	ldrb	r2, [r2, #0]
 8009324:	1e10      	subs	r0, r2, #0
 8009326:	bf18      	it	ne
 8009328:	2001      	movne	r0, #1
 800932a:	b002      	add	sp, #8
 800932c:	4770      	bx	lr
 800932e:	4610      	mov	r0, r2
 8009330:	e7fb      	b.n	800932a <__ascii_mbtowc+0x16>
 8009332:	f06f 0001 	mvn.w	r0, #1
 8009336:	e7f8      	b.n	800932a <__ascii_mbtowc+0x16>

08009338 <memmove>:
 8009338:	4288      	cmp	r0, r1
 800933a:	b510      	push	{r4, lr}
 800933c:	eb01 0402 	add.w	r4, r1, r2
 8009340:	d902      	bls.n	8009348 <memmove+0x10>
 8009342:	4284      	cmp	r4, r0
 8009344:	4623      	mov	r3, r4
 8009346:	d807      	bhi.n	8009358 <memmove+0x20>
 8009348:	1e43      	subs	r3, r0, #1
 800934a:	42a1      	cmp	r1, r4
 800934c:	d008      	beq.n	8009360 <memmove+0x28>
 800934e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009356:	e7f8      	b.n	800934a <memmove+0x12>
 8009358:	4402      	add	r2, r0
 800935a:	4601      	mov	r1, r0
 800935c:	428a      	cmp	r2, r1
 800935e:	d100      	bne.n	8009362 <memmove+0x2a>
 8009360:	bd10      	pop	{r4, pc}
 8009362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800936a:	e7f7      	b.n	800935c <memmove+0x24>

0800936c <__malloc_lock>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__malloc_lock+0x8>)
 800936e:	f000 bc1f 	b.w	8009bb0 <__retarget_lock_acquire_recursive>
 8009372:	bf00      	nop
 8009374:	20000350 	.word	0x20000350

08009378 <__malloc_unlock>:
 8009378:	4801      	ldr	r0, [pc, #4]	; (8009380 <__malloc_unlock+0x8>)
 800937a:	f000 bc1a 	b.w	8009bb2 <__retarget_lock_release_recursive>
 800937e:	bf00      	nop
 8009380:	20000350 	.word	0x20000350

08009384 <_realloc_r>:
 8009384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009388:	4680      	mov	r8, r0
 800938a:	4614      	mov	r4, r2
 800938c:	460e      	mov	r6, r1
 800938e:	b921      	cbnz	r1, 800939a <_realloc_r+0x16>
 8009390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009394:	4611      	mov	r1, r2
 8009396:	f7ff bdad 	b.w	8008ef4 <_malloc_r>
 800939a:	b92a      	cbnz	r2, 80093a8 <_realloc_r+0x24>
 800939c:	f7ff fd3e 	bl	8008e1c <_free_r>
 80093a0:	4625      	mov	r5, r4
 80093a2:	4628      	mov	r0, r5
 80093a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a8:	f000 fc6a 	bl	8009c80 <_malloc_usable_size_r>
 80093ac:	4284      	cmp	r4, r0
 80093ae:	4607      	mov	r7, r0
 80093b0:	d802      	bhi.n	80093b8 <_realloc_r+0x34>
 80093b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093b6:	d812      	bhi.n	80093de <_realloc_r+0x5a>
 80093b8:	4621      	mov	r1, r4
 80093ba:	4640      	mov	r0, r8
 80093bc:	f7ff fd9a 	bl	8008ef4 <_malloc_r>
 80093c0:	4605      	mov	r5, r0
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d0ed      	beq.n	80093a2 <_realloc_r+0x1e>
 80093c6:	42bc      	cmp	r4, r7
 80093c8:	4622      	mov	r2, r4
 80093ca:	4631      	mov	r1, r6
 80093cc:	bf28      	it	cs
 80093ce:	463a      	movcs	r2, r7
 80093d0:	f7ff f97c 	bl	80086cc <memcpy>
 80093d4:	4631      	mov	r1, r6
 80093d6:	4640      	mov	r0, r8
 80093d8:	f7ff fd20 	bl	8008e1c <_free_r>
 80093dc:	e7e1      	b.n	80093a2 <_realloc_r+0x1e>
 80093de:	4635      	mov	r5, r6
 80093e0:	e7df      	b.n	80093a2 <_realloc_r+0x1e>

080093e2 <__sfputc_r>:
 80093e2:	6893      	ldr	r3, [r2, #8]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	b410      	push	{r4}
 80093ea:	6093      	str	r3, [r2, #8]
 80093ec:	da08      	bge.n	8009400 <__sfputc_r+0x1e>
 80093ee:	6994      	ldr	r4, [r2, #24]
 80093f0:	42a3      	cmp	r3, r4
 80093f2:	db01      	blt.n	80093f8 <__sfputc_r+0x16>
 80093f4:	290a      	cmp	r1, #10
 80093f6:	d103      	bne.n	8009400 <__sfputc_r+0x1e>
 80093f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093fc:	f000 b94a 	b.w	8009694 <__swbuf_r>
 8009400:	6813      	ldr	r3, [r2, #0]
 8009402:	1c58      	adds	r0, r3, #1
 8009404:	6010      	str	r0, [r2, #0]
 8009406:	7019      	strb	r1, [r3, #0]
 8009408:	4608      	mov	r0, r1
 800940a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800940e:	4770      	bx	lr

08009410 <__sfputs_r>:
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009412:	4606      	mov	r6, r0
 8009414:	460f      	mov	r7, r1
 8009416:	4614      	mov	r4, r2
 8009418:	18d5      	adds	r5, r2, r3
 800941a:	42ac      	cmp	r4, r5
 800941c:	d101      	bne.n	8009422 <__sfputs_r+0x12>
 800941e:	2000      	movs	r0, #0
 8009420:	e007      	b.n	8009432 <__sfputs_r+0x22>
 8009422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009426:	463a      	mov	r2, r7
 8009428:	4630      	mov	r0, r6
 800942a:	f7ff ffda 	bl	80093e2 <__sfputc_r>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	d1f3      	bne.n	800941a <__sfputs_r+0xa>
 8009432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009434 <_vfiprintf_r>:
 8009434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	460d      	mov	r5, r1
 800943a:	b09d      	sub	sp, #116	; 0x74
 800943c:	4614      	mov	r4, r2
 800943e:	4698      	mov	r8, r3
 8009440:	4606      	mov	r6, r0
 8009442:	b118      	cbz	r0, 800944c <_vfiprintf_r+0x18>
 8009444:	6983      	ldr	r3, [r0, #24]
 8009446:	b90b      	cbnz	r3, 800944c <_vfiprintf_r+0x18>
 8009448:	f000 fb14 	bl	8009a74 <__sinit>
 800944c:	4b89      	ldr	r3, [pc, #548]	; (8009674 <_vfiprintf_r+0x240>)
 800944e:	429d      	cmp	r5, r3
 8009450:	d11b      	bne.n	800948a <_vfiprintf_r+0x56>
 8009452:	6875      	ldr	r5, [r6, #4]
 8009454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009456:	07d9      	lsls	r1, r3, #31
 8009458:	d405      	bmi.n	8009466 <_vfiprintf_r+0x32>
 800945a:	89ab      	ldrh	r3, [r5, #12]
 800945c:	059a      	lsls	r2, r3, #22
 800945e:	d402      	bmi.n	8009466 <_vfiprintf_r+0x32>
 8009460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009462:	f000 fba5 	bl	8009bb0 <__retarget_lock_acquire_recursive>
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	071b      	lsls	r3, r3, #28
 800946a:	d501      	bpl.n	8009470 <_vfiprintf_r+0x3c>
 800946c:	692b      	ldr	r3, [r5, #16]
 800946e:	b9eb      	cbnz	r3, 80094ac <_vfiprintf_r+0x78>
 8009470:	4629      	mov	r1, r5
 8009472:	4630      	mov	r0, r6
 8009474:	f000 f96e 	bl	8009754 <__swsetup_r>
 8009478:	b1c0      	cbz	r0, 80094ac <_vfiprintf_r+0x78>
 800947a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800947c:	07dc      	lsls	r4, r3, #31
 800947e:	d50e      	bpl.n	800949e <_vfiprintf_r+0x6a>
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	b01d      	add	sp, #116	; 0x74
 8009486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948a:	4b7b      	ldr	r3, [pc, #492]	; (8009678 <_vfiprintf_r+0x244>)
 800948c:	429d      	cmp	r5, r3
 800948e:	d101      	bne.n	8009494 <_vfiprintf_r+0x60>
 8009490:	68b5      	ldr	r5, [r6, #8]
 8009492:	e7df      	b.n	8009454 <_vfiprintf_r+0x20>
 8009494:	4b79      	ldr	r3, [pc, #484]	; (800967c <_vfiprintf_r+0x248>)
 8009496:	429d      	cmp	r5, r3
 8009498:	bf08      	it	eq
 800949a:	68f5      	ldreq	r5, [r6, #12]
 800949c:	e7da      	b.n	8009454 <_vfiprintf_r+0x20>
 800949e:	89ab      	ldrh	r3, [r5, #12]
 80094a0:	0598      	lsls	r0, r3, #22
 80094a2:	d4ed      	bmi.n	8009480 <_vfiprintf_r+0x4c>
 80094a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094a6:	f000 fb84 	bl	8009bb2 <__retarget_lock_release_recursive>
 80094aa:	e7e9      	b.n	8009480 <_vfiprintf_r+0x4c>
 80094ac:	2300      	movs	r3, #0
 80094ae:	9309      	str	r3, [sp, #36]	; 0x24
 80094b0:	2320      	movs	r3, #32
 80094b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80094ba:	2330      	movs	r3, #48	; 0x30
 80094bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009680 <_vfiprintf_r+0x24c>
 80094c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094c4:	f04f 0901 	mov.w	r9, #1
 80094c8:	4623      	mov	r3, r4
 80094ca:	469a      	mov	sl, r3
 80094cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094d0:	b10a      	cbz	r2, 80094d6 <_vfiprintf_r+0xa2>
 80094d2:	2a25      	cmp	r2, #37	; 0x25
 80094d4:	d1f9      	bne.n	80094ca <_vfiprintf_r+0x96>
 80094d6:	ebba 0b04 	subs.w	fp, sl, r4
 80094da:	d00b      	beq.n	80094f4 <_vfiprintf_r+0xc0>
 80094dc:	465b      	mov	r3, fp
 80094de:	4622      	mov	r2, r4
 80094e0:	4629      	mov	r1, r5
 80094e2:	4630      	mov	r0, r6
 80094e4:	f7ff ff94 	bl	8009410 <__sfputs_r>
 80094e8:	3001      	adds	r0, #1
 80094ea:	f000 80aa 	beq.w	8009642 <_vfiprintf_r+0x20e>
 80094ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094f0:	445a      	add	r2, fp
 80094f2:	9209      	str	r2, [sp, #36]	; 0x24
 80094f4:	f89a 3000 	ldrb.w	r3, [sl]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 80a2 	beq.w	8009642 <_vfiprintf_r+0x20e>
 80094fe:	2300      	movs	r3, #0
 8009500:	f04f 32ff 	mov.w	r2, #4294967295
 8009504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009508:	f10a 0a01 	add.w	sl, sl, #1
 800950c:	9304      	str	r3, [sp, #16]
 800950e:	9307      	str	r3, [sp, #28]
 8009510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009514:	931a      	str	r3, [sp, #104]	; 0x68
 8009516:	4654      	mov	r4, sl
 8009518:	2205      	movs	r2, #5
 800951a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800951e:	4858      	ldr	r0, [pc, #352]	; (8009680 <_vfiprintf_r+0x24c>)
 8009520:	f7f6 fe5e 	bl	80001e0 <memchr>
 8009524:	9a04      	ldr	r2, [sp, #16]
 8009526:	b9d8      	cbnz	r0, 8009560 <_vfiprintf_r+0x12c>
 8009528:	06d1      	lsls	r1, r2, #27
 800952a:	bf44      	itt	mi
 800952c:	2320      	movmi	r3, #32
 800952e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009532:	0713      	lsls	r3, r2, #28
 8009534:	bf44      	itt	mi
 8009536:	232b      	movmi	r3, #43	; 0x2b
 8009538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800953c:	f89a 3000 	ldrb.w	r3, [sl]
 8009540:	2b2a      	cmp	r3, #42	; 0x2a
 8009542:	d015      	beq.n	8009570 <_vfiprintf_r+0x13c>
 8009544:	9a07      	ldr	r2, [sp, #28]
 8009546:	4654      	mov	r4, sl
 8009548:	2000      	movs	r0, #0
 800954a:	f04f 0c0a 	mov.w	ip, #10
 800954e:	4621      	mov	r1, r4
 8009550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009554:	3b30      	subs	r3, #48	; 0x30
 8009556:	2b09      	cmp	r3, #9
 8009558:	d94e      	bls.n	80095f8 <_vfiprintf_r+0x1c4>
 800955a:	b1b0      	cbz	r0, 800958a <_vfiprintf_r+0x156>
 800955c:	9207      	str	r2, [sp, #28]
 800955e:	e014      	b.n	800958a <_vfiprintf_r+0x156>
 8009560:	eba0 0308 	sub.w	r3, r0, r8
 8009564:	fa09 f303 	lsl.w	r3, r9, r3
 8009568:	4313      	orrs	r3, r2
 800956a:	9304      	str	r3, [sp, #16]
 800956c:	46a2      	mov	sl, r4
 800956e:	e7d2      	b.n	8009516 <_vfiprintf_r+0xe2>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	1d19      	adds	r1, r3, #4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	9103      	str	r1, [sp, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	bfbb      	ittet	lt
 800957c:	425b      	neglt	r3, r3
 800957e:	f042 0202 	orrlt.w	r2, r2, #2
 8009582:	9307      	strge	r3, [sp, #28]
 8009584:	9307      	strlt	r3, [sp, #28]
 8009586:	bfb8      	it	lt
 8009588:	9204      	strlt	r2, [sp, #16]
 800958a:	7823      	ldrb	r3, [r4, #0]
 800958c:	2b2e      	cmp	r3, #46	; 0x2e
 800958e:	d10c      	bne.n	80095aa <_vfiprintf_r+0x176>
 8009590:	7863      	ldrb	r3, [r4, #1]
 8009592:	2b2a      	cmp	r3, #42	; 0x2a
 8009594:	d135      	bne.n	8009602 <_vfiprintf_r+0x1ce>
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	1d1a      	adds	r2, r3, #4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	9203      	str	r2, [sp, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	bfb8      	it	lt
 80095a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80095a6:	3402      	adds	r4, #2
 80095a8:	9305      	str	r3, [sp, #20]
 80095aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009690 <_vfiprintf_r+0x25c>
 80095ae:	7821      	ldrb	r1, [r4, #0]
 80095b0:	2203      	movs	r2, #3
 80095b2:	4650      	mov	r0, sl
 80095b4:	f7f6 fe14 	bl	80001e0 <memchr>
 80095b8:	b140      	cbz	r0, 80095cc <_vfiprintf_r+0x198>
 80095ba:	2340      	movs	r3, #64	; 0x40
 80095bc:	eba0 000a 	sub.w	r0, r0, sl
 80095c0:	fa03 f000 	lsl.w	r0, r3, r0
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	4303      	orrs	r3, r0
 80095c8:	3401      	adds	r4, #1
 80095ca:	9304      	str	r3, [sp, #16]
 80095cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d0:	482c      	ldr	r0, [pc, #176]	; (8009684 <_vfiprintf_r+0x250>)
 80095d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095d6:	2206      	movs	r2, #6
 80095d8:	f7f6 fe02 	bl	80001e0 <memchr>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d03f      	beq.n	8009660 <_vfiprintf_r+0x22c>
 80095e0:	4b29      	ldr	r3, [pc, #164]	; (8009688 <_vfiprintf_r+0x254>)
 80095e2:	bb1b      	cbnz	r3, 800962c <_vfiprintf_r+0x1f8>
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	3307      	adds	r3, #7
 80095e8:	f023 0307 	bic.w	r3, r3, #7
 80095ec:	3308      	adds	r3, #8
 80095ee:	9303      	str	r3, [sp, #12]
 80095f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f2:	443b      	add	r3, r7
 80095f4:	9309      	str	r3, [sp, #36]	; 0x24
 80095f6:	e767      	b.n	80094c8 <_vfiprintf_r+0x94>
 80095f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095fc:	460c      	mov	r4, r1
 80095fe:	2001      	movs	r0, #1
 8009600:	e7a5      	b.n	800954e <_vfiprintf_r+0x11a>
 8009602:	2300      	movs	r3, #0
 8009604:	3401      	adds	r4, #1
 8009606:	9305      	str	r3, [sp, #20]
 8009608:	4619      	mov	r1, r3
 800960a:	f04f 0c0a 	mov.w	ip, #10
 800960e:	4620      	mov	r0, r4
 8009610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009614:	3a30      	subs	r2, #48	; 0x30
 8009616:	2a09      	cmp	r2, #9
 8009618:	d903      	bls.n	8009622 <_vfiprintf_r+0x1ee>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0c5      	beq.n	80095aa <_vfiprintf_r+0x176>
 800961e:	9105      	str	r1, [sp, #20]
 8009620:	e7c3      	b.n	80095aa <_vfiprintf_r+0x176>
 8009622:	fb0c 2101 	mla	r1, ip, r1, r2
 8009626:	4604      	mov	r4, r0
 8009628:	2301      	movs	r3, #1
 800962a:	e7f0      	b.n	800960e <_vfiprintf_r+0x1da>
 800962c:	ab03      	add	r3, sp, #12
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	462a      	mov	r2, r5
 8009632:	4b16      	ldr	r3, [pc, #88]	; (800968c <_vfiprintf_r+0x258>)
 8009634:	a904      	add	r1, sp, #16
 8009636:	4630      	mov	r0, r6
 8009638:	f7fd fd8e 	bl	8007158 <_printf_float>
 800963c:	4607      	mov	r7, r0
 800963e:	1c78      	adds	r0, r7, #1
 8009640:	d1d6      	bne.n	80095f0 <_vfiprintf_r+0x1bc>
 8009642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009644:	07d9      	lsls	r1, r3, #31
 8009646:	d405      	bmi.n	8009654 <_vfiprintf_r+0x220>
 8009648:	89ab      	ldrh	r3, [r5, #12]
 800964a:	059a      	lsls	r2, r3, #22
 800964c:	d402      	bmi.n	8009654 <_vfiprintf_r+0x220>
 800964e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009650:	f000 faaf 	bl	8009bb2 <__retarget_lock_release_recursive>
 8009654:	89ab      	ldrh	r3, [r5, #12]
 8009656:	065b      	lsls	r3, r3, #25
 8009658:	f53f af12 	bmi.w	8009480 <_vfiprintf_r+0x4c>
 800965c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800965e:	e711      	b.n	8009484 <_vfiprintf_r+0x50>
 8009660:	ab03      	add	r3, sp, #12
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	462a      	mov	r2, r5
 8009666:	4b09      	ldr	r3, [pc, #36]	; (800968c <_vfiprintf_r+0x258>)
 8009668:	a904      	add	r1, sp, #16
 800966a:	4630      	mov	r0, r6
 800966c:	f7fe f818 	bl	80076a0 <_printf_i>
 8009670:	e7e4      	b.n	800963c <_vfiprintf_r+0x208>
 8009672:	bf00      	nop
 8009674:	0800a46c 	.word	0x0800a46c
 8009678:	0800a48c 	.word	0x0800a48c
 800967c:	0800a44c 	.word	0x0800a44c
 8009680:	0800a2f4 	.word	0x0800a2f4
 8009684:	0800a2fe 	.word	0x0800a2fe
 8009688:	08007159 	.word	0x08007159
 800968c:	08009411 	.word	0x08009411
 8009690:	0800a2fa 	.word	0x0800a2fa

08009694 <__swbuf_r>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	460e      	mov	r6, r1
 8009698:	4614      	mov	r4, r2
 800969a:	4605      	mov	r5, r0
 800969c:	b118      	cbz	r0, 80096a6 <__swbuf_r+0x12>
 800969e:	6983      	ldr	r3, [r0, #24]
 80096a0:	b90b      	cbnz	r3, 80096a6 <__swbuf_r+0x12>
 80096a2:	f000 f9e7 	bl	8009a74 <__sinit>
 80096a6:	4b21      	ldr	r3, [pc, #132]	; (800972c <__swbuf_r+0x98>)
 80096a8:	429c      	cmp	r4, r3
 80096aa:	d12b      	bne.n	8009704 <__swbuf_r+0x70>
 80096ac:	686c      	ldr	r4, [r5, #4]
 80096ae:	69a3      	ldr	r3, [r4, #24]
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	071a      	lsls	r2, r3, #28
 80096b6:	d52f      	bpl.n	8009718 <__swbuf_r+0x84>
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	b36b      	cbz	r3, 8009718 <__swbuf_r+0x84>
 80096bc:	6923      	ldr	r3, [r4, #16]
 80096be:	6820      	ldr	r0, [r4, #0]
 80096c0:	1ac0      	subs	r0, r0, r3
 80096c2:	6963      	ldr	r3, [r4, #20]
 80096c4:	b2f6      	uxtb	r6, r6
 80096c6:	4283      	cmp	r3, r0
 80096c8:	4637      	mov	r7, r6
 80096ca:	dc04      	bgt.n	80096d6 <__swbuf_r+0x42>
 80096cc:	4621      	mov	r1, r4
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 f93c 	bl	800994c <_fflush_r>
 80096d4:	bb30      	cbnz	r0, 8009724 <__swbuf_r+0x90>
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	3b01      	subs	r3, #1
 80096da:	60a3      	str	r3, [r4, #8]
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	1c5a      	adds	r2, r3, #1
 80096e0:	6022      	str	r2, [r4, #0]
 80096e2:	701e      	strb	r6, [r3, #0]
 80096e4:	6963      	ldr	r3, [r4, #20]
 80096e6:	3001      	adds	r0, #1
 80096e8:	4283      	cmp	r3, r0
 80096ea:	d004      	beq.n	80096f6 <__swbuf_r+0x62>
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	07db      	lsls	r3, r3, #31
 80096f0:	d506      	bpl.n	8009700 <__swbuf_r+0x6c>
 80096f2:	2e0a      	cmp	r6, #10
 80096f4:	d104      	bne.n	8009700 <__swbuf_r+0x6c>
 80096f6:	4621      	mov	r1, r4
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 f927 	bl	800994c <_fflush_r>
 80096fe:	b988      	cbnz	r0, 8009724 <__swbuf_r+0x90>
 8009700:	4638      	mov	r0, r7
 8009702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <__swbuf_r+0x9c>)
 8009706:	429c      	cmp	r4, r3
 8009708:	d101      	bne.n	800970e <__swbuf_r+0x7a>
 800970a:	68ac      	ldr	r4, [r5, #8]
 800970c:	e7cf      	b.n	80096ae <__swbuf_r+0x1a>
 800970e:	4b09      	ldr	r3, [pc, #36]	; (8009734 <__swbuf_r+0xa0>)
 8009710:	429c      	cmp	r4, r3
 8009712:	bf08      	it	eq
 8009714:	68ec      	ldreq	r4, [r5, #12]
 8009716:	e7ca      	b.n	80096ae <__swbuf_r+0x1a>
 8009718:	4621      	mov	r1, r4
 800971a:	4628      	mov	r0, r5
 800971c:	f000 f81a 	bl	8009754 <__swsetup_r>
 8009720:	2800      	cmp	r0, #0
 8009722:	d0cb      	beq.n	80096bc <__swbuf_r+0x28>
 8009724:	f04f 37ff 	mov.w	r7, #4294967295
 8009728:	e7ea      	b.n	8009700 <__swbuf_r+0x6c>
 800972a:	bf00      	nop
 800972c:	0800a46c 	.word	0x0800a46c
 8009730:	0800a48c 	.word	0x0800a48c
 8009734:	0800a44c 	.word	0x0800a44c

08009738 <__ascii_wctomb>:
 8009738:	b149      	cbz	r1, 800974e <__ascii_wctomb+0x16>
 800973a:	2aff      	cmp	r2, #255	; 0xff
 800973c:	bf85      	ittet	hi
 800973e:	238a      	movhi	r3, #138	; 0x8a
 8009740:	6003      	strhi	r3, [r0, #0]
 8009742:	700a      	strbls	r2, [r1, #0]
 8009744:	f04f 30ff 	movhi.w	r0, #4294967295
 8009748:	bf98      	it	ls
 800974a:	2001      	movls	r0, #1
 800974c:	4770      	bx	lr
 800974e:	4608      	mov	r0, r1
 8009750:	4770      	bx	lr
	...

08009754 <__swsetup_r>:
 8009754:	4b32      	ldr	r3, [pc, #200]	; (8009820 <__swsetup_r+0xcc>)
 8009756:	b570      	push	{r4, r5, r6, lr}
 8009758:	681d      	ldr	r5, [r3, #0]
 800975a:	4606      	mov	r6, r0
 800975c:	460c      	mov	r4, r1
 800975e:	b125      	cbz	r5, 800976a <__swsetup_r+0x16>
 8009760:	69ab      	ldr	r3, [r5, #24]
 8009762:	b913      	cbnz	r3, 800976a <__swsetup_r+0x16>
 8009764:	4628      	mov	r0, r5
 8009766:	f000 f985 	bl	8009a74 <__sinit>
 800976a:	4b2e      	ldr	r3, [pc, #184]	; (8009824 <__swsetup_r+0xd0>)
 800976c:	429c      	cmp	r4, r3
 800976e:	d10f      	bne.n	8009790 <__swsetup_r+0x3c>
 8009770:	686c      	ldr	r4, [r5, #4]
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009778:	0719      	lsls	r1, r3, #28
 800977a:	d42c      	bmi.n	80097d6 <__swsetup_r+0x82>
 800977c:	06dd      	lsls	r5, r3, #27
 800977e:	d411      	bmi.n	80097a4 <__swsetup_r+0x50>
 8009780:	2309      	movs	r3, #9
 8009782:	6033      	str	r3, [r6, #0]
 8009784:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009788:	81a3      	strh	r3, [r4, #12]
 800978a:	f04f 30ff 	mov.w	r0, #4294967295
 800978e:	e03e      	b.n	800980e <__swsetup_r+0xba>
 8009790:	4b25      	ldr	r3, [pc, #148]	; (8009828 <__swsetup_r+0xd4>)
 8009792:	429c      	cmp	r4, r3
 8009794:	d101      	bne.n	800979a <__swsetup_r+0x46>
 8009796:	68ac      	ldr	r4, [r5, #8]
 8009798:	e7eb      	b.n	8009772 <__swsetup_r+0x1e>
 800979a:	4b24      	ldr	r3, [pc, #144]	; (800982c <__swsetup_r+0xd8>)
 800979c:	429c      	cmp	r4, r3
 800979e:	bf08      	it	eq
 80097a0:	68ec      	ldreq	r4, [r5, #12]
 80097a2:	e7e6      	b.n	8009772 <__swsetup_r+0x1e>
 80097a4:	0758      	lsls	r0, r3, #29
 80097a6:	d512      	bpl.n	80097ce <__swsetup_r+0x7a>
 80097a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097aa:	b141      	cbz	r1, 80097be <__swsetup_r+0x6a>
 80097ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097b0:	4299      	cmp	r1, r3
 80097b2:	d002      	beq.n	80097ba <__swsetup_r+0x66>
 80097b4:	4630      	mov	r0, r6
 80097b6:	f7ff fb31 	bl	8008e1c <_free_r>
 80097ba:	2300      	movs	r3, #0
 80097bc:	6363      	str	r3, [r4, #52]	; 0x34
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097c4:	81a3      	strh	r3, [r4, #12]
 80097c6:	2300      	movs	r3, #0
 80097c8:	6063      	str	r3, [r4, #4]
 80097ca:	6923      	ldr	r3, [r4, #16]
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f043 0308 	orr.w	r3, r3, #8
 80097d4:	81a3      	strh	r3, [r4, #12]
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	b94b      	cbnz	r3, 80097ee <__swsetup_r+0x9a>
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e4:	d003      	beq.n	80097ee <__swsetup_r+0x9a>
 80097e6:	4621      	mov	r1, r4
 80097e8:	4630      	mov	r0, r6
 80097ea:	f000 fa09 	bl	8009c00 <__smakebuf_r>
 80097ee:	89a0      	ldrh	r0, [r4, #12]
 80097f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097f4:	f010 0301 	ands.w	r3, r0, #1
 80097f8:	d00a      	beq.n	8009810 <__swsetup_r+0xbc>
 80097fa:	2300      	movs	r3, #0
 80097fc:	60a3      	str	r3, [r4, #8]
 80097fe:	6963      	ldr	r3, [r4, #20]
 8009800:	425b      	negs	r3, r3
 8009802:	61a3      	str	r3, [r4, #24]
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	b943      	cbnz	r3, 800981a <__swsetup_r+0xc6>
 8009808:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800980c:	d1ba      	bne.n	8009784 <__swsetup_r+0x30>
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	0781      	lsls	r1, r0, #30
 8009812:	bf58      	it	pl
 8009814:	6963      	ldrpl	r3, [r4, #20]
 8009816:	60a3      	str	r3, [r4, #8]
 8009818:	e7f4      	b.n	8009804 <__swsetup_r+0xb0>
 800981a:	2000      	movs	r0, #0
 800981c:	e7f7      	b.n	800980e <__swsetup_r+0xba>
 800981e:	bf00      	nop
 8009820:	20000010 	.word	0x20000010
 8009824:	0800a46c 	.word	0x0800a46c
 8009828:	0800a48c 	.word	0x0800a48c
 800982c:	0800a44c 	.word	0x0800a44c

08009830 <abort>:
 8009830:	b508      	push	{r3, lr}
 8009832:	2006      	movs	r0, #6
 8009834:	f000 fa54 	bl	8009ce0 <raise>
 8009838:	2001      	movs	r0, #1
 800983a:	f7f9 fbdf 	bl	8002ffc <_exit>
	...

08009840 <__sflush_r>:
 8009840:	898a      	ldrh	r2, [r1, #12]
 8009842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009846:	4605      	mov	r5, r0
 8009848:	0710      	lsls	r0, r2, #28
 800984a:	460c      	mov	r4, r1
 800984c:	d458      	bmi.n	8009900 <__sflush_r+0xc0>
 800984e:	684b      	ldr	r3, [r1, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	dc05      	bgt.n	8009860 <__sflush_r+0x20>
 8009854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009856:	2b00      	cmp	r3, #0
 8009858:	dc02      	bgt.n	8009860 <__sflush_r+0x20>
 800985a:	2000      	movs	r0, #0
 800985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009862:	2e00      	cmp	r6, #0
 8009864:	d0f9      	beq.n	800985a <__sflush_r+0x1a>
 8009866:	2300      	movs	r3, #0
 8009868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800986c:	682f      	ldr	r7, [r5, #0]
 800986e:	602b      	str	r3, [r5, #0]
 8009870:	d032      	beq.n	80098d8 <__sflush_r+0x98>
 8009872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	075a      	lsls	r2, r3, #29
 8009878:	d505      	bpl.n	8009886 <__sflush_r+0x46>
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	1ac0      	subs	r0, r0, r3
 800987e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009880:	b10b      	cbz	r3, 8009886 <__sflush_r+0x46>
 8009882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009884:	1ac0      	subs	r0, r0, r3
 8009886:	2300      	movs	r3, #0
 8009888:	4602      	mov	r2, r0
 800988a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800988c:	6a21      	ldr	r1, [r4, #32]
 800988e:	4628      	mov	r0, r5
 8009890:	47b0      	blx	r6
 8009892:	1c43      	adds	r3, r0, #1
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	d106      	bne.n	80098a6 <__sflush_r+0x66>
 8009898:	6829      	ldr	r1, [r5, #0]
 800989a:	291d      	cmp	r1, #29
 800989c:	d82c      	bhi.n	80098f8 <__sflush_r+0xb8>
 800989e:	4a2a      	ldr	r2, [pc, #168]	; (8009948 <__sflush_r+0x108>)
 80098a0:	40ca      	lsrs	r2, r1
 80098a2:	07d6      	lsls	r6, r2, #31
 80098a4:	d528      	bpl.n	80098f8 <__sflush_r+0xb8>
 80098a6:	2200      	movs	r2, #0
 80098a8:	6062      	str	r2, [r4, #4]
 80098aa:	04d9      	lsls	r1, r3, #19
 80098ac:	6922      	ldr	r2, [r4, #16]
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	d504      	bpl.n	80098bc <__sflush_r+0x7c>
 80098b2:	1c42      	adds	r2, r0, #1
 80098b4:	d101      	bne.n	80098ba <__sflush_r+0x7a>
 80098b6:	682b      	ldr	r3, [r5, #0]
 80098b8:	b903      	cbnz	r3, 80098bc <__sflush_r+0x7c>
 80098ba:	6560      	str	r0, [r4, #84]	; 0x54
 80098bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098be:	602f      	str	r7, [r5, #0]
 80098c0:	2900      	cmp	r1, #0
 80098c2:	d0ca      	beq.n	800985a <__sflush_r+0x1a>
 80098c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098c8:	4299      	cmp	r1, r3
 80098ca:	d002      	beq.n	80098d2 <__sflush_r+0x92>
 80098cc:	4628      	mov	r0, r5
 80098ce:	f7ff faa5 	bl	8008e1c <_free_r>
 80098d2:	2000      	movs	r0, #0
 80098d4:	6360      	str	r0, [r4, #52]	; 0x34
 80098d6:	e7c1      	b.n	800985c <__sflush_r+0x1c>
 80098d8:	6a21      	ldr	r1, [r4, #32]
 80098da:	2301      	movs	r3, #1
 80098dc:	4628      	mov	r0, r5
 80098de:	47b0      	blx	r6
 80098e0:	1c41      	adds	r1, r0, #1
 80098e2:	d1c7      	bne.n	8009874 <__sflush_r+0x34>
 80098e4:	682b      	ldr	r3, [r5, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0c4      	beq.n	8009874 <__sflush_r+0x34>
 80098ea:	2b1d      	cmp	r3, #29
 80098ec:	d001      	beq.n	80098f2 <__sflush_r+0xb2>
 80098ee:	2b16      	cmp	r3, #22
 80098f0:	d101      	bne.n	80098f6 <__sflush_r+0xb6>
 80098f2:	602f      	str	r7, [r5, #0]
 80098f4:	e7b1      	b.n	800985a <__sflush_r+0x1a>
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	e7ad      	b.n	800985c <__sflush_r+0x1c>
 8009900:	690f      	ldr	r7, [r1, #16]
 8009902:	2f00      	cmp	r7, #0
 8009904:	d0a9      	beq.n	800985a <__sflush_r+0x1a>
 8009906:	0793      	lsls	r3, r2, #30
 8009908:	680e      	ldr	r6, [r1, #0]
 800990a:	bf08      	it	eq
 800990c:	694b      	ldreq	r3, [r1, #20]
 800990e:	600f      	str	r7, [r1, #0]
 8009910:	bf18      	it	ne
 8009912:	2300      	movne	r3, #0
 8009914:	eba6 0807 	sub.w	r8, r6, r7
 8009918:	608b      	str	r3, [r1, #8]
 800991a:	f1b8 0f00 	cmp.w	r8, #0
 800991e:	dd9c      	ble.n	800985a <__sflush_r+0x1a>
 8009920:	6a21      	ldr	r1, [r4, #32]
 8009922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009924:	4643      	mov	r3, r8
 8009926:	463a      	mov	r2, r7
 8009928:	4628      	mov	r0, r5
 800992a:	47b0      	blx	r6
 800992c:	2800      	cmp	r0, #0
 800992e:	dc06      	bgt.n	800993e <__sflush_r+0xfe>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	f04f 30ff 	mov.w	r0, #4294967295
 800993c:	e78e      	b.n	800985c <__sflush_r+0x1c>
 800993e:	4407      	add	r7, r0
 8009940:	eba8 0800 	sub.w	r8, r8, r0
 8009944:	e7e9      	b.n	800991a <__sflush_r+0xda>
 8009946:	bf00      	nop
 8009948:	20400001 	.word	0x20400001

0800994c <_fflush_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	690b      	ldr	r3, [r1, #16]
 8009950:	4605      	mov	r5, r0
 8009952:	460c      	mov	r4, r1
 8009954:	b913      	cbnz	r3, 800995c <_fflush_r+0x10>
 8009956:	2500      	movs	r5, #0
 8009958:	4628      	mov	r0, r5
 800995a:	bd38      	pop	{r3, r4, r5, pc}
 800995c:	b118      	cbz	r0, 8009966 <_fflush_r+0x1a>
 800995e:	6983      	ldr	r3, [r0, #24]
 8009960:	b90b      	cbnz	r3, 8009966 <_fflush_r+0x1a>
 8009962:	f000 f887 	bl	8009a74 <__sinit>
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <_fflush_r+0x6c>)
 8009968:	429c      	cmp	r4, r3
 800996a:	d11b      	bne.n	80099a4 <_fflush_r+0x58>
 800996c:	686c      	ldr	r4, [r5, #4]
 800996e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0ef      	beq.n	8009956 <_fflush_r+0xa>
 8009976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009978:	07d0      	lsls	r0, r2, #31
 800997a:	d404      	bmi.n	8009986 <_fflush_r+0x3a>
 800997c:	0599      	lsls	r1, r3, #22
 800997e:	d402      	bmi.n	8009986 <_fflush_r+0x3a>
 8009980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009982:	f000 f915 	bl	8009bb0 <__retarget_lock_acquire_recursive>
 8009986:	4628      	mov	r0, r5
 8009988:	4621      	mov	r1, r4
 800998a:	f7ff ff59 	bl	8009840 <__sflush_r>
 800998e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009990:	07da      	lsls	r2, r3, #31
 8009992:	4605      	mov	r5, r0
 8009994:	d4e0      	bmi.n	8009958 <_fflush_r+0xc>
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	059b      	lsls	r3, r3, #22
 800999a:	d4dd      	bmi.n	8009958 <_fflush_r+0xc>
 800999c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800999e:	f000 f908 	bl	8009bb2 <__retarget_lock_release_recursive>
 80099a2:	e7d9      	b.n	8009958 <_fflush_r+0xc>
 80099a4:	4b05      	ldr	r3, [pc, #20]	; (80099bc <_fflush_r+0x70>)
 80099a6:	429c      	cmp	r4, r3
 80099a8:	d101      	bne.n	80099ae <_fflush_r+0x62>
 80099aa:	68ac      	ldr	r4, [r5, #8]
 80099ac:	e7df      	b.n	800996e <_fflush_r+0x22>
 80099ae:	4b04      	ldr	r3, [pc, #16]	; (80099c0 <_fflush_r+0x74>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	bf08      	it	eq
 80099b4:	68ec      	ldreq	r4, [r5, #12]
 80099b6:	e7da      	b.n	800996e <_fflush_r+0x22>
 80099b8:	0800a46c 	.word	0x0800a46c
 80099bc:	0800a48c 	.word	0x0800a48c
 80099c0:	0800a44c 	.word	0x0800a44c

080099c4 <std>:
 80099c4:	2300      	movs	r3, #0
 80099c6:	b510      	push	{r4, lr}
 80099c8:	4604      	mov	r4, r0
 80099ca:	e9c0 3300 	strd	r3, r3, [r0]
 80099ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099d2:	6083      	str	r3, [r0, #8]
 80099d4:	8181      	strh	r1, [r0, #12]
 80099d6:	6643      	str	r3, [r0, #100]	; 0x64
 80099d8:	81c2      	strh	r2, [r0, #14]
 80099da:	6183      	str	r3, [r0, #24]
 80099dc:	4619      	mov	r1, r3
 80099de:	2208      	movs	r2, #8
 80099e0:	305c      	adds	r0, #92	; 0x5c
 80099e2:	f7fd fb11 	bl	8007008 <memset>
 80099e6:	4b05      	ldr	r3, [pc, #20]	; (80099fc <std+0x38>)
 80099e8:	6263      	str	r3, [r4, #36]	; 0x24
 80099ea:	4b05      	ldr	r3, [pc, #20]	; (8009a00 <std+0x3c>)
 80099ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ee:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <std+0x40>)
 80099f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099f2:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <std+0x44>)
 80099f4:	6224      	str	r4, [r4, #32]
 80099f6:	6323      	str	r3, [r4, #48]	; 0x30
 80099f8:	bd10      	pop	{r4, pc}
 80099fa:	bf00      	nop
 80099fc:	08009d19 	.word	0x08009d19
 8009a00:	08009d3b 	.word	0x08009d3b
 8009a04:	08009d73 	.word	0x08009d73
 8009a08:	08009d97 	.word	0x08009d97

08009a0c <_cleanup_r>:
 8009a0c:	4901      	ldr	r1, [pc, #4]	; (8009a14 <_cleanup_r+0x8>)
 8009a0e:	f000 b8af 	b.w	8009b70 <_fwalk_reent>
 8009a12:	bf00      	nop
 8009a14:	0800994d 	.word	0x0800994d

08009a18 <__sfmoreglue>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	2268      	movs	r2, #104	; 0x68
 8009a1c:	1e4d      	subs	r5, r1, #1
 8009a1e:	4355      	muls	r5, r2
 8009a20:	460e      	mov	r6, r1
 8009a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a26:	f7ff fa65 	bl	8008ef4 <_malloc_r>
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	b140      	cbz	r0, 8009a40 <__sfmoreglue+0x28>
 8009a2e:	2100      	movs	r1, #0
 8009a30:	e9c0 1600 	strd	r1, r6, [r0]
 8009a34:	300c      	adds	r0, #12
 8009a36:	60a0      	str	r0, [r4, #8]
 8009a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a3c:	f7fd fae4 	bl	8007008 <memset>
 8009a40:	4620      	mov	r0, r4
 8009a42:	bd70      	pop	{r4, r5, r6, pc}

08009a44 <__sfp_lock_acquire>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__sfp_lock_acquire+0x8>)
 8009a46:	f000 b8b3 	b.w	8009bb0 <__retarget_lock_acquire_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	20000351 	.word	0x20000351

08009a50 <__sfp_lock_release>:
 8009a50:	4801      	ldr	r0, [pc, #4]	; (8009a58 <__sfp_lock_release+0x8>)
 8009a52:	f000 b8ae 	b.w	8009bb2 <__retarget_lock_release_recursive>
 8009a56:	bf00      	nop
 8009a58:	20000351 	.word	0x20000351

08009a5c <__sinit_lock_acquire>:
 8009a5c:	4801      	ldr	r0, [pc, #4]	; (8009a64 <__sinit_lock_acquire+0x8>)
 8009a5e:	f000 b8a7 	b.w	8009bb0 <__retarget_lock_acquire_recursive>
 8009a62:	bf00      	nop
 8009a64:	20000352 	.word	0x20000352

08009a68 <__sinit_lock_release>:
 8009a68:	4801      	ldr	r0, [pc, #4]	; (8009a70 <__sinit_lock_release+0x8>)
 8009a6a:	f000 b8a2 	b.w	8009bb2 <__retarget_lock_release_recursive>
 8009a6e:	bf00      	nop
 8009a70:	20000352 	.word	0x20000352

08009a74 <__sinit>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	4604      	mov	r4, r0
 8009a78:	f7ff fff0 	bl	8009a5c <__sinit_lock_acquire>
 8009a7c:	69a3      	ldr	r3, [r4, #24]
 8009a7e:	b11b      	cbz	r3, 8009a88 <__sinit+0x14>
 8009a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a84:	f7ff bff0 	b.w	8009a68 <__sinit_lock_release>
 8009a88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a8c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a8e:	4b13      	ldr	r3, [pc, #76]	; (8009adc <__sinit+0x68>)
 8009a90:	4a13      	ldr	r2, [pc, #76]	; (8009ae0 <__sinit+0x6c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a96:	42a3      	cmp	r3, r4
 8009a98:	bf04      	itt	eq
 8009a9a:	2301      	moveq	r3, #1
 8009a9c:	61a3      	streq	r3, [r4, #24]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f820 	bl	8009ae4 <__sfp>
 8009aa4:	6060      	str	r0, [r4, #4]
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 f81c 	bl	8009ae4 <__sfp>
 8009aac:	60a0      	str	r0, [r4, #8]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f000 f818 	bl	8009ae4 <__sfp>
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	60e0      	str	r0, [r4, #12]
 8009ab8:	2104      	movs	r1, #4
 8009aba:	6860      	ldr	r0, [r4, #4]
 8009abc:	f7ff ff82 	bl	80099c4 <std>
 8009ac0:	68a0      	ldr	r0, [r4, #8]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	2109      	movs	r1, #9
 8009ac6:	f7ff ff7d 	bl	80099c4 <std>
 8009aca:	68e0      	ldr	r0, [r4, #12]
 8009acc:	2202      	movs	r2, #2
 8009ace:	2112      	movs	r1, #18
 8009ad0:	f7ff ff78 	bl	80099c4 <std>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	61a3      	str	r3, [r4, #24]
 8009ad8:	e7d2      	b.n	8009a80 <__sinit+0xc>
 8009ada:	bf00      	nop
 8009adc:	0800a0d4 	.word	0x0800a0d4
 8009ae0:	08009a0d 	.word	0x08009a0d

08009ae4 <__sfp>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	4607      	mov	r7, r0
 8009ae8:	f7ff ffac 	bl	8009a44 <__sfp_lock_acquire>
 8009aec:	4b1e      	ldr	r3, [pc, #120]	; (8009b68 <__sfp+0x84>)
 8009aee:	681e      	ldr	r6, [r3, #0]
 8009af0:	69b3      	ldr	r3, [r6, #24]
 8009af2:	b913      	cbnz	r3, 8009afa <__sfp+0x16>
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff ffbd 	bl	8009a74 <__sinit>
 8009afa:	3648      	adds	r6, #72	; 0x48
 8009afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	d503      	bpl.n	8009b0c <__sfp+0x28>
 8009b04:	6833      	ldr	r3, [r6, #0]
 8009b06:	b30b      	cbz	r3, 8009b4c <__sfp+0x68>
 8009b08:	6836      	ldr	r6, [r6, #0]
 8009b0a:	e7f7      	b.n	8009afc <__sfp+0x18>
 8009b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b10:	b9d5      	cbnz	r5, 8009b48 <__sfp+0x64>
 8009b12:	4b16      	ldr	r3, [pc, #88]	; (8009b6c <__sfp+0x88>)
 8009b14:	60e3      	str	r3, [r4, #12]
 8009b16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b1a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b1c:	f000 f847 	bl	8009bae <__retarget_lock_init_recursive>
 8009b20:	f7ff ff96 	bl	8009a50 <__sfp_lock_release>
 8009b24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b2c:	6025      	str	r5, [r4, #0]
 8009b2e:	61a5      	str	r5, [r4, #24]
 8009b30:	2208      	movs	r2, #8
 8009b32:	4629      	mov	r1, r5
 8009b34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b38:	f7fd fa66 	bl	8007008 <memset>
 8009b3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b44:	4620      	mov	r0, r4
 8009b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b48:	3468      	adds	r4, #104	; 0x68
 8009b4a:	e7d9      	b.n	8009b00 <__sfp+0x1c>
 8009b4c:	2104      	movs	r1, #4
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f7ff ff62 	bl	8009a18 <__sfmoreglue>
 8009b54:	4604      	mov	r4, r0
 8009b56:	6030      	str	r0, [r6, #0]
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d1d5      	bne.n	8009b08 <__sfp+0x24>
 8009b5c:	f7ff ff78 	bl	8009a50 <__sfp_lock_release>
 8009b60:	230c      	movs	r3, #12
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	e7ee      	b.n	8009b44 <__sfp+0x60>
 8009b66:	bf00      	nop
 8009b68:	0800a0d4 	.word	0x0800a0d4
 8009b6c:	ffff0001 	.word	0xffff0001

08009b70 <_fwalk_reent>:
 8009b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b74:	4606      	mov	r6, r0
 8009b76:	4688      	mov	r8, r1
 8009b78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b7c:	2700      	movs	r7, #0
 8009b7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b82:	f1b9 0901 	subs.w	r9, r9, #1
 8009b86:	d505      	bpl.n	8009b94 <_fwalk_reent+0x24>
 8009b88:	6824      	ldr	r4, [r4, #0]
 8009b8a:	2c00      	cmp	r4, #0
 8009b8c:	d1f7      	bne.n	8009b7e <_fwalk_reent+0xe>
 8009b8e:	4638      	mov	r0, r7
 8009b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b94:	89ab      	ldrh	r3, [r5, #12]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d907      	bls.n	8009baa <_fwalk_reent+0x3a>
 8009b9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	d003      	beq.n	8009baa <_fwalk_reent+0x3a>
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	47c0      	blx	r8
 8009ba8:	4307      	orrs	r7, r0
 8009baa:	3568      	adds	r5, #104	; 0x68
 8009bac:	e7e9      	b.n	8009b82 <_fwalk_reent+0x12>

08009bae <__retarget_lock_init_recursive>:
 8009bae:	4770      	bx	lr

08009bb0 <__retarget_lock_acquire_recursive>:
 8009bb0:	4770      	bx	lr

08009bb2 <__retarget_lock_release_recursive>:
 8009bb2:	4770      	bx	lr

08009bb4 <__swhatbuf_r>:
 8009bb4:	b570      	push	{r4, r5, r6, lr}
 8009bb6:	460e      	mov	r6, r1
 8009bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	b096      	sub	sp, #88	; 0x58
 8009bc0:	4614      	mov	r4, r2
 8009bc2:	461d      	mov	r5, r3
 8009bc4:	da08      	bge.n	8009bd8 <__swhatbuf_r+0x24>
 8009bc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	602a      	str	r2, [r5, #0]
 8009bce:	061a      	lsls	r2, r3, #24
 8009bd0:	d410      	bmi.n	8009bf4 <__swhatbuf_r+0x40>
 8009bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bd6:	e00e      	b.n	8009bf6 <__swhatbuf_r+0x42>
 8009bd8:	466a      	mov	r2, sp
 8009bda:	f000 f903 	bl	8009de4 <_fstat_r>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	dbf1      	blt.n	8009bc6 <__swhatbuf_r+0x12>
 8009be2:	9a01      	ldr	r2, [sp, #4]
 8009be4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009be8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bec:	425a      	negs	r2, r3
 8009bee:	415a      	adcs	r2, r3
 8009bf0:	602a      	str	r2, [r5, #0]
 8009bf2:	e7ee      	b.n	8009bd2 <__swhatbuf_r+0x1e>
 8009bf4:	2340      	movs	r3, #64	; 0x40
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	b016      	add	sp, #88	; 0x58
 8009bfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c00 <__smakebuf_r>:
 8009c00:	898b      	ldrh	r3, [r1, #12]
 8009c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c04:	079d      	lsls	r5, r3, #30
 8009c06:	4606      	mov	r6, r0
 8009c08:	460c      	mov	r4, r1
 8009c0a:	d507      	bpl.n	8009c1c <__smakebuf_r+0x1c>
 8009c0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	6123      	str	r3, [r4, #16]
 8009c14:	2301      	movs	r3, #1
 8009c16:	6163      	str	r3, [r4, #20]
 8009c18:	b002      	add	sp, #8
 8009c1a:	bd70      	pop	{r4, r5, r6, pc}
 8009c1c:	ab01      	add	r3, sp, #4
 8009c1e:	466a      	mov	r2, sp
 8009c20:	f7ff ffc8 	bl	8009bb4 <__swhatbuf_r>
 8009c24:	9900      	ldr	r1, [sp, #0]
 8009c26:	4605      	mov	r5, r0
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff f963 	bl	8008ef4 <_malloc_r>
 8009c2e:	b948      	cbnz	r0, 8009c44 <__smakebuf_r+0x44>
 8009c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c34:	059a      	lsls	r2, r3, #22
 8009c36:	d4ef      	bmi.n	8009c18 <__smakebuf_r+0x18>
 8009c38:	f023 0303 	bic.w	r3, r3, #3
 8009c3c:	f043 0302 	orr.w	r3, r3, #2
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	e7e3      	b.n	8009c0c <__smakebuf_r+0xc>
 8009c44:	4b0d      	ldr	r3, [pc, #52]	; (8009c7c <__smakebuf_r+0x7c>)
 8009c46:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	6020      	str	r0, [r4, #0]
 8009c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c50:	81a3      	strh	r3, [r4, #12]
 8009c52:	9b00      	ldr	r3, [sp, #0]
 8009c54:	6163      	str	r3, [r4, #20]
 8009c56:	9b01      	ldr	r3, [sp, #4]
 8009c58:	6120      	str	r0, [r4, #16]
 8009c5a:	b15b      	cbz	r3, 8009c74 <__smakebuf_r+0x74>
 8009c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c60:	4630      	mov	r0, r6
 8009c62:	f000 f8d1 	bl	8009e08 <_isatty_r>
 8009c66:	b128      	cbz	r0, 8009c74 <__smakebuf_r+0x74>
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	f023 0303 	bic.w	r3, r3, #3
 8009c6e:	f043 0301 	orr.w	r3, r3, #1
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	89a0      	ldrh	r0, [r4, #12]
 8009c76:	4305      	orrs	r5, r0
 8009c78:	81a5      	strh	r5, [r4, #12]
 8009c7a:	e7cd      	b.n	8009c18 <__smakebuf_r+0x18>
 8009c7c:	08009a0d 	.word	0x08009a0d

08009c80 <_malloc_usable_size_r>:
 8009c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c84:	1f18      	subs	r0, r3, #4
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bfbc      	itt	lt
 8009c8a:	580b      	ldrlt	r3, [r1, r0]
 8009c8c:	18c0      	addlt	r0, r0, r3
 8009c8e:	4770      	bx	lr

08009c90 <_raise_r>:
 8009c90:	291f      	cmp	r1, #31
 8009c92:	b538      	push	{r3, r4, r5, lr}
 8009c94:	4604      	mov	r4, r0
 8009c96:	460d      	mov	r5, r1
 8009c98:	d904      	bls.n	8009ca4 <_raise_r+0x14>
 8009c9a:	2316      	movs	r3, #22
 8009c9c:	6003      	str	r3, [r0, #0]
 8009c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ca6:	b112      	cbz	r2, 8009cae <_raise_r+0x1e>
 8009ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cac:	b94b      	cbnz	r3, 8009cc2 <_raise_r+0x32>
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 f830 	bl	8009d14 <_getpid_r>
 8009cb4:	462a      	mov	r2, r5
 8009cb6:	4601      	mov	r1, r0
 8009cb8:	4620      	mov	r0, r4
 8009cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cbe:	f000 b817 	b.w	8009cf0 <_kill_r>
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d00a      	beq.n	8009cdc <_raise_r+0x4c>
 8009cc6:	1c59      	adds	r1, r3, #1
 8009cc8:	d103      	bne.n	8009cd2 <_raise_r+0x42>
 8009cca:	2316      	movs	r3, #22
 8009ccc:	6003      	str	r3, [r0, #0]
 8009cce:	2001      	movs	r0, #1
 8009cd0:	e7e7      	b.n	8009ca2 <_raise_r+0x12>
 8009cd2:	2400      	movs	r4, #0
 8009cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cd8:	4628      	mov	r0, r5
 8009cda:	4798      	blx	r3
 8009cdc:	2000      	movs	r0, #0
 8009cde:	e7e0      	b.n	8009ca2 <_raise_r+0x12>

08009ce0 <raise>:
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <raise+0xc>)
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	f7ff bfd3 	b.w	8009c90 <_raise_r>
 8009cea:	bf00      	nop
 8009cec:	20000010 	.word	0x20000010

08009cf0 <_kill_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	; (8009d10 <_kill_r+0x20>)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	f7f9 f96d 	bl	8002fdc <_kill>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d102      	bne.n	8009d0c <_kill_r+0x1c>
 8009d06:	682b      	ldr	r3, [r5, #0]
 8009d08:	b103      	cbz	r3, 8009d0c <_kill_r+0x1c>
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	bf00      	nop
 8009d10:	2000034c 	.word	0x2000034c

08009d14 <_getpid_r>:
 8009d14:	f7f9 b95a 	b.w	8002fcc <_getpid>

08009d18 <__sread>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d20:	f000 f894 	bl	8009e4c <_read_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	bfab      	itete	ge
 8009d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d2c:	181b      	addge	r3, r3, r0
 8009d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d32:	bfac      	ite	ge
 8009d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d36:	81a3      	strhlt	r3, [r4, #12]
 8009d38:	bd10      	pop	{r4, pc}

08009d3a <__swrite>:
 8009d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3e:	461f      	mov	r7, r3
 8009d40:	898b      	ldrh	r3, [r1, #12]
 8009d42:	05db      	lsls	r3, r3, #23
 8009d44:	4605      	mov	r5, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	4616      	mov	r6, r2
 8009d4a:	d505      	bpl.n	8009d58 <__swrite+0x1e>
 8009d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d50:	2302      	movs	r3, #2
 8009d52:	2200      	movs	r2, #0
 8009d54:	f000 f868 	bl	8009e28 <_lseek_r>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	4632      	mov	r2, r6
 8009d66:	463b      	mov	r3, r7
 8009d68:	4628      	mov	r0, r5
 8009d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	f000 b817 	b.w	8009da0 <_write_r>

08009d72 <__sseek>:
 8009d72:	b510      	push	{r4, lr}
 8009d74:	460c      	mov	r4, r1
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 f855 	bl	8009e28 <_lseek_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	bf15      	itete	ne
 8009d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d8e:	81a3      	strheq	r3, [r4, #12]
 8009d90:	bf18      	it	ne
 8009d92:	81a3      	strhne	r3, [r4, #12]
 8009d94:	bd10      	pop	{r4, pc}

08009d96 <__sclose>:
 8009d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9a:	f000 b813 	b.w	8009dc4 <_close_r>
	...

08009da0 <_write_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d07      	ldr	r5, [pc, #28]	; (8009dc0 <_write_r+0x20>)
 8009da4:	4604      	mov	r4, r0
 8009da6:	4608      	mov	r0, r1
 8009da8:	4611      	mov	r1, r2
 8009daa:	2200      	movs	r2, #0
 8009dac:	602a      	str	r2, [r5, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f7f9 f94b 	bl	800304a <_write>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_write_r+0x1e>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_write_r+0x1e>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	2000034c 	.word	0x2000034c

08009dc4 <_close_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4d06      	ldr	r5, [pc, #24]	; (8009de0 <_close_r+0x1c>)
 8009dc8:	2300      	movs	r3, #0
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4608      	mov	r0, r1
 8009dce:	602b      	str	r3, [r5, #0]
 8009dd0:	f7f9 f957 	bl	8003082 <_close>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	d102      	bne.n	8009dde <_close_r+0x1a>
 8009dd8:	682b      	ldr	r3, [r5, #0]
 8009dda:	b103      	cbz	r3, 8009dde <_close_r+0x1a>
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	2000034c 	.word	0x2000034c

08009de4 <_fstat_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d07      	ldr	r5, [pc, #28]	; (8009e04 <_fstat_r+0x20>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	4611      	mov	r1, r2
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	f7f9 f952 	bl	800309a <_fstat>
 8009df6:	1c43      	adds	r3, r0, #1
 8009df8:	d102      	bne.n	8009e00 <_fstat_r+0x1c>
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	b103      	cbz	r3, 8009e00 <_fstat_r+0x1c>
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	bd38      	pop	{r3, r4, r5, pc}
 8009e02:	bf00      	nop
 8009e04:	2000034c 	.word	0x2000034c

08009e08 <_isatty_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d06      	ldr	r5, [pc, #24]	; (8009e24 <_isatty_r+0x1c>)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	4608      	mov	r0, r1
 8009e12:	602b      	str	r3, [r5, #0]
 8009e14:	f7f9 f951 	bl	80030ba <_isatty>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_isatty_r+0x1a>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_isatty_r+0x1a>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	2000034c 	.word	0x2000034c

08009e28 <_lseek_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d07      	ldr	r5, [pc, #28]	; (8009e48 <_lseek_r+0x20>)
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	4608      	mov	r0, r1
 8009e30:	4611      	mov	r1, r2
 8009e32:	2200      	movs	r2, #0
 8009e34:	602a      	str	r2, [r5, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f7f9 f94a 	bl	80030d0 <_lseek>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_lseek_r+0x1e>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_lseek_r+0x1e>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	2000034c 	.word	0x2000034c

08009e4c <_read_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4d07      	ldr	r5, [pc, #28]	; (8009e6c <_read_r+0x20>)
 8009e50:	4604      	mov	r4, r0
 8009e52:	4608      	mov	r0, r1
 8009e54:	4611      	mov	r1, r2
 8009e56:	2200      	movs	r2, #0
 8009e58:	602a      	str	r2, [r5, #0]
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	f7f9 f8d8 	bl	8003010 <_read>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_read_r+0x1e>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_read_r+0x1e>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	2000034c 	.word	0x2000034c

08009e70 <_init>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	bf00      	nop
 8009e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e76:	bc08      	pop	{r3}
 8009e78:	469e      	mov	lr, r3
 8009e7a:	4770      	bx	lr

08009e7c <_fini>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	bf00      	nop
 8009e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e82:	bc08      	pop	{r3}
 8009e84:	469e      	mov	lr, r3
 8009e86:	4770      	bx	lr
